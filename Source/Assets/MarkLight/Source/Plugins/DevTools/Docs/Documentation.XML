<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <member name="T:Marklight.DevTools.Source.DevTools">
            <summary>
            Generates HTML documentation for the Marklight framework.
            </summary>
        </member>
        <member name="T:Marklight.DevTools.Source.DocData">
            <summary>
            Contains data about a view, data-type or method.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.Data.Highscore">
            <summary>
            Highscore.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.Data.Player">
            <summary>
            Player.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.Data.MenuItem">
            <summary>
            Menu items.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.Data.Card">
            <summary>
            Card.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.Data.CardSuit">
            <summary>
            Defines card suit.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.Data.Level">
            <summary>
            Level.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.Basic.ButtonsExample">
            <summary>
            Example demonstrating the button view.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.Basic.ButtonsExample.ButtonClick">
            <summary>
            Called when the button is clicked.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.Basic.ComboBoxExample">
            <summary>
            Example demonstrating the combo box.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.Basic.DataGridExample">
            <summary>
            Example demonstrating how content can be organized in a data grid.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.Basic.DataGridExample.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.Basic.GroupExample">
            <summary>
            Example demonstrating how content can be organized with the group view.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.Basic.InputFieldExample">
            <summary>
            Example demonstrating the button view.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.Basic.ListExample">
            <summary>
            Example demonstrating the list view.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.Basic.ListExample.ListItemSelected(MarkLight.Views.UI.ItemSelectionActionData)">
            <summary>
            Adds new item to the list.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.Basic.PanelExample">
            <summary>
            Example demonstrating the button view.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.Basic.RadialMenuExample">
            <summary>
            Example demonstrating the radial menu.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.Basic.RadialMenuExample.ToggleRadialMenu(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called when the user clicks on the interactable surface.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.Basic.RadialMenuExample.MenuButtonClicked(MarkLight.Views.UI.Button)">
            <summary>
            Called when a button in the radial menu is clicked.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.Basic.SliderExample">
            <summary>
            Example demonstrating the button view.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.Basic.TabPanelExample">
            <summary>
            Example demonstrating how content can be organized in a tab panel.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.Basic.TabPanelExample.SetTabOrientation(MarkLight.Views.UI.RadioButton)">
            <summary>
            Changes the tab orientation based on the radio button selection.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.Basic.TabPanelExample.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.Basic.WindowExample">
            <summary>
            Example demonstrating the button view.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.Basic.WindowExample.ToggleWindow">
            <summary>
            Open/closes the window.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.DataBinding.DynamicComboBoxExample">
            <summary>
            Example demonstrating binding list data to a ComboBox view.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.DataBinding.DynamicComboBoxExample.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.DataBinding.DynamicComboBoxExample.Add">
            <summary>
            Adds new item to the combo box.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.DataBinding.DynamicComboBoxExample.Remove">
            <summary>
            Removes selected item(s) from the combo-box.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.DataBinding.DynamicComboBoxExample.ItemSelected(MarkLight.Views.UI.ItemSelectionActionData)">
            <summary>
            Called when an item in the combo box is selected.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.DataBinding.DynamicDataGridExample">
            <summary>
            Example demonstrating binding list data to a DataGrid view.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.DataBinding.DynamicDataGridExample.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.DataBinding.DynamicDataGridExample.Add">
            <summary>
            Adds new item to the data grid.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.DataBinding.DynamicDataGridExample.Remove">
            <summary>
            Removes selected item(s) from the data grid.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.DataBinding.DynamicDataGridExample.ItemSelected">
            <summary>
            Called when row is selected in the grid.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.DataBinding.DynamicListExample">
            <summary>
            Example demonstrating binding list data to the List view.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.DataBinding.DynamicListExample.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.DataBinding.DynamicListExample.Add">
            <summary>
            Adds new item to the list.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.DataBinding.DynamicListExample.Remove">
            <summary>
            Removes selected item(s) from the list.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.DataBinding.DynamicTabPanelExample">
            <summary>
            Example demonstrating binding list data to a TabPanel view.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.DataBinding.DynamicTabPanelExample.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.DataBinding.DynamicTabPanelExample.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.DataBinding.DynamicTabPanelExample.AddTab">
            <summary>
            Adds a new tab.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.DataBinding.DynamicTabPanelExample.RemoveTab">
            <summary>
            Removes selected tab.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.GameMenuExample">
            <summary>
            Example demonstrating a game menu.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.GameMenuExample.StartLevel(MarkLight.Views.UI.Button)">
            <summary>
            Called when level select button is clicked.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.GameMenuExample.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.LayoutExample">
            <summary>
            Example demonstrating how we can adjust layout to a region by changing Alignment, Margin and Offset.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.PlayingCardsExample">
            <summary>
            Example showing dynamic list of cards in a scrollable wrapped list featuring multiple templates.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.PlayingCardsExample.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.PlayingCardsExample.Add">
            <summary>
            Adds new card to the list.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.PlayingCardsExample.Remove">
            <summary>
            Removes selected card from the list.
            </summary>
        </member>
        <member name="M:MarkLight.Examples.UI.PlayingCardsExample.ScrollTo">
            <summary>
            Scroll to card in list.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.UIExamples">
            <summary>
            Examples demonstrating the UI views.
            </summary>
        </member>
        <member name="T:MarkLight.Examples.UI.ViewSwitcherExample">
            <summary>
            Examples demonstrating the view switcher.
            </summary>
        </member>
        <member name="T:MarkLight.ActionData">
            <summary>
            Base class for action data.
            </summary>
        </member>
        <member name="T:MarkLight.AdjustToText">
            <summary>
            Enum indicating if size should be adjusted to text.
            </summary>
        </member>
        <member name="F:MarkLight.AdjustToText.None">
            <summary>
            Neither width nor height should be adjusted to text.
            </summary>
        </member>
        <member name="F:MarkLight.AdjustToText.Width">
            <summary>
            Adjust width to text.
            </summary>
        </member>
        <member name="F:MarkLight.AdjustToText.Height">
            <summary>
            Adjust height to text.
            </summary>
        </member>
        <member name="F:MarkLight.AdjustToText.WidthAndHeight">
            <summary>
            Adjust width and height to text.
            </summary>
        </member>
        <member name="T:MarkLight.Animation.EasingFunctionType">
            <summary>
            Specifies what kind of easing function should be used when values are interpolated.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.Linear">
            <summary>
            Linear easing function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.QuadraticEaseIn">
            <summary>
            Quadratic ease in function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.QuadraticEaseOut">
            <summary>
            Quadratic ease out function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.QuadraticEaseInOut">
            <summary>
            Quadratic ease in and out function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.CubicEaseIn">
            <summary>
            Cubic ease in function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.CubicEaseOut">
            <summary>
            Cubic ease out function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.CubicEaseInOut">
            <summary>
            Cubic ease in and out function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.QuarticEaseIn">
            <summary>
            Quartic ease in function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.QuarticEaseOut">
            <summary>
            Quartic ease out function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.QuarticEaseInOut">
            <summary>
            Quartic ease in and out function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.QuinticEaseIn">
            <summary>
            Quintic ease in function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.QuinticEaseOut">
            <summary>
            Quintic ease out function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.QuinticEaseInOut">
            <summary>
            Quintic ease in and out function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.SineEaseIn">
            <summary>
            Sine ease in function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.SineEaseOut">
            <summary>
            Sine ease out function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.SineEaseInOut">
            <summary>
            Sine ease in and out function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.CircularEaseIn">
            <summary>
            Circular ease in function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.CircularEaseOut">
            <summary>
            Circular ease out function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.CircularEaseInOut">
            <summary>
            Circular ease in and out function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.ExponentialEaseIn">
            <summary>
            Expontential ease in function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.ExponentialEaseOut">
            <summary>
            Exponential ease out function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.ExponentialEaseInOut">
            <summary>
            Exponential ease in and out function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.ElasticEaseIn">
            <summary>
            Elastic ease in function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.ElasticEaseOut">
            <summary>
            Elastic ease out function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.ElasticEaseInOut">
            <summary>
            Elastic ease in and out function.
            </summary>         
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.BounceEaseIn">
            <summary>
            Bounce ease in function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.BounceEaseOut">
            <summary>
            Bounce ease out function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.BounceEaseInOut">
            <summary>
            Bounce ease in and out function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.BackEaseIn">
            <summary>
            Back ease in function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.BackEaseOut">
            <summary>
            Back ease out function.
            </summary>
        </member>
        <member name="F:MarkLight.Animation.EasingFunctionType.BackEaseInOut">
            <summary>
            Back ease in and out function.
            </summary>
        </member>
        <member name="T:MarkLight.Animation.EasingFunctions">
            <summary>
            Easing functions derived from AHEasing, a library of easing functions. Credit goes to warrenm author of AHEasing.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.GetEasingFunction(MarkLight.Animation.EasingFunctionType)">
            <summary>
            Sets easing function.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.Linear(System.Single)">
            <summary>
            Easing modeled after the line y = x
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.QuadraticEaseIn(System.Single)">
            <summary>
            Easing modeled after the parabola y = x^2
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.QuadraticEaseOut(System.Single)">
            <summary>
            Easing modeled after the parabola y = -x^2 + 2x
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.QuadraticEaseInOut(System.Single)">
            <summary>
            Easing modeled after the piecewise quadratic
            y = (1/2)((2x)^2)             ; [0, 0.5)
            y = -(1/2)((2x-1)*(2x-3) - 1) ; [0.5, 1]
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.CubicEaseIn(System.Single)">
            <summary>
            Easing modeled after the cubic y = x^3
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.CubicEaseOut(System.Single)">
            <summary>
            Easing modeled after the cubic y = (x - 1)^3 + 1
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.CubicEaseInOut(System.Single)">
            <summary>
            Easing modeled after the piecewise cubic
            y = (1/2)((2x)^3)       ; [0, 0.5)
            y = (1/2)((2x-2)^3 + 2) ; [0.5, 1]
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.QuarticEaseIn(System.Single)">
            <summary>
            Easing modeled after the quartic x^4
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.QuarticEaseOut(System.Single)">
            <summary>
            Easing modeled after the quartic y = 1 - (x - 1)^4
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.QuarticEaseInOut(System.Single)">
            <summary>
            Easing modeled after the piecewise quartic
            y = (1/2)((2x)^4)        ; [0, 0.5)
            y = -(1/2)((2x-2)^4 - 2) ; [0.5, 1]
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.QuinticEaseIn(System.Single)">
            <summary>
            Easing modeled after the quintic y = x^5
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.QuinticEaseOut(System.Single)">
            <summary>
            Easing modeled after the quintic y = (x - 1)^5 + 1
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.QuinticEaseInOut(System.Single)">
            <summary>
            Easing modeled after the piecewise quintic
            y = (1/2)((2x)^5)       ; [0, 0.5)
            y = (1/2)((2x-2)^5 + 2) ; [0.5, 1]
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.SineEaseIn(System.Single)">
            <summary>
            Easing modeled after quarter-cycle of sine wave
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.SineEaseOut(System.Single)">
            <summary>
            Easing modeled after quarter-cycle of sine wave (different phase)
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.SineEaseInOut(System.Single)">
            <summary>
            Easing modeled after half sine wave
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.CircularEaseIn(System.Single)">
            <summary>
            Easing modeled after shifted quadrant IV of unit circle
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.CircularEaseOut(System.Single)">
            <summary>
            Easing modeled after shifted quadrant II of unit circle
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.CircularEaseInOut(System.Single)">
            <summary>
            Easing modeled after the piecewise circular function
            y = (1/2)(1 - Mathf.Sqrt(1 - 4x^2))           ; [0, 0.5)
            y = (1/2)(Mathf.Sqrt(-(2x - 3)*(2x - 1)) + 1) ; [0.5, 1]
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.ExponentialEaseIn(System.Single)">
            <summary>
            Easing modeled after the exponential function y = 2^(10(x - 1))
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.ExponentialEaseOut(System.Single)">
            <summary>
            Easing modeled after the exponential function y = -2^(-10x) + 1
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.ExponentialEaseInOut(System.Single)">
            <summary>
            Easing modeled after the piecewise exponential
            y = (1/2)2^(10(2x - 1))         ; [0,0.5)
            y = -(1/2)*2^(-10(2x - 1))) + 1 ; [0.5,1]
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.ElasticEaseIn(System.Single)">
            <summary>
            Easing modeled after the damped sine wave y = Mathf.Sin(13pi/2*x)*Mathf.Pow(2, 10 * (x - 1))
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.ElasticEaseOut(System.Single)">
            <summary>
            Easing modeled after the damped sine wave y = Mathf.Sin(-13pi/2*(x + 1))*Mathf.Pow(2, -10x) + 1
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.ElasticEaseInOut(System.Single)">
            <summary>
            Easing modeled after the piecewise exponentially-damped sine wave:
            y = (1/2)*Mathf.Sin(13pi/2*(2*x))*Mathf.Pow(2, 10 * ((2*x) - 1))      ; [0,0.5)
            y = (1/2)*(Mathf.Sin(-13pi/2*((2x-1)+1))*Mathf.Pow(2,-10(2*x-1)) + 2) ; [0.5, 1]
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.BackEaseIn(System.Single)">
            <summary>
            Easing modeled after the overshooting cubic y = x^3-x*Mathf.Sin(x*pi)
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.BackEaseOut(System.Single)">
            <summary>
            Easing modeled after overshooting cubic y = 1-((1-x)^3-(1-x)*Mathf.Sin((1-x)*pi))
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.BackEaseInOut(System.Single)">
            <summary>
            Easing modeled after the piecewise overshooting cubic function:
            y = (1/2)*((2x)^3-(2x)*Mathf.Sin(2*x*pi))           ; [0, 0.5)
            y = (1/2)*(1-((1-x)^3-(1-x)*Mathf.Sin((1-x)*pi))+1) ; [0.5, 1]
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.BounceEaseIn(System.Single)">
            <summary>
            Easing modeled after the piecewise overshooting cubic function.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.BounceEaseOut(System.Single)">
            <summary>
            Easing modeled after the piecewise overshooting cubic function.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.EasingFunctions.BounceEaseInOut(System.Single)">
            <summary>
            Easing modeled after the piecewise overshooting cubic function.
            </summary>
        </member>
        <member name="T:MarkLight.Animation.ValueInterpolator">
            <summary>
            Base class for value interpolators.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.ValueInterpolator.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.ValueInterpolator.Interpolate(System.Object,System.Object,System.Single)">
            <summary>
            Interpolates between two values based on a weight.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.ValueInterpolator.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Linear interpolation between two float values.
            </summary>
        </member>
        <member name="P:MarkLight.Animation.ValueInterpolator.Type">
            <summary>
            Gets type of values interpolated.
            </summary>
        </member>
        <member name="T:MarkLight.Animation.BoolValueInterpolator">
            <summary>
            Bool value interpolator.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.BoolValueInterpolator.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.BoolValueInterpolator.Interpolate(System.Object,System.Object,System.Single)">
            <summary>
            Interpolates between two float values based on a weight.
            </summary>
        </member>
        <member name="T:MarkLight.Animation.ColorValueInterpolator">
            <summary>
            Color value interpolator.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.ColorValueInterpolator.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.ColorValueInterpolator.Interpolate(System.Object,System.Object,System.Single)">
            <summary>
            Interpolates between two colors based on a weight.
            </summary>
        </member>
        <member name="T:MarkLight.Animation.ElementSizeValueInterpolator">
            <summary>
            Element size value interpolator.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.ElementSizeValueInterpolator.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.ElementSizeValueInterpolator.Interpolate(System.Object,System.Object,System.Single)">
            <summary>
            Interpolates between two element sizes based on a weight.
            </summary>
        </member>
        <member name="T:MarkLight.Animation.FloatValueInterpolator">
            <summary>
            Float value interpolator.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.FloatValueInterpolator.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.FloatValueInterpolator.Interpolate(System.Object,System.Object,System.Single)">
            <summary>
            Interpolates between two float values based on a weight.
            </summary>
        </member>
        <member name="T:MarkLight.Animation.MarginValueInterpolator">
            <summary>
            Margin value interpolator.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.MarginValueInterpolator.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.MarginValueInterpolator.Interpolate(System.Object,System.Object,System.Single)">
            <summary>
            Interpolates between two colors based on a weight.
            </summary>
        </member>
        <member name="T:MarkLight.Animation.QuaternionValueInterpolator">
            <summary>
            Element size value interpolator.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.QuaternionValueInterpolator.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.QuaternionValueInterpolator.Interpolate(System.Object,System.Object,System.Single)">
            <summary>
            Interpolates between two element sizes based on a weight.
            </summary>
        </member>
        <member name="T:MarkLight.Animation.SpriteValueInterpolator">
            <summary>
            Sprite value interpolator.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.SpriteValueInterpolator.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.SpriteValueInterpolator.Interpolate(System.Object,System.Object,System.Single)">
            <summary>
            Interpolates between two sprites based on a weight.
            </summary>
        </member>
        <member name="T:MarkLight.Animation.Vector2ValueInterpolator">
            <summary>
            Vector2 value interpolator.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.Vector2ValueInterpolator.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.Vector2ValueInterpolator.Interpolate(System.Object,System.Object,System.Single)">
            <summary>
            Interpolates between two vector values based on a weight.
            </summary>
        </member>
        <member name="T:MarkLight.Animation.Vector3ValueInterpolator">
            <summary>
            Vector3 value interpolator.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.Vector3ValueInterpolator.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.Vector3ValueInterpolator.Interpolate(System.Object,System.Object,System.Single)">
            <summary>
            Interpolates between two vector values based on a weight.
            </summary>
        </member>
        <member name="T:MarkLight.Animation.Vector4ValueInterpolator">
            <summary>
            Vector4 value interpolator.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.Vector4ValueInterpolator.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.Vector4ValueInterpolator.Interpolate(System.Object,System.Object,System.Single)">
            <summary>
            Interpolates between two vector values based on a weight.
            </summary>
        </member>
        <member name="T:MarkLight.Animation.ViewFieldAnimator">
            <summary>
            Animates a field.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.ViewFieldAnimator.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.ViewFieldAnimator.Update">
            <summary>
            Updates the animation each frame.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.ViewFieldAnimator.StartAnimation">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.ViewFieldAnimator.UpdateAnimation(System.Single)">
            <summary>
            Updates the animator.
            </summary>
            <param name="deltaTime">Time since last update in seconds.</param>
        </member>
        <member name="M:MarkLight.Animation.ViewFieldAnimator.CompleteAnimation">
            <summary>
            Called when the animation is completed.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.ViewFieldAnimator.StopAnimation">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.ViewFieldAnimator.ResetAndStopAnimation">
            <summary>
            Resets and stops animation.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.ViewFieldAnimator.ReverseAnimation">
            <summary>
            Reverses the animation. Resumes the animation if paused.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.ViewFieldAnimator.PauseAnimation">
            <summary>
            Pauses animation.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.ViewFieldAnimator.ResumeAnimation">
            <summary>
            Resumes paused animation.
            </summary>
        </member>
        <member name="M:MarkLight.Animation.ViewFieldAnimator.ResetAnimation">
            <summary>
            Resets the animation to its initial state (doesn't stop it).
            </summary>
        </member>
        <member name="P:MarkLight.Animation.ViewFieldAnimator.IsRunning">
            <summary>
            Gets a value indicating whether this animation is running.
            </summary>
        </member>
        <member name="P:MarkLight.Animation.ViewFieldAnimator.IsReversing">
            <summary>
            Gets a value indicating whether this animation is reversing.
            </summary>
        </member>
        <member name="P:MarkLight.Animation.ViewFieldAnimator.IsCompleted">
            <summary>
            Gets boolean indicating if animation is completed.
            </summary>
        </member>
        <member name="P:MarkLight.Animation.ViewFieldAnimator.IsPaused">
            <summary>
            Gets a value indicating whether this animation is paused.
            </summary>
        </member>
        <member name="P:MarkLight.Animation.ViewFieldAnimator.View">
            <summary>
            View which field is being animated.
            </summary>
        </member>
        <member name="T:MarkLight.BindingSource">
            <summary>
            Binding source.
            </summary>
        </member>
        <member name="M:MarkLight.BindingSource.GetValue(System.Boolean@)">
            <summary>
            Gets value from binding source.
            </summary>
        </member>
        <member name="P:MarkLight.BindingSource.BindingSourceString">
            <summary>
            Gets binding source string.
            </summary>
        </member>
        <member name="T:MarkLight.BindingType">
            <summary>
            Type of binding used.
            </summary>
        </member>
        <member name="F:MarkLight.BindingType.SingleBinding">
            <summary>
            Binding to a single view field.
            </summary>
        </member>
        <member name="F:MarkLight.BindingType.MultiBindingTransform">
            <summary>
            Binding to multiple view fields combined through a transformation method.
            </summary>
        </member>
        <member name="F:MarkLight.BindingType.MultiBindingFormatString">
            <summary>
            Binding to a single or multiple view fields through a format string.
            </summary>
        </member>
        <member name="T:MarkLight.BindingValueObserver">
            <summary>
            Binding value observer.
            </summary>
        </member>
        <member name="M:MarkLight.BindingValueObserver.#ctor">
            <summary>
            Initializes static instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.BindingValueObserver.Notify(System.Collections.Generic.HashSet{MarkLight.ViewFieldData})">
            <summary>
            Notifies the binding value observer that value has changed.
            </summary>
        </member>
        <member name="M:MarkLight.BindingValueObserver.PrintBindingError(System.Exception)">
            <summary>
            Prints a formatted error message.
            </summary>
        </member>
        <member name="T:MarkLight.ChangeHandler">
            <summary>
            Declares a change handler that will be invoked whenever the field changes value.
            </summary>
        </member>
        <member name="M:MarkLight.ChangeHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:MarkLight.ChangeHandlerValueObserver">
            <summary>
            Change handler value observer.
            </summary>
        </member>
        <member name="M:MarkLight.ChangeHandlerValueObserver.#ctor(MarkLight.View,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ChangeHandlerValueObserver.Notify(System.Collections.Generic.HashSet{MarkLight.ViewFieldData})">
            <summary>
            Notifies the change handler value observer that value has changed.
            </summary>
        </member>
        <member name="M:MarkLight.ChangeHandlerValueObserver.Trigger">
            <summary>
            Triggers the change handler.
            </summary>
        </member>
        <member name="T:MarkLight.ConversionResult">
            <summary>
            Contains the result of a value conversion.
            </summary>
        </member>
        <member name="M:MarkLight.ConversionResult.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ConversionResult.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="P:MarkLight.ConversionResult.ConvertedValue">
            <summary>
            Gets or sets converted value.
            </summary>
        </member>
        <member name="P:MarkLight.ConversionResult.Success">
            <summary>
            Gets or sets boolean indicating if conversion was successful.
            </summary>
        </member>
        <member name="P:MarkLight.ConversionResult.ErrorMessage">
            <summary>
            Gets or sets string containing eventual error message if conversion was unsuccessful.
            </summary>
        </member>
        <member name="T:MarkLight.ElementAlignment">
            <summary>
            Enum indicating horizontal and vertical alignment.
            </summary>
        </member>
        <member name="F:MarkLight.ElementAlignment.Center">
            <summary>
            Element centered horizontally and vertically.
            </summary>
        </member>
        <member name="F:MarkLight.ElementAlignment.Left">
            <summary>
            Element aligned to the left horizontally and centered vertically.
            </summary>
        </member>
        <member name="F:MarkLight.ElementAlignment.Top">
            <summary>
            Element aligned to the top vertically and centered horizontally.
            </summary>
        </member>
        <member name="F:MarkLight.ElementAlignment.Right">
            <summary>
            Element aligned to the right horizontally and centered vertically.
            </summary>
        </member>
        <member name="F:MarkLight.ElementAlignment.Bottom">
            <summary>
            Element aligned to the bottom vertically and centered horizontally.
            </summary>       
        </member>
        <member name="F:MarkLight.ElementAlignment.TopLeft">
            <summary>
            Element aligned to the top vertically and to the left horizontally.
            </summary>
        </member>
        <member name="F:MarkLight.ElementAlignment.TopRight">
            <summary>
            Element aligned to the top vertically and to the right horizontally.
            </summary>
        </member>
        <member name="F:MarkLight.ElementAlignment.BottomLeft">
            <summary>
            Element aligned to the bottom vertically and to the left horizontally.
            </summary>
        </member>
        <member name="F:MarkLight.ElementAlignment.BottomRight">
            <summary>
            Alement aligned to the bottom vertically and to the right horizontally.
            </summary>
        </member>
        <member name="T:MarkLight.ElementMargin">
            <summary>
            Represents left, top, right and bottom margins.
            </summary>
        </member>
        <member name="M:MarkLight.ElementMargin.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ElementMargin.#ctor(MarkLight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ElementMargin.#ctor(MarkLight.ElementSize,MarkLight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ElementMargin.#ctor(MarkLight.ElementSize,MarkLight.ElementSize,MarkLight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ElementMargin.#ctor(MarkLight.ElementSize,MarkLight.ElementSize,MarkLight.ElementSize,MarkLight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ElementMargin.FromLeft(MarkLight.ElementSize)">
            <summary>
            Gets left margin from left size.
            </summary>
        </member>
        <member name="M:MarkLight.ElementMargin.FromTop(MarkLight.ElementSize)">
            <summary>
            Gets top margin from top size.
            </summary>
        </member>
        <member name="M:MarkLight.ElementMargin.FromRight(MarkLight.ElementSize)">
            <summary>
            Gets right margin from right size.
            </summary>
        </member>
        <member name="M:MarkLight.ElementMargin.FromBottom(MarkLight.ElementSize)">
            <summary>
            Gets bottom margin from bottom size.
            </summary>
        </member>
        <member name="M:MarkLight.ElementMargin.ToString">
            <summary>
            Converts margin to string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MarkLight.ElementMargin.Left">
            <summary>
            Gets or sets left margin.
            </summary>
        </member>
        <member name="P:MarkLight.ElementMargin.Top">
            <summary>
            Gets or sets top margin.
            </summary>
        </member>
        <member name="P:MarkLight.ElementMargin.Right">
            <summary>
            Gets or sets right margin.
            </summary>
        </member>
        <member name="P:MarkLight.ElementMargin.Bottom">
            <summary>
            Gets or sets bottom margin.
            </summary>
        </member>
        <member name="T:MarkLight.ElementOrientation">
            <summary>
            Enum indicating vertical or horizontal orientation.
            </summary>
        </member>
        <member name="F:MarkLight.ElementOrientation.Vertical">
            <summary>
            Vertical element orientation.
            </summary>
        </member>
        <member name="F:MarkLight.ElementOrientation.Horizontal">
            <summary>
            Horizontal element orientation.
            </summary>
        </member>
        <member name="T:MarkLight.ElementSize">
            <summary>
            Represents size in pixels, elements or percentage.
            </summary>
        </member>
        <member name="M:MarkLight.ElementSize.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ElementSize.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ElementSize.#ctor(System.Single,MarkLight.ElementSizeUnit)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ElementSize.#ctor(MarkLight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ElementSize.op_Implicit(System.Single)~MarkLight.ElementSize">
            <summary>
            Converts float to element size.
            </summary>
        </member>
        <member name="M:MarkLight.ElementSize.FromPixels(System.Single)">
            <summary>
            Gets element size with the specified pixel size.
            </summary>
        </member>
        <member name="M:MarkLight.ElementSize.FromPercents(System.Single)">
            <summary>
            Gets element size with the specified percent size (0.0 - 1.0).
            </summary>
        </member>
        <member name="M:MarkLight.ElementSize.Parse(System.String,UnityEngine.Vector3)">
            <summary>
            Parses string into element size.
            </summary>
        </member>
        <member name="M:MarkLight.ElementSize.ToString">
            <summary>
            Converts element size to string.
            </summary>
        </member>
        <member name="P:MarkLight.ElementSize.Value">
            <summary>
            Gets or sets element size value.
            </summary>
        </member>
        <member name="P:MarkLight.ElementSize.Pixels">
            <summary>
            Gets or sets element size in pixels.
            </summary>
        </member>
        <member name="P:MarkLight.ElementSize.Percent">
            <summary>
            Gets or sets element size in percents.
            </summary>
        </member>
        <member name="P:MarkLight.ElementSize.Unit">
            <summary>
            Gets or sets element size unit.
            </summary>
        </member>
        <member name="P:MarkLight.ElementSize.Fill">
            <summary>
            Gets or sets boolean indicating if element size is to fill out remaining space (used by DataGrid).
            </summary>
        </member>
        <member name="T:MarkLight.ElementSizeUnit">
            <summary>
            Defines element size unit as pixels, percentage or elements.
            </summary>
        </member>
        <member name="F:MarkLight.ElementSizeUnit.Pixels">
            <summary>
            Element size specified in pixels.
            </summary>
        </member>
        <member name="F:MarkLight.ElementSizeUnit.Percents">
            <summary>
            Element size specified in percents.
            </summary>
        </member>
        <member name="T:MarkLight.ElementSortDirection">
            <summary>
            Enum indicating sort direction.
            </summary>
        </member>
        <member name="F:MarkLight.ElementSortDirection.Ascending">
            <summary>
            Ascending element sort direction.
            </summary>
        </member>
        <member name="F:MarkLight.ElementSortDirection.Descending">
            <summary>
            Descending element sort direction.
            </summary>
        </member>
        <member name="T:MarkLight.ExcludeComponent">
            <summary>
            Attribute indicating that component isn't to be automatically added to the view.
            </summary>
        </member>
        <member name="M:MarkLight.ExcludeComponent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:MarkLight.ExtensionMethods">
            <summary>
            Extension methods.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.DoUntil``1(MarkLight.View,System.Func{``0,System.Boolean},System.Boolean,MarkLight.View,MarkLight.TraversalAlgorithm)">
            <summary>
            Traverses the view object tree and performs an action on each child until the action returns false.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.ForEachChild``1(MarkLight.View,System.Action{``0},System.Boolean,MarkLight.View,MarkLight.TraversalAlgorithm)">
            <summary>
            Traverses the view object tree and performs an action on each child until the action returns false.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.ForThisAndEachChild``1(MarkLight.View,System.Action{``0},System.Boolean,MarkLight.View,MarkLight.TraversalAlgorithm)">
            <summary>
            Traverses the view object tree and performs an action on this view and its children until the action returns false.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.ForEachChild``1(UnityEngine.GameObject,System.Action{``0},System.Boolean,MarkLight.View,MarkLight.TraversalAlgorithm)">
            <summary>
            Traverses the view object tree and performs an action on each child until the action returns false.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.ForThisAndEachChild``1(UnityEngine.GameObject,System.Action{``0},System.Boolean,MarkLight.View,MarkLight.TraversalAlgorithm)">
            <summary>
            Traverses the view object tree and performs an action on each child until the action returns false.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.Find``1(MarkLight.View,System.Predicate{``0},System.Boolean,MarkLight.View,MarkLight.TraversalAlgorithm)">
            <summary>
            Traverses the view object tree and returns the first view that matches the predicate.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.Find``1(MarkLight.View,System.Boolean,MarkLight.View,MarkLight.TraversalAlgorithm)">
            <summary>
            Returns first view of type T found.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.Find``1(UnityEngine.GameObject,System.Predicate{``0},System.Boolean,MarkLight.View,MarkLight.TraversalAlgorithm)">
            <summary>
            Returns first view of type T found.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.Find``1(UnityEngine.GameObject,System.Boolean,MarkLight.View,MarkLight.TraversalAlgorithm)">
            <summary>
            Returns first view of type T found.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.Find``1(MarkLight.View,System.String,System.Boolean,MarkLight.View,MarkLight.TraversalAlgorithm)">
            <summary>
            Returns first view of type T with the specified ID.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.FindParent``1(MarkLight.View,System.Predicate{``0})">
            <summary>
            Returns first ascendant of type T found that matches the predicate.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.FindParent``1(MarkLight.View)">
            <summary>
            Returns first ascendant of type T found.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.ForEachParent``1(MarkLight.View,System.Action{``0})">
            <summary>
            Performs an action on all ascendants of a view.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.ForEachParent``1(UnityEngine.GameObject,System.Action{``0})">
            <summary>
            Performs an action on all ascendants of a view.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.ForThisAndEachParent``1(UnityEngine.GameObject,System.Action{``0})">
            <summary>
            Performs an action on this view and all its ascendants.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.ForThisAndEachParent``1(MarkLight.View,System.Action{``0})">
            <summary>
            Performs an action on this view and all its ascendants.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.GetChildren``1(MarkLight.View,System.Boolean,MarkLight.View,MarkLight.TraversalAlgorithm)">
            <summary>
            Gets a list of all descendants. 
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.GetChildren``1(MarkLight.View,System.Func{``0,System.Boolean},System.Boolean,MarkLight.View,MarkLight.TraversalAlgorithm)">
            <summary>
            Gets a list of all descendants matching the predicate. 
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.GetChildren``1(UnityEngine.GameObject,System.Func{``0,System.Boolean},System.Boolean,MarkLight.View,MarkLight.TraversalAlgorithm)">
            <summary>
            Gets a list of all descendants matching the predicate. 
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.GetChild(MarkLight.View,System.Int32,System.Boolean)">
            <summary>
            Gets child at index.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.Destroy(MarkLight.View,System.Boolean)">
            <summary>
            Destroys a view.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.Destroy(MarkLight.View,MarkLight.ViewPool,System.Boolean)">
            <summary>
            Destroy a view or moves it back into view pool.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.DestroyChildren(MarkLight.View,System.Boolean)">
            <summary>
            Destroys all children of a view.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.HasFlag(System.Enum,System.Enum)">
            <summary>
            Checks if a flag enum has a flag value set.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps a value to specified range [min, max].
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.Get``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Gets value from dictionary and returns null if it doesn't exist.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.Reset(UnityEngine.RectTransform)">
            <summary>
            Resets a rect transform.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.GetMouseScreenPosition(UnityEngine.Canvas,UnityEngine.Vector3)">
            <summary>
            Calculates mouse screen position.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.GetMouseScreenPosition(UnityEngine.Canvas,UnityEngine.Vector2)">
            <summary>
            Calculates mouse screen position.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.RemoveWhitespace(System.String)">
            <summary>
            Removes all whitespace from a string.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.GetFieldInfo(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets view field info from a type.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.GetFieldType(System.Reflection.MemberInfo)">
            <summary>
            Gets view field type from view field info.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.GetFieldValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets value from a view field.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.SetFieldValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets view field value.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds range of items to a hashset.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.ToScrollRectVisibility(MarkLight.PanelScrollbarVisibility)">
            <summary>
            Converts panel scrollbar visibility to unity scrollrect scrollbar visibility.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.ToPivot(MarkLight.ElementAlignment)">
            <summary>
            Converts content alignment to pivot.
            </summary>
        </member>
        <member name="M:MarkLight.ExtensionMethods.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            Replaces the first occurance of a string.
            </summary>
        </member>
        <member name="T:MarkLight.GenericObservableList">
            <summary>
            Generic observable list of objects.
            </summary>
        </member>
        <member name="T:MarkLight.GenericViewField">
            <summary>
            Specifies that a view field is generic.
            </summary>
        </member>
        <member name="T:MarkLight.HideInPresenter">
            <summary>
            Attribute indicating that the view is not to be shown in the view presenter's main view selection.
            </summary>
        </member>
        <member name="T:MarkLight.IObservableList">
            <summary>
            Interface for lists that notify observers when items are added, deleted or moved.
            </summary>
        </member>
        <member name="P:MarkLight.IObservableList.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:MarkLight.IObservableList.Item(System.Int32)">
            <summary>
            Gets the item at index.
            </summary>
        </member>
        <member name="T:MarkLight.ListChangedEventArgs">
            <summary>
            Contains arguments for the list changed event.
            </summary>
        </member>
        <member name="T:MarkLight.ListChangeAction">
            <summary>
            Enum indicating type of list change action initiated.
            </summary>
        </member>
        <member name="F:MarkLight.ListChangeAction.Add">
            <summary>
            Items added to list.
            </summary>
        </member>
        <member name="F:MarkLight.ListChangeAction.Move">
            <summary>
            Items moved (rearranged) within list.
            </summary>
        </member>
        <member name="F:MarkLight.ListChangeAction.Remove">
            <summary>
            Items removed from list.
            </summary>
        </member>
        <member name="F:MarkLight.ListChangeAction.Replace">
            <summary>
            Items replaced in list.
            </summary>
        </member>
        <member name="F:MarkLight.ListChangeAction.Clear">
            <summary>
            All items cleared from list.
            </summary>
        </member>
        <member name="F:MarkLight.ListChangeAction.Modify">
            <summary>
            Items modified in list.
            </summary>
        </member>
        <member name="F:MarkLight.ListChangeAction.Select">
            <summary>
            Item selected in list.
            </summary>
        </member>
        <member name="F:MarkLight.ListChangeAction.ScrollTo">
            <summary>
            Item scrolled to.
            </summary>
        </member>
        <member name="T:MarkLight.MapTo">
            <summary>
            Maps a dependency field to another field.
            </summary>
        </member>
        <member name="M:MarkLight.MapTo.#ctor(System.String,System.String,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:MarkLight.MapViewField">
            <summary>
            Maps one field to another.
            </summary>
        </member>
        <member name="M:MarkLight.MapViewField.#ctor(System.String,System.String,System.String,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:MarkLight.NotSetFromXuml">
            <summary>
            Attribute indicating that field is not to be set from XUML.
            </summary>
        </member>
        <member name="T:MarkLight.ObservableList`1">
            <summary>
            Generic list that notify observers when items are added, deleted or moved.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Add(System.Object)">
            <summary>
            Adds item to the end of the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Add(System.Collections.IEnumerable)">
            <summary>
            Adds a range of items to the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Add(`0)">
            <summary>
            Adds item to the end of the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the end of the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Replace(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces the items in the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Replace(System.Int32,`0)">
            <summary>
            Replaces a single item in the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.ItemModified(`0,System.String)">
            <summary>
            Informs observers that item has been modified.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.ItemModified(System.Int32,System.String)">
            <summary>
            Informs observers that item has been modified.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.ItemsModified(System.String)">
            <summary>
            Informs observers that all items have been modified.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.ItemsModified(System.Int32,System.Int32,System.String)">
            <summary>
            Informs observers that items have been modified.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.AsReadOnly">
            <summary>
            Returns list as read-only collection.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.BinarySearch(`0)">
            <summary>
            Performs a binary search on the sorted list using default comparer and returning a zero-based index of the item.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Performs a binary search on the sorted list using default comparer and returning a zero-based index of the item.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Performs a binary search on the sorted list using default comparer and returning a zero-based index of the item.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Contains(`0)">
            <summary>
            Returns boolean indicating if list contains the item.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts the items in the list to another type and returns a new list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.CopyTo(`0[])">
            <summary>
            Copies the list to an array.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the list to an array.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies the list to an array.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Exists(System.Predicate{`0})">
            <summary>
            Returns boolean indicating if an item matching the predicate exists in the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Find(System.Predicate{`0})">
            <summary>
            Returns first item matching the predicate.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.FindAll(System.Predicate{`0})">
            <summary>
            Returns all items that matches the predicate.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.FindIndex(System.Predicate{`0})">
            <summary>
            Returns the index of the item matching the predicate.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Returns the index of the item matching the predicate.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Returns the index of the item matching the predicate.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.FindLast(System.Predicate{`0})">
            <summary>
            Returns the last item matching the predicate.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Returns the index of the last item matching the predicate.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Returns the index of the last item matching the predicate.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Returns the index of the last item matching the predicate.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.ForEach(System.Action{`0})">
            <summary>
            Performs an action on each item in the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.GetEnumerator">
            <summary>
            Gets list enumerator.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets list enumerator.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copies of the specified range of items in the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.IndexOf(`0)">
            <summary>
            Gets the index of the specified item.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.IndexOf(`0,System.Int32)">
            <summary>
            Gets the index of the specified item.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Gets the index of the specified item.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the list at the specified index.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a range of items at the specified index.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.LastIndexOf(`0)">
            <summary>
            Gets the last index of the specified item.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Gets the last index of the specified item.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Gets the last index of the specified item.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Remove(System.Object)">
            <summary>
            Removes the first occurance of an item from the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Remove(`0)">
            <summary>
            Removes the first occurance of an item from the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Remove(System.Collections.IEnumerable)">
            <summary>
            Removes the items from the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all items that matches the predicate.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes item at the specified index.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items from the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Reverse">
            <summary>
            Reverses the order of the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the items in the specified range.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Sort">
            <summary>
            Sorts the list using the default comparer.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.ToArray">
            <summary>
            Copies the list to an array.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.TrimExcess">
            <summary>
            Sets capacity to the number of items in the list.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Returns boolean indicating if all items matches the predicate.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.SetSelected(System.Object)">
            <summary>
            Sets selected item without notifying observers.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.GetIndex(System.Object)">
            <summary>
            Gets index of an item.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.ScrollTo(`0,System.Nullable{MarkLight.ElementAlignment},MarkLight.ElementMargin)">
            <summary>
            Scrolls to item.
            </summary>
        </member>
        <member name="M:MarkLight.ObservableList`1.ScrollTo(System.Int32,System.Nullable{MarkLight.ElementAlignment},MarkLight.ElementMargin)">
            <summary>
            Scrolls to item.
            </summary>
        </member>
        <member name="P:MarkLight.ObservableList`1.Capacity">
            <summary>
            Gets or sets the capacity of the list.
            </summary>
        </member>
        <member name="P:MarkLight.ObservableList`1.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:MarkLight.ObservableList`1.MarkLight#IObservableList#Item(System.Int32)">
            <summary>
            Gets item at index.
            </summary>
        </member>
        <member name="P:MarkLight.ObservableList`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
        </member>
        <member name="P:MarkLight.ObservableList`1.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:MarkLight.ObservableList`1.SelectedIndex">
            <summary>
            Gets or sets the selected index.
            </summary>
        </member>
        <member name="T:MarkLight.OverflowMode">
            <summary>
            Enum indicating how items should overflow as they reach the boundaries.
            </summary>
        </member>
        <member name="F:MarkLight.OverflowMode.Overflow">
            <summary>
            Items can exceed the boundaries.
            </summary>
        </member>
        <member name="F:MarkLight.OverflowMode.Wrap">
            <summary>
            Items will wrap as they reach the boundaries.
            </summary>
        </member>
        <member name="T:MarkLight.PanelScrollbarVisibility">
            <summary>
            Panel scrollbar visibility mode.
            </summary>
        </member>
        <member name="F:MarkLight.PanelScrollbarVisibility.Permanent">
            <summary>
            Always show the scrollbar.
            </summary>
        </member>
        <member name="F:MarkLight.PanelScrollbarVisibility.Visible">
            <summary>
            Same as Permanent - shows the scrollbar
            </summary>
        </member>
        <member name="F:MarkLight.PanelScrollbarVisibility.AutoHide">
            <summary>
            Show the scrollbar if the content exceeds the bounds.
            </summary>
        </member>
        <member name="F:MarkLight.PanelScrollbarVisibility.AutoHideAndExpandViewport">
            <summary>
            Expands the viewport when the scrollbar is hidden to take up the space of the scrollbar.
            </summary>
        </member>
        <member name="F:MarkLight.PanelScrollbarVisibility.Hidden">
            <summary>
            Hide the scrollbar until visibility mode is manually changed.
            </summary>
        </member>
        <member name="F:MarkLight.PanelScrollbarVisibility.Remove">
            <summary>
            Removes the scrollbar from the hierarchy, used when the scrollbar isn't to be used at any point.
            </summary>
        </member>
        <member name="T:MarkLight.RaycastBlockMode">
            <summary>
            Type of raycast blocking should be used.
            </summary>
        </member>
        <member name="F:MarkLight.RaycastBlockMode.Default">
            <summary>
            Raycast is blocked if view is displayed and not transparent.
            </summary>
        </member>
        <member name="F:MarkLight.RaycastBlockMode.Always">
            <summary>
            Raycast is always blocked.
            </summary>
        </member>
        <member name="F:MarkLight.RaycastBlockMode.Never">
            <summary>
            Raycast is never blocked.
            </summary>
        </member>
        <member name="T:MarkLight.RemappedField">
            <summary>
            Maps a dependency field to another field.
            </summary>
        </member>
        <member name="M:MarkLight.RemappedField.#ctor(System.String,System.String,System.String,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:MarkLight.ReplacesComponentField">
            <summary>
            Attribute for replacing one component field with another.
            </summary>
        </member>
        <member name="M:MarkLight.ReplacesComponentField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:MarkLight.ReplacesDependencyField">
            <summary>
            Attribute for replacing one dependency field with another.
            </summary>
        </member>
        <member name="M:MarkLight.ReplacesDependencyField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:MarkLight.ReplacesViewModel">
            <summary>
            Attribute indicating that this view-model replaces another with the specified name.
            </summary>
        </member>
        <member name="M:MarkLight.ReplacesViewModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:MarkLight.Resource">
            <summary>
            A resource that is defined in a resource dictionary and can be bound to in XUML.
            </summary>
        </member>
        <member name="M:MarkLight.Resource.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Resource.IsEqual(MarkLight.Resource)">
            <summary>
            Compares two resources.
            </summary>
        </member>
        <member name="T:MarkLight.ResourceBindingSource">
            <summary>
            Resource binding source.
            </summary>
        </member>
        <member name="M:MarkLight.ResourceBindingSource.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ResourceBindingSource.GetValue(System.Boolean@)">
            <summary>
            Gets value from binding source.
            </summary>
        </member>
        <member name="P:MarkLight.ResourceBindingSource.BindingSourceString">
            <summary>
            Gets binding source string.
            </summary>
        </member>
        <member name="T:MarkLight.ResourceDictionary">
            <summary>
            A dictionary of values that can be bound to in XUML and changed programmatically.
            </summary>
        </member>
        <member name="M:MarkLight.ResourceDictionary.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ResourceDictionary.#cctor">
            <summary>
            Initializes a static instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ResourceDictionary.SetConfiguration(System.String,System.String)">
            <summary>
            Sets active dictionary configuration and notifies observers.
            </summary>
        </member>
        <member name="M:MarkLight.ResourceDictionary.NotifyObservers(System.Boolean)">
            <summary>
            Notifies resource binding observers.
            </summary>
        </member>
        <member name="M:MarkLight.ResourceDictionary.GetValue(System.String,System.String,System.Boolean@)">
            <summary>
            Gets svalue from resource dictionary.
            </summary>
        </member>
        <member name="M:MarkLight.ResourceDictionary.GetResourceMatchValue(MarkLight.Resource)">
            <summary>
            Gets value indicating how close the resource matches the current dictionary settings.
            </summary>
        </member>
        <member name="M:MarkLight.ResourceDictionary.SetResource(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets/adds a resource in the runtime resource dictionary.
            </summary>
        </member>
        <member name="M:MarkLight.ResourceDictionary.SetResource(System.String,MarkLight.Resource)">
            <summary>
            Sets/adds a resource in the runtime resource dictionary.
            </summary>
        </member>
        <member name="M:MarkLight.ResourceDictionary.RegisterResourceBindingObserver(System.String,System.String,MarkLight.BindingValueObserver)">
            <summary>
            Registers a resource binding observer. 
            </summary>
        </member>
        <member name="M:MarkLight.ResourceDictionary.AddResources(System.Collections.Generic.List{MarkLight.Resource})">
            <summary>
            Adds resource to the compile-time dictionary. Called when resources are loaded from XUML.
            </summary>
        </member>
        <member name="M:MarkLight.ResourceDictionary.Initialize">
            <summary>
            Called once at startup and initializes the runtime dictionary.
            </summary>
        </member>
        <member name="M:MarkLight.ResourceDictionary.GetFullResourceKey(System.String,System.String)">
            <summary>
            Gets full resource key from dictionary name and resource key.
            </summary>
        </member>
        <member name="P:MarkLight.ResourceDictionary.XumlElement">
            <summary>
            Gets or sets XUML element.
            </summary>
        </member>
        <member name="T:MarkLight.SerializableDictionary`2">
            <summary>
            Serializable dictionary. 
            </summary>
        </member>
        <member name="M:MarkLight.SerializableDictionary`2.Get(`0)">
            <summary>
            Gets value from dictionary and returns null if it doesn't exist.
            </summary>
        </member>
        <member name="M:MarkLight.AssetDictionary.Clear">
            <summary>
            Clears the dictionary.
            </summary>
        </member>
        <member name="M:MarkLight.AssetDictionary.Add(MarkLight.UnityAsset)">
            <summary>
            Adds unity asset to the dictionary.
            </summary>
            <param name="asset"></param>
        </member>
        <member name="M:MarkLight.AssetDictionary.Get(UnityEngine.Object)">
            <summary>
            Gets value from dictionary and returns null if it doesn't exist.
            </summary>
        </member>
        <member name="T:MarkLight.SpriteAsset">
            <summary>
            Contains information about a unity sprite asset.
            </summary>
        </member>
        <member name="M:MarkLight.SpriteAsset.#ctor(MarkLight.UnityAsset)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="P:MarkLight.SpriteAsset.Sprite">
            <summary>
            Gets unity asset sprite.
            </summary>
        </member>
        <member name="P:MarkLight.SpriteAsset.Path">
            <summary>
            Gets unity asset path.
            </summary>
        </member>
        <member name="T:MarkLight.SpriteBundle">
            <summary>
            Holds a list of sprites.
            </summary>
            <d>Base class for all view models in the framework. All view models must be a subclass of this class to be processed and managed the framework. </d>
        </member>
        <member name="T:MarkLight.States">
            <summary>
            Defines the states the view is designed to have.
            </summary>
        </member>
        <member name="M:MarkLight.States.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:MarkLight.TextToken">
            <summary>
            Contains information about a formatting token found in text.
            </summary>
        </member>
        <member name="T:MarkLight.TextTokenType">
            <summary>
            Text token type.
            </summary>
        </member>
        <member name="F:MarkLight.TextTokenType.Unknown">
            <summary>
            Unknown text token.
            </summary>
        </member>
        <member name="F:MarkLight.TextTokenType.EmbeddedView">
            <summary>
            Embedded view token.
            </summary>
        </member>
        <member name="F:MarkLight.TextTokenType.BoldStart">
            <summary>
            Bold start token.
            </summary>
        </member>
        <member name="F:MarkLight.TextTokenType.BoldEnd">
            <summary>
            Bold end token.
            </summary>
        </member>
        <member name="F:MarkLight.TextTokenType.ItalicStart">
            <summary>
            Italic start token.
            </summary>
        </member>
        <member name="F:MarkLight.TextTokenType.ItalicEnd">
            <summary>
            Italic end token.
            </summary>
        </member>
        <member name="F:MarkLight.TextTokenType.SizeStart">
            <summary>
            Text size start token.
            </summary>
        </member>
        <member name="F:MarkLight.TextTokenType.SizeEnd">
            <summary>
            Text size end token.
            </summary>
        </member>
        <member name="F:MarkLight.TextTokenType.ColorStart">
            <summary>
            Text color start token.
            </summary>
        </member>
        <member name="F:MarkLight.TextTokenType.ColorEnd">
            <summary>
            Text color end token.
            </summary>
        </member>
        <member name="T:MarkLight.ThemeData">
            <summary>
            Contains data about a theme.
            </summary>
        </member>
        <member name="M:MarkLight.ThemeData.#ctor">
            <summary>
            Initializes a new instance of the class
            </summary>
        </member>
        <member name="M:MarkLight.ThemeData.GetThemeElementData(System.String,System.String,System.String)">
            <summary>
            Gets theme element data for the specified view type, id and style.
            </summary>
        </member>
        <member name="M:MarkLight.ThemeData.GetBasedOnThemeElementData(System.String,System.String)">
            <summary>
            Gets theme element data a style is based on.
            </summary>
        </member>
        <member name="P:MarkLight.ThemeData.XumlElement">
            <summary>
            Gets or sets XUML element.
            </summary>
        </member>
        <member name="T:MarkLight.ThemeElementData">
            <summary>
            Contains data about a theme element.
            </summary>
        </member>
        <member name="M:MarkLight.ThemeElementData.#ctor">
            <summary>
            Initializes a new instance of the class
            </summary>
        </member>
        <member name="P:MarkLight.ThemeElementData.XumlElement">
            <summary>
            Gets or sets XUML element.
            </summary>
        </member>
        <member name="T:MarkLight.TraversalAlgorithm">
            <summary>
            Enum indicating what traversal algorithm to use.
            </summary>
        </member>
        <member name="F:MarkLight.TraversalAlgorithm.Default">
            <summary>
            Default traversal algorithm (depth first).
            </summary>
        </member>
        <member name="F:MarkLight.TraversalAlgorithm.DepthFirst">
            <summary>
            Depth first traversal algorithm.
            </summary>
        </member>
        <member name="F:MarkLight.TraversalAlgorithm.BreadthFirst">
            <summary>
            Breadth first traversal algorithm.
            </summary>
        </member>
        <member name="F:MarkLight.TraversalAlgorithm.ReverseDepthFirst">
            <summary>
            Reverse depth first traversal algorithm.
            </summary>
        </member>
        <member name="F:MarkLight.TraversalAlgorithm.ReverseBreadthFirst">
            <summary>
            Reverse breadth first traversal algorithm.
            </summary>
        </member>
        <member name="T:MarkLight.TypeHelper">
            <summary>
            Helper methods for finding and instantiating objects through reflection.
            </summary>
        </member>
        <member name="M:MarkLight.TypeHelper.#cctor">
            <summary>
            Initializes a static instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.TypeHelper.FindDerivedTypes(System.Type)">
            <summary>
            Gets all types derived from specified base type.
            </summary>
        </member>
        <member name="M:MarkLight.TypeHelper.GetLoadableTypes(System.Reflection.Assembly)">
            <summary>
            Extension method for getting loadable types from an assembly.
            </summary>
        </member>
        <member name="M:MarkLight.TypeHelper.CreateInstance(System.Type)">
            <summary>
            Instiantiates a type.
            </summary>
        </member>
        <member name="M:MarkLight.TypeHelper.PrintDependencyFields">
            <summary>
            Helper method for generating dependency field activators.
            </summary>
        </member>
        <member name="M:MarkLight.TypeHelper.CreateViewField(System.Type)">
            <summary>
            Creates a dependency field from type.
            </summary>
        </member>
        <member name="T:MarkLight.UnityAsset">
            <summary>
            Contains information about a unity asset.
            </summary>
        </member>
        <member name="M:MarkLight.UnityAsset.#ctor(System.String,UnityEngine.Object)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.UnityAsset.AddObserver(MarkLight.View)">
            <summary>
            Adds view to be notified when load/unloading occurs.
            </summary>
        </member>
        <member name="M:MarkLight.UnityAsset.NotifyObservers">
            <summary>
            Notifies observers that a asset has been loaded/unloaded.
            </summary>
        </member>
        <member name="M:MarkLight.UnityAsset.ToString">
            <summary>
            Converts element size to string.
            </summary>
        </member>
        <member name="M:MarkLight.UnityAsset.Unload">
            <summary>
            Unload sprite.
            </summary>
        </member>
        <member name="M:MarkLight.UnityAsset.Load(UnityEngine.Object)">
            <summary>
            Attempt to load asset.
            </summary>
        </member>
        <member name="P:MarkLight.UnityAsset.IsLoaded">
            <summary>
            Gets boolean indicating if the asset is loaded.
            </summary>
        </member>
        <member name="P:MarkLight.UnityAsset.Sprite">
            <summary>
            Gets asset converted to sprite.
            </summary>
        </member>
        <member name="T:MarkLight.Utils">
            <summary>
            Static class containing useful methods.
            </summary>
        </member>
        <member name="M:MarkLight.Utils.#cctor">
            <summary>
            Initializes a static instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Utils.GetRandomColor">
            <summary>
            Returns a random (named) color.
            </summary>
        </member>
        <member name="M:MarkLight.Utils.GetError(System.Exception)">
            <summary>
            Extracts information from an exception and returns a readable error message.
            </summary>
        </member>
        <member name="M:MarkLight.Utils.Log(System.String)">
            <summary>
            Logs error. 
            </summary>
        </member>
        <member name="M:MarkLight.Utils.Log(System.String,System.Object[])">
            <summary>
            Logs error with format string.
            </summary>
        </member>
        <member name="M:MarkLight.Utils.LogError(System.String)">
            <summary>
            Logs error. 
            </summary>
        </member>
        <member name="M:MarkLight.Utils.LogError(System.String,System.Object[])">
            <summary>
            Logs error with format string.
            </summary>
        </member>
        <member name="M:MarkLight.Utils.LogWarning(System.String)">
            <summary>
            Logs warning. 
            </summary>
        </member>
        <member name="M:MarkLight.Utils.LogWarning(System.String,System.Object[])">
            <summary>
            Logs warning with format string.
            </summary>
        </member>
        <member name="M:MarkLight.Utils.StartTimer">
            <summary>
            Starts a stopwatch timer. Used for logging performance.
            </summary>
        </member>
        <member name="M:MarkLight.Utils.LogTimer">
            <summary>
            Logs time elapsed on the timer. Used for logging performance. 
            </summary>
        </member>
        <member name="M:MarkLight.Utils.IsOdd(System.Int32)">
            <summary>
            Gets bool inidcating if the number is odd.
            </summary>
        </member>
        <member name="M:MarkLight.Utils.IsEven(System.Int32)">
            <summary>
            Gets bool inidcating if the number is even.
            </summary>
        </member>
        <member name="P:MarkLight.Utils.SuppressLogging">
            <summary>
            Gets or sets boolean indicating if logging should be suppressed.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverter">
            <summary>
            Value converter for view fields.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverter.Convert(System.Object)">
            <summary>
            Converts value to view field value.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverter.Convert(System.Object,MarkLight.ValueConverterContext)">
            <summary>
            Converts XUML attribute to a view value.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverter.ConversionFailed(System.Object,System.String)">
            <summary>
            Gets conversion failed result with formatted error message.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverter.ConversionFailed(System.Object,System.Exception)">
            <summary>
            Gets conversion failed result with formatted error message.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverter.ConversionFailed(System.Object)">
            <summary>
            Gets conversion failed result with formatted error message.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverter.StringConversionFailed(System.Object)">
            <summary>
            Gets conversion failed result of improperly formatted string.
            </summary>
        </member>
        <member name="P:MarkLight.ValueConverter.Type">
            <summary>
            Gets type of values converted.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverterContext">
            <summary>
            Contains information about the context in which a value conversion occurs.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverterContext.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverterContext.#ctor(MarkLight.ValueConverterContext)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="P:MarkLight.ValueConverterContext.Default">
            <summary>
            Gets default value converter context.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.AssetValueConverter">
            <summary>
            Value converter for Font type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.AssetValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.AssetValueConverter.Convert(System.Object,MarkLight.ValueConverterContext)">
            <summary>
            Value converter for Font type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.AssetValueConverter.ConvertCustomType(System.Object,System.Type,MarkLight.ValueConverterContext)">
            <summary>
            Used to extend the asset value converter with custom types.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.AssetValueConverter.ConvertAssetPath(System.String,System.Boolean,System.Boolean@)">
            <summary>
            Converts asset path and sets bool indicating if asset not found errors should be suppressed.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.AssetValueConverter.ConvertAssetResult(MarkLight.UnityAsset)">
            <summary>
            Converts loaded asset to desired type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.AssetValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.BoolValueConverter">
            <summary>
            Value converter for bool type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.BoolValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.BoolValueConverter.Convert(System.Object,MarkLight.ValueConverterContext)">
            <summary>
            Value converter for bool type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.BoolValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.Color32ValueConverter">
            <summary>
            Value converter for Color type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.Color32ValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.Color32ValueConverter.Convert(System.Object,MarkLight.ValueConverterContext)">
            <summary>
            Value converter for Color32 type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.Color32ValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.ColorValueConverter">
            <summary>
            Value converter for Color type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.ColorValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.ColorValueConverter.#cctor">
            <summary>
            Initializes a static instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.ColorValueConverter.Convert(System.Object,MarkLight.ValueConverterContext)">
            <summary>
            Value converter for Vector2 type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.ColorValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.ColorValueConverter.HexToColor(System.String)">
            <summary>
            Gets color from hex value.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.ColorValueConverter.RGBAToColor(System.String)">
            <summary>
            Gets color from float RGBA values (0-1)
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.ComponentValueConverter">
            <summary>
            Value converter for component types.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.ComponentValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.ComponentValueConverter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.ComponentValueConverter.Convert(System.Object,MarkLight.ValueConverterContext)">
            <summary>
            Value converter for String type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.ComponentValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.DurationValueConverter">
            <summary>
            Value converter for duration.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.DurationValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.DurationValueConverter.Convert(System.Object,MarkLight.ValueConverterContext)">
            <summary>
            Value converter for duration type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.DurationValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.ElementSizeValueConverter">
            <summary>
            Value converter for ElementSize type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.ElementSizeValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.ElementSizeValueConverter.Convert(System.Object,MarkLight.ValueConverterContext)">
            <summary>
            Value converter for ElementSize type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.ElementSizeValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.EnumValueConverter">
            <summary>
            Value converter for enum types.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.EnumValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.EnumValueConverter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.EnumValueConverter.Convert(System.Object,MarkLight.ValueConverterContext)">
            <summary>
            Value converter for String type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.EnumValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.FloatValueConverter">
            <summary>
            Value converter for float type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.FloatValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.FloatValueConverter.Convert(System.Object,MarkLight.ValueConverterContext)">
            <summary>
            Value converter for float type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.FloatValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.FontValueConverter">
            <summary>
            Value converter for Font type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.FontValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.IntValueConverter">
            <summary>
            Value converter for int type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.IntValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.IntValueConverter.Convert(System.Object,MarkLight.ValueConverterContext)">
            <summary>
            Value converter for int type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.IntValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.MarginValueConverter">
            <summary>
            Value converter for int type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.MarginValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.MarginValueConverter.Convert(System.Object,MarkLight.ValueConverterContext)">
            <summary>
            Value converter for Margin type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.MarginValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.MaterialValueConverter">
            <summary>
            Value converter for Material type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.MaterialValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.QuaternionValueConverter">
            <summary>
            Value converter for Quaternion type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.QuaternionValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.QuaternionValueConverter.Convert(System.Object,MarkLight.ValueConverterContext)">
            <summary>
            Value converter for Vector3 type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.QuaternionValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.SpriteAssetValueConverter">
            <summary>
            Value converter for Sprite type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.SpriteAssetValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.SpriteAssetValueConverter.ConvertAssetResult(MarkLight.UnityAsset)">
            <summary>
            Converts loaded asset to desired type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.SpriteAssetValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.SpriteValueConverter">
            <summary>
            Value converter for Sprite type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.SpriteValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.SpriteValueConverter.ConvertCustomType(System.Object,System.Type,MarkLight.ValueConverterContext)">
            <summary>
            Used to extend the asset value converter with custom types.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.StringValueConverter">
            <summary>
            Value converter for String type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.StringValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.StringValueConverter.Convert(System.Object,MarkLight.ValueConverterContext)">
            <summary>
            Value converter for String type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.StringValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.Vector2ValueConverter">
            <summary>
            Value converter for Vector2 type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.Vector2ValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.Vector2ValueConverter.Convert(System.Object,MarkLight.ValueConverterContext)">
            <summary>
            Value converter for Vector2 type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.Vector2ValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.Vector3ValueConverter">
            <summary>
            Value converter for Vector3 type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.Vector3ValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.Vector3ValueConverter.Convert(System.Object,MarkLight.ValueConverterContext)">
            <summary>
            Value converter for Vector3 type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.Vector3ValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="T:MarkLight.ValueConverters.Vector4ValueConverter">
            <summary>
            Value converter for Vector4 type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.Vector4ValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.Vector4ValueConverter.Convert(System.Object,MarkLight.ValueConverterContext)">
            <summary>
            Value converter for Vector4 type.
            </summary>
        </member>
        <member name="M:MarkLight.ValueConverters.Vector4ValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="T:MarkLight.ValueObserver">
            <summary>
            Value observer.
            </summary>
        </member>
        <member name="M:MarkLight.ValueObserver.#cctor">
            <summary>
            Initializes static instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ValueObserver.Notify(System.Collections.Generic.HashSet{MarkLight.ViewFieldData})">
            <summary>
            Notifies the value observer.
            </summary>
        </member>
        <member name="T:MarkLight.View">
            <summary>
            Base class for view models.
            </summary>
            <d>Base class for all view models in the framework. All view models must be a subclass of this class to be processed and managed the framework. </d>
        </member>
        <member name="F:MarkLight.View.Id">
            <summary>
            The ID of the view. 
            </summary>
            <d>Specifies a unique ID for the view. Used to map the view to reference fields on the parent view model. Provides a way to reference the view in data bindings. Is used as selectors in styles.</d>
        </member>
        <member name="F:MarkLight.View.Style">
            <summary>
            The style of the view.
            </summary>
            <d>Used as selector by the styles. Specifies the name of the style that is to be applied to the view and any children that explicitly inherits its style. The style is applied when the view is created (usually in the editor as the XUML is processed).</d>
        </member>
        <member name="F:MarkLight.View.BasedOn">
            <summary>
            Based on style.
            </summary>
            <d>Used in style definition to specify which style it's based on.</d>
        </member>
        <member name="F:MarkLight.View.Theme">
            <summary>
            The theme of the view.
            </summary>
            <d>Specifies the name of the theme that is applied to the view and its children. The theme determines which set of styles are to be considered when applying matching styles to the view.</d>
        </member>
        <member name="F:MarkLight.View.BaseDirectory">
            <summary>
            Base directory.
            </summary>
            <d>Specifies the base directory to be used by the view and its children. The base directory is used when loading resources such as sprites, fonts, etc.</d>
        </member>
        <member name="F:MarkLight.View.UnitSize">
            <summary>
            Unit size.
            </summary>
            <d>Specifies the user-defined unit size to be used by the view and its children. Used when element size is specified in user-defined units to convert it into pixels.</d>
        </member>
        <member name="F:MarkLight.View.LayoutParent">
            <summary>
            Layout parent view.
            </summary>
            <d>The layout parent view is the direct ascendant of the current view in the scene object hierarchy.</d>
        </member>
        <member name="F:MarkLight.View.Parent">
            <summary>
            Parent view.
            </summary>
            <d>The parent of the view is the logical parent to which this view belongs. In the XUML any view you can see has the current view as its logical parent.</d>
        </member>
        <member name="F:MarkLight.View.Content">
            <summary>
            Content view.        
            </summary>
            <d>View that is the parent to the content of this view. Usually it is the current view itself but when a ContentPlaceholder is used the Content points to the view that contains the ContentPlaceholder.</d>
        </member>
        <member name="F:MarkLight.View.State">
            <summary>
            View state.
            </summary>
            <d>View state name. Determines state values to be applied to the view. All views start out in the "Default" state and when the state changes the values associated with that state are applied to the view.</d>
        </member>
        <member name="F:MarkLight.View.IsActive">
            <summary>
            Indicates if the view is enabled.
            </summary>
            <d>Activates/deactivates the view. If set to false in this or in any parent view, all components are disabled, attached renderers are turned off, etc. Any components attached will no longer have Update() called.</d>
        </member>
        <member name="F:MarkLight.View.HideFlags">
            <summary>
            Hide flags for the game object.
            </summary>
            <d>Bit mask that controls object destruction, saving and visibility in editor.</d>
        </member>
        <member name="F:MarkLight.View.GameObject">
            <summary>
            GameObject the view is attached to.
            </summary>
            <d>GameObject that the view is attached to.</d>
        </member>
        <member name="F:MarkLight.View.Transform">
            <summary>
            Position, rotation and scale of the view.
            </summary>
            <d>The view transform is used to manipulate the position, rotation and scale of the view in relation to the layout parent view's transform or in world space. The transform is sometimes manipulated indirectly through other view fields and through the view model's internal layout logic.</d>
        </member>
        <member name="F:MarkLight.View.Position">
            <summary>
            Position of the view.
            </summary>
            <d>The local position of the view in relation to the layout parent view transform.</d>
        </member>
        <member name="F:MarkLight.View.Rotation">
            <summary>
            Rotation of the view.
            </summary>
            <d>The local rotation of the view in relation to the layout parent view transform. Stored as a Quaternion but specified in XUML as euler angles.</d>
        </member>
        <member name="F:MarkLight.View.Scale">
            <summary>
            Scale of the view.
            </summary>
            <d>The scale of the view in relation to the layout parent view transform.</d>
        </member>
        <member name="F:MarkLight.View.Cancel">
            <summary>
            Cancel view action.
            </summary>
            <d>Triggered by the EventSystem when a cancel event occurs.</d>
        </member>
        <member name="F:MarkLight.View.Deselect">
            <summary>
            Deselect view action.
            </summary>
            <d>Triggered by the EventSystem when another view is selected.</d>
        </member>
        <member name="F:MarkLight.View.Drop">
            <summary>
            Drop view action.
            </summary>
            <d>Triggered by the EventSystem when the view accepts a drop.</d>
        </member>
        <member name="F:MarkLight.View.Move">
            <summary>
            Move view action.
            </summary>
            <d>Triggered by the EventSystem when a move event occurs.</d>
        </member>
        <member name="F:MarkLight.View.Click">
            <summary>
            Click view action.
            </summary>
            <d>Triggered by the EventSystem when the user clicks/touches on the view.</d>
        </member>
        <member name="F:MarkLight.View.BeginDrag">
            <summary>
            Drag view action.
            </summary>
            <d>Triggered by the EventSystem when the user presses mouse on and starts to drag over the view.</d>
        </member>
        <member name="F:MarkLight.View.EndDrag">
            <summary>
            End drag view action.
            </summary>
            <d>Triggered by the EventSystem when the user stops dragging mouse over the view.</d>
        </member>
        <member name="F:MarkLight.View.Drag">
            <summary>
            Drag view action.
            </summary>
            <d>Triggered by the EventSystem as the user drags the mouse over the view.</d>
        </member>
        <member name="F:MarkLight.View.InitializePotentialDrag">
            <summary>
            Initialize potential drag view action.
            </summary>
            <d>Triggered by the EventSystem as the user initiates a potential drag over the view.</d>
        </member>
        <member name="F:MarkLight.View.MouseDown">
            <summary>
            Mouse down view action.
            </summary>
            <d>Triggered by the EventSystem when the mouse/touch presses down over the view.</d>
        </member>
        <member name="F:MarkLight.View.MouseEnter">
            <summary>
            Mouse enter view action.
            </summary>
            <d>Triggered by the EventSystem when the mouse enters the view.</d>
        </member>
        <member name="F:MarkLight.View.MouseExit">
            <summary>
            Mouse exit view action.
            </summary>
            <d>Triggered by the EventSystem when the mouse exits the view.</d>
        </member>
        <member name="F:MarkLight.View.MouseUp">
            <summary>
            Mouse up view action.
            </summary>
            <d>Triggered by the EventSystem when the mouse/thouch releases over the view.</d>
        </member>
        <member name="F:MarkLight.View.Scroll">
            <summary>
            Scroll view action.
            </summary>
            <d>Triggered by the EventSystem when the user scrolls when the view is selected.</d>
        </member>
        <member name="F:MarkLight.View.Select">
            <summary>
            Select view action.
            </summary>
            <d>Triggered by the EventSystem when the view is selected.</d>
        </member>
        <member name="F:MarkLight.View.Submit">
            <summary>
            Submit view action.
            </summary>
            <d>Triggered by the EventSystem when the user submits while view is selected.</d>
        </member>
        <member name="F:MarkLight.View.UpdateSelected">
            <summary>
            Update selected view action.
            </summary>
            <d>Triggered by the EventSystem when the object associated with this EventTrigger is updated.</d>
        </member>
        <member name="F:MarkLight.View.Item">
            <summary>
            Item data.
            </summary>
            <d>Provides a mechanism to bind to dynamic list data. The item is set, e.g. by the List view on the child views it generates for its dynamic list data. The Item points to the list item data the view is associated with.</d>
        </member>
        <member name="F:MarkLight.View.IsTemplate">
            <summary>
            Indicates if this view is to be used as a template.
            </summary>
            <d>A template view is used to create dynamic instances of the view. Used by certain views such as the List and TabPanel.</d>
        </member>
        <member name="F:MarkLight.View.Activated">
            <summary>
            Activated view action.
            </summary>
            <d>Triggered every time the view is activated. Also triggered once the view is intialized if it starts out activated.</d>
        </member>
        <member name="F:MarkLight.View.Deactivated">
            <summary>
            Deactivated view action.
            </summary>
            <d>Triggered every time the view is deactivated. Also triggered once the view is intialized if it starts out deactivated.</d>
        </member>
        <member name="F:MarkLight.View.IsDestroyed">
            <summary>
            Indicates if the view has been destroyed by GameObject.Destroy().
            </summary>
        </member>
        <member name="F:MarkLight.View.IsDynamic">
            <summary>
            Indicates if the view has been created dynamically. 
            </summary>
        </member>
        <member name="F:MarkLight.View.PropagateChildLayoutChanges">
            <summary>
            Indicates if the view propagates child layout changes.
            </summary>
            <d>Boolean indicating if view propagates child layout changes. Generally set to true whenever a view adjusts its size to child layout changes.</d>
        </member>
        <member name="F:MarkLight.View.ViewTypeName">
            <summary>
            The name of the view's type.
            </summary>
        </member>
        <member name="F:MarkLight.View.ViewXumlName">
            <summary>
            Name of the view as specified in the XUML.
            </summary>
        </member>
        <member name="M:MarkLight.View.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.View.SetValue(System.String,System.Object)">
            <summary>
            Sets view value.
            </summary>
        </member>
        <member name="M:MarkLight.View.SetValue(System.String,System.Object,System.Boolean,System.Collections.Generic.HashSet{MarkLight.ViewFieldData},MarkLight.ValueConverterContext,System.Boolean)">
            <summary>
            Sets view field value. 
            </summary>
            <param name="viewField">View field path.</param>
            <param name="value">Value to be set.</param>
            <param name="updateDefaultState">Boolean indicating if the default state should be updated (if the view is in the default state).</param>
            <param name="callstack">Callstack used to prevent cyclical SetValue calls.</param>
            <param name="context">Value converter context.</param>
            <returns>Returns the converted value set.</returns>
        </member>
        <member name="M:MarkLight.View.SetValue``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Object,System.Boolean,MarkLight.ValueConverterContext,System.Boolean)">
            <summary>
            Sets the value of a field utilizing the binding and change tracking system.
            </summary>
        </member>
        <member name="M:MarkLight.View.SetValue``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Object)">
            <summary>
            Sets the value of a field utilizing the binding and change tracking system.
            </summary>
        </member>
        <member name="M:MarkLight.View.SetIsSet(System.String)">
            <summary>
            Sets view field is-set indicator. 
            </summary>
        </member>
        <member name="M:MarkLight.View.SetBinding(System.String,System.String)">
            <summary>
            Sets view field binding.
            </summary>
        </member>
        <member name="M:MarkLight.View.SetResourceBinding(MarkLight.BindingValueObserver,System.String)">
            <summary>
            Sets resource binding.
            </summary>
        </member>
        <member name="M:MarkLight.View.ParseBindingString(System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Parses binding string and returns view field path.
            </summary>
        </member>
        <member name="M:MarkLight.View.SetViewActionEntry(MarkLight.ViewActionEntry)">
            <summary>
            Sets view action entry.
            </summary>
        </member>
        <member name="M:MarkLight.View.SetStateValue(MarkLight.ViewFieldStateValue)">
            <summary>
            Sets state value.
            </summary>
        </member>
        <member name="M:MarkLight.View.SetViewFieldSetValue(System.String)">
            <summary>
            Sets field set-value to true.
            </summary>
        </member>
        <member name="M:MarkLight.View.SetChangeHandler(MarkLight.ViewFieldChangeHandler)">
            <summary>
            Sets view field change handler.
            </summary>
        </member>
        <member name="M:MarkLight.View.GetMappedViewField``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets mapped view field from expression.
            </summary>
        </member>
        <member name="M:MarkLight.View.GetValue``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets value from view field.
            </summary>
        </member>
        <member name="M:MarkLight.View.GetValue(System.String)">
            <summary>
            Gets value from view field.
            </summary>
        </member>
        <member name="M:MarkLight.View.GetValue(System.String,System.Boolean@)">
            <summary>
            Gets value from view field.
            </summary>
        </member>
        <member name="M:MarkLight.View.IsSet``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets boolean indicating if value has been set on view field.
            </summary>
        </member>
        <member name="M:MarkLight.View.IsSet(System.String)">
            <summary>
            Gets boolean indicating if value has been set on view field.
            </summary>
        </member>
        <member name="M:MarkLight.View.InitializeInternalDefaultValues">
            <summary>
            Initializes internal values to default values. Called once before InitializeInternal(). Called in depth-first order.
            </summary>
        </member>
        <member name="M:MarkLight.View.InitializeInternal">
            <summary>
            Initializes the view internally. Called once before Initialize(). Called in depth-first order.
            </summary>
        </member>
        <member name="M:MarkLight.View.InitEventSystemTriggers">
            <summary>
            Initializes unity event triggers.
            </summary>
        </member>
        <member name="M:MarkLight.View.Initialize">
            <summary>
            Called once to initialize the view. Called in reverse breadth-first order.
            </summary>
        </member>
        <member name="M:MarkLight.View.GetViewFieldData(System.String,System.Int32)">
            <summary>
            Gets view field data.
            </summary>
        </member>
        <member name="M:MarkLight.View.LateUpdate">
            <summary>
            Called once at the end of a frame. Triggers queued change handlers.
            </summary>
        </member>
        <member name="M:MarkLight.View.TriggerChangeHandlers">
            <summary>
            Triggers queued change handlers.
            </summary>
        </member>
        <member name="M:MarkLight.View.PropagateBindings">
            <summary>
            Called once to propagate bound values. Called in breadth-first order.
            </summary>
        </member>
        <member name="M:MarkLight.View.QueueAllChangeHandlers">
            <summary>
            Called once to queue all change handlers. Called in reverse breadth-first order.
            </summary>
        </member>
        <member name="M:MarkLight.View.AddValueObserver(MarkLight.ValueObserver)">
            <summary>
            Adds a value observer to the view.
            </summary>
        </member>
        <member name="M:MarkLight.View.AddBinding(System.String,System.String)">
            <summary>
            Adds a binding to the view field that will be processed when the view is initialized.
            </summary>
        </member>
        <member name="M:MarkLight.View.AddStateValue(System.String,System.String,System.String,MarkLight.ValueConverterContext,System.Boolean)">
            <summary>
            Adds field field state value.
            </summary>
        </member>
        <member name="M:MarkLight.View.AddViewActionEntry(System.String,System.String,MarkLight.View)">
            <summary>
            Adds a view action handler for a certain view action.
            </summary>
        </member>
        <member name="M:MarkLight.View.AddStateAnimation(MarkLight.Views.StateAnimation)">
            <summary>
            Adds a state animation to the view.
            </summary>
        </member>
        <member name="M:MarkLight.View.GetStateAnimation(System.String,System.String)">
            <summary>
            Gets state animation.
            </summary>
        </member>
        <member name="M:MarkLight.View.QueueChangeHandler(System.String)">
            <summary>
            Queues change handler to be called at the end of the frame.
            </summary>
        </member>
        <member name="M:MarkLight.View.SetDefaultValues">
            <summary>
            Called after the view is initialized but before any XUML values are set. Used to set default values on the view.
            </summary>
        </member>
        <member name="M:MarkLight.View.LayoutsChanged">
            <summary>
            Called when a field affecting the layout of the view has changed and that change is to be propagated to parents.
            </summary>
        </member>
        <member name="M:MarkLight.View.NotifyLayoutChanged">
            <summary>
            Notifies the parents that the layout of this view has changed.
            </summary>
        </member>
        <member name="M:MarkLight.View.ChildLayoutChanged">
            <summary>
            Called when a child layout has been changed.
            </summary>
        </member>
        <member name="M:MarkLight.View.ChildrenChanged">
            <summary>
            Called when a child view has been added or removed.
            </summary>
        </member>
        <member name="M:MarkLight.View.LayoutChanged">
            <summary>
            Called when a field affecting the layout of the view has changed.
            </summary>
        </member>
        <member name="M:MarkLight.View.BehaviorChanged">
            <summary>
            Called when a field affecting the behavior and visual appearance of the view has changed.
            </summary>
        </member>
        <member name="M:MarkLight.View.IdChanged">
            <summary>
            Called when the Id of the view changes.
            </summary>
        </member>
        <member name="M:MarkLight.View.IsActiveChanged">
            <summary>
            Called when IsActive field has been changed.
            </summary>
        </member>
        <member name="M:MarkLight.View.StateChanged">
            <summary>
            Called when view state has been changed.
            </summary>
        </member>
        <member name="M:MarkLight.View.Activate">
            <summary>
            Activates the view.
            </summary>
        </member>
        <member name="M:MarkLight.View.Activate(System.Object)">
            <summary>
            Activates the view and sends data to it.
            </summary>
        </member>
        <member name="M:MarkLight.View.Deactivate">
            <summary>
            Deactivates the view.
            </summary>
        </member>
        <member name="M:MarkLight.View.SetState(System.String)">
            <summary>
            Changes the state of the view.
            </summary>
        </member>
        <member name="M:MarkLight.View.CreateView``1(System.Int32,MarkLight.ValueConverterContext,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Creates a child view of specified type.
            </summary>
        </member>
        <member name="M:MarkLight.View.CreateView``1(``0,MarkLight.View,System.Int32,MarkLight.ViewPool)">
            <summary>
            Creates a view from a template and adds it to a parent at specified index.
            </summary>
        </member>
        <member name="M:MarkLight.View.CreateView``1(``0,System.Int32,MarkLight.ViewPool)">
            <summary>
            Creates a child view from a template.
            </summary>
        </member>
        <member name="M:MarkLight.View.GetViewPool(System.String,MarkLight.View,System.Int32,System.Int32)">
            <summary>
            Creates a pool of ready to be used views that can be drawn from when a new view is needed rather than creating them on-demand. Used to improve performance.
            </summary>
        </member>
        <member name="M:MarkLight.View.NotifyDependentValueObservers(System.String,System.Boolean)">
            <summary>
            Notifies all value observers that are dependent on the specified field. E.g. when field "Name" changes, value observers on "Name.FirstName"
            and "Name.LastName" are notified in this method. 
            </summary>
        </member>
        <member name="M:MarkLight.View.MoveTo(MarkLight.View,System.Int32,System.Boolean)">
            <summary>
            Moves the view to another view.
            </summary>
        </member>
        <member name="M:MarkLight.View.InitializeViews">
            <summary>
            Initializes this view and all children. Used if the view is created dynamically and need to be called once to properly initialize the view.
            </summary>
        </member>
        <member name="M:MarkLight.View.AddIsSetField(System.String)">
            <summary>
            Adds view field path to list of set view fields.
            </summary>
        </member>
        <member name="M:MarkLight.View.GetIsSetFieldValue(System.String)">
            <summary>
            Gets bool indicating if set field is in list of set fields.
            </summary>
        </member>
        <member name="M:MarkLight.View.TryInitializeInternalDefaultValues">
            <summary>
            Calls InitializeInternalDefaultValues() and catches and prints any exception thrown.
            </summary>
        </member>
        <member name="M:MarkLight.View.TryInitializeInternal">
            <summary>
            Calls InitializeInternalDefaultValues() and catches and prints any exception thrown if define is set.
            </summary>
        </member>
        <member name="M:MarkLight.View.TryInitialize">
            <summary>
            Calls Initialize() and catches and prints any exception thrown.
            </summary>
        </member>
        <member name="M:MarkLight.View.TryPropagateBindings">
            <summary>
            Calls PropagateBindings() and catches and prints any exception thrown.
            </summary>
        </member>
        <member name="M:MarkLight.View.TryQueueAllChangeHandlers">
            <summary>
            Calls QueueAllChangeHandlers() and catches and prints any exception thrown.
            </summary>
        </member>
        <member name="M:MarkLight.View.TryTriggerChangeHandlers">
            <summary>
            Calls TriggerChangeHandlers() and catches and prints any exception thrown.
            </summary>
        </member>
        <member name="M:MarkLight.View.Format(System.String,System.Object)">
            <summary>
            Returns string based on format string and parameters.
            </summary>
        </member>
        <member name="M:MarkLight.View.Format1(System.String,System.Object)">
            <summary>
            Returns string based on format string and parameters.
            </summary>
        </member>
        <member name="M:MarkLight.View.Format2(System.String,System.Object,System.Object)">
            <summary>
            Returns string based on format string and parameters.
            </summary>
        </member>
        <member name="M:MarkLight.View.Format3(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Returns string based on format string and parameters.
            </summary>
        </member>
        <member name="M:MarkLight.View.GetEnumerator">
            <summary>
            Gets child view enumerator.
            </summary>
        </member>
        <member name="M:MarkLight.View.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets child view enumerator.
            </summary>
        </member>
        <member name="M:MarkLight.View.DestroyAndMoveContent(MarkLight.View)">
            <summary>
            Destroys the view and moves its content to a new parent.
            </summary>
        </member>
        <member name="M:MarkLight.View.MoveContent(MarkLight.View)">
            <summary>
            Moves the view's content to a new parent.
            </summary>
        </member>
        <member name="M:MarkLight.View.OnAssetChanged(MarkLight.UnityAsset)">
            <summary>
            Called when asset has been loaded or unloaded.
            </summary>
        </member>
        <member name="P:MarkLight.View.IsLive">
            <summary>
            Gets boolean indicating if this view is live (enabled and not destroyed).
            </summary>
        </member>
        <member name="P:MarkLight.View.HasQueuedChangeHandlers">
            <summary>
            Gets boolean indicating if the view has any queued change handlers.
            </summary>
        </member>
        <member name="P:MarkLight.View.QueuedChangeHandlers">
            <summary>
            Gets list of currently queued change handlers.
            </summary>
        </member>
        <member name="P:MarkLight.View.ChildCount">
            <summary>
            Gets child count. 
            </summary>
        </member>
        <member name="P:MarkLight.View.GameObjectName">
            <summary>
            Gets GameObject name (usually view type + id). 
            </summary>
        </member>
        <member name="P:MarkLight.View.ViewFieldDataDictionary">
            <summary>
            Gets view field data of the view.
            </summary>
        </member>
        <member name="P:MarkLight.View.ViewTypeData">
            <summary>
            Gets view type data.
            </summary>
        </member>
        <member name="P:MarkLight.View.IsInitialized">
            <summary>
            Gets or sets bool indicating if the view has been initialized.
            </summary>
        </member>
        <member name="T:MarkLight.ViewAction">
            <summary>
            View action.
            </summary>
        </member>
        <member name="M:MarkLight.ViewAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ViewAction.#cctor">
            <summary>
            Initializes static instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ViewAction.Trigger">
            <summary>
            Triggers the view action with no data.
            </summary>
        </member>
        <member name="M:MarkLight.ViewAction.Trigger(MarkLight.ActionData)">
            <summary>
            Triggers the view action with action data.
            </summary>
        </member>
        <member name="M:MarkLight.ViewAction.Trigger(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            Triggers the view action with event data.
            </summary>
        </member>
        <member name="M:MarkLight.ViewAction.Trigger(System.Object)">
            <summary>
            Triggers the view action custom data.
            </summary>
        </member>
        <member name="M:MarkLight.ViewAction.Trigger(MarkLight.ActionData,UnityEngine.EventSystems.BaseEventData,System.Object)">
            <summary>
            Triggers the view action.
            </summary>
        </member>
        <member name="M:MarkLight.ViewAction.AddEntry(MarkLight.ViewActionEntry)">
            <summary>
            Adds view action entry. 
            </summary>
        </member>
        <member name="P:MarkLight.ViewAction.Entries">
            <summary>
            Gets number of view action entries attached to this view action.
            </summary>
        </member>
        <member name="P:MarkLight.ViewAction.HasEntries">
            <summary>
            Gets boolean indicating if the view action has any entries attached to it. 
            </summary>
        </member>
        <member name="T:MarkLight.ViewActionEntry">
            <summary>
            Contains data about a view action handler.
            </summary>
        </member>
        <member name="M:MarkLight.ViewActionEntry.Invoke">
            <summary>
            Invokes the view action method.
            </summary>
        </member>
        <member name="M:MarkLight.ViewActionEntry.Invoke(MarkLight.ActionData)">
            <summary>
            Invokes the view action method with action data.
            </summary>
        </member>
        <member name="M:MarkLight.ViewActionEntry.Invoke(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            Invokes the view action method with base event data.
            </summary>
        </member>
        <member name="M:MarkLight.ViewActionEntry.Invoke(System.Object)">
            <summary>
            Invokes the view action method with custom event data.
            </summary>
        </member>
        <member name="M:MarkLight.ViewActionEntry.Invoke(MarkLight.ActionData,UnityEngine.EventSystems.BaseEventData,System.Object)">
            <summary>
            Invokes the view action method with parameters.
            </summary>
        </member>
        <member name="M:MarkLight.ViewActionEntry.Initialize">
            <summary>
            Initializes the view action entry.
            </summary>
        </member>
        <member name="T:MarkLight.ViewData">
            <summary>
            Contains logic for managing loading views.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.GenerateViews">
            <summary>
            Goes through XUML and creates/updates the scene objects.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.LoadAllXuml(System.Collections.Generic.IEnumerable{UnityEngine.TextAsset})">
            <summary>
            Loads all XUML assets.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.LoadXuml(UnityEngine.TextAsset)">
            <summary>
            Loads XUML file to the view database.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.LoadXuml(System.String,System.String)">
            <summary>
            Loads XUML string to the view database.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.LoadViewXuml(System.Xml.Linq.XElement,System.String)">
            <summary>
            Loads XUML to view database.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.LoadThemeXuml(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Loads XUML to theme database.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.LoadResourceDictionaryXuml(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Loads XUML to resource dictionary database.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.LoadResourceXuml(System.String,System.Xml.Linq.XElement,System.String,System.String,System.String,System.String)">
            <summary>
            Loads resources from a resource element.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.CreateView``1(MarkLight.View,MarkLight.View,MarkLight.ValueConverterContext,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Creates view of specified type.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.CreateView(System.String,MarkLight.View,MarkLight.View,MarkLight.ValueConverterContext,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Creates view of specified type.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.GetValueConverterContext(MarkLight.ValueConverterContext,System.Xml.Linq.XElement,System.String)">
            <summary>
            Creates value converter context from element settings.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.GetChildViewStyle(System.String,System.Xml.Linq.XAttribute)">
            <summary>
            Gets child view style based on attribute value.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.SetViewValues(MarkLight.View,System.Xml.Linq.XElement,MarkLight.View,MarkLight.ValueConverterContext)">
            <summary>
            Sets view values parsed from XUML.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.GetViewTypeData(System.String)">
            <summary>
            Gets view type data.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.GetThemeData(System.String)">
            <summary>
            Gets theme data.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.GetViewType(System.String)">
            <summary>
            Gets view type from view type name.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.GetValueConverterForType(System.String)">
            <summary>
            Gets value converter for view field type.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.GetValueConverter(System.String)">
            <summary>
            Gets value converter.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.GetValueInterpolatorForType(System.String)">
            <summary>
            Gets value interpolator for view field type.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.LoadAsset(System.String,UnityEngine.Sprite)">
            <summary>
            Loads sprite asset.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.LoadAsset(System.String,UnityEngine.Object)">
            <summary>
            Loads asset.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.UnloadAsset(System.String)">
            <summary>
            Unloads asset.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.SortByDependency(System.Collections.Generic.List{MarkLight.ViewTypeData})">
            <summary>
            Sorts the view elements by their dependencies so they can be processed in the right order.
            </summary>
        </member>
        <member name="M:MarkLight.ViewData.Visit(MarkLight.ViewTypeData,System.Collections.Generic.List{MarkLight.ViewTypeData},System.String)">
            <summary>
            Used by dependency sort algorithm.
            </summary>
        </member>
        <member name="T:MarkLight.ViewField`1">
            <summary>
            Generic base class for dependency view fields.
            </summary>
        </member>
        <member name="P:MarkLight.ViewField`1.Value">
            <summary>
            Gets or sets view field notifying observers if the value has changed.
            </summary>
        </member>
        <member name="P:MarkLight.ViewField`1.ObjectValue">
            <summary>
            Gets or sets view field notifying observers if the value has changed.
            </summary>
        </member>
        <member name="P:MarkLight.ViewField`1.DirectValue">
            <summary>
            Sets view field directly without notifying observers that the value has changed.
            </summary>
        </member>
        <member name="P:MarkLight.ViewField`1.DirectObjectValue">
            <summary>
            Sets view field directly without notifying observers that the value has changed.
            </summary>
        </member>
        <member name="P:MarkLight.ViewField`1.IsSet">
            <summary>
            Gets boolean indicating if the value has been set. 
            </summary>
        </member>
        <member name="P:MarkLight.ViewField`1.InternalValue">
            <summary>
            Gets or sets internal value without considering mappings and without notifying observers.
            </summary>
        </member>
        <member name="T:MarkLight.ViewFieldBase">
            <summary>
            Base class for dependency view fields.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldBase.TriggerValueSet">
            <summary>
            Triggers the ValueSet event.
            </summary>
        </member>
        <member name="T:MarkLight.ViewFieldBinding">
            <summary>
            Contains data about a view field binding.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldBinding.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldBinding.ValueHasBindings(System.String)">
            <summary>
            Checks if a view field value contains bindings.
            </summary>
        </member>
        <member name="T:MarkLight.ViewFieldBindingSource">
            <summary>
            View field binding source.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldBindingSource.#ctor(MarkLight.ViewFieldData,System.Boolean)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldBindingSource.GetValue(System.Boolean@)">
            <summary>
            Gets value from binding source.
            </summary>
        </member>
        <member name="P:MarkLight.ViewFieldBindingSource.BindingSourceString">
            <summary>
            Gets binding source string.
            </summary>
        </member>
        <member name="T:MarkLight.ViewFieldData">
            <summary>
            Contains data about a view field.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldData.SetValue(System.Object,System.Collections.Generic.HashSet{MarkLight.ViewFieldData},System.Boolean,MarkLight.ValueConverterContext,System.Boolean)">
            <summary>
            Sets value of field.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldData.SetIsSet">
            <summary>
            Sets isSet-indicator.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldData.GetValue(System.Boolean@)">
            <summary>
            Gets value of field.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldData.RegisterValueObserver(MarkLight.ValueObserver)">
            <summary>
            Registers a value observer.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldData.NotifyValueObservers(System.Collections.Generic.HashSet{MarkLight.ViewFieldData})">
            <summary>
            Notifies all value observers that value has been set.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldData.NotifyBindingValueObservers(System.Collections.Generic.HashSet{MarkLight.ViewFieldData})">
            <summary>
            Notifies all binding value observers that value has been set.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldData.NotifyChangeHandlerValueObservers(System.Collections.Generic.HashSet{MarkLight.ViewFieldData})">
            <summary>
            Notifies all change handler value observers that value has been set.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldData.FromViewFieldPath(MarkLight.View,System.String)">
            <summary>
            Gets field data from field path.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldData.ParseViewFieldPath">
            <summary>
            Tries to parse the view field path and get view field path info. Called only if we're the owner of the field.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldData.GetTargetView">
            <summary>
            Gets target view. Only called if this view isn't the owner.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldData.IsSet">
            <summary>
            Gets bool indicating if the view field has been set.
            </summary>
        </member>
        <member name="P:MarkLight.ViewFieldData.ValueConverter">
            <summary>
            Gets view field value converter.
            </summary>
        </member>
        <member name="P:MarkLight.ViewFieldData.ViewFieldTypeName">
            <summary>
            Gets view field type name.
            </summary>
        </member>
        <member name="P:MarkLight.ViewFieldData.ViewFieldType">
            <summary>
            Gets view field type.
            </summary>
        </member>
        <member name="P:MarkLight.ViewFieldData.ViewFieldPath">
            <summary>
            Gets view field path.
            </summary>
        </member>
        <member name="P:MarkLight.ViewFieldData.TargetViewFieldPath">
            <summary>
            Gets target view field path.
            </summary>
        </member>
        <member name="P:MarkLight.ViewFieldData.IsPathParsed">
            <summary>
            Gets boolean indicating if path has been parsed.
            </summary>
        </member>
        <member name="P:MarkLight.ViewFieldData.IsOwner">
            <summary>
            Returns boolean indicating if this view field is the owner of the value (not mapped to another view).
            </summary>
        </member>
        <member name="T:MarkLight.ViewFieldPathInfo">
            <summary>
            Contains information about a view field path.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldPathInfo.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldPathInfo.GetValue(MarkLight.View,System.Boolean@)">
            <summary>
            Gets value at the end of the field path.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldPathInfo.SetValue(MarkLight.View,System.Object)">
            <summary>
            Sets value and returns old value.
            </summary>
        </member>
        <member name="T:MarkLight.ViewFieldStateValue">
            <summary>
            Contains data about a view field state value.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldStateValue.GetValue">
            <summary>
            Gets value of state field.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldStateValue.SetValue(System.Object,System.String)">
            <summary>
            Sets value of field.
            </summary>
        </member>
        <member name="M:MarkLight.ViewFieldStateValue.SetValue(System.Object)">
            <summary>
            Sets value of field.
            </summary>
        </member>
        <member name="T:MarkLight.ViewNameAlias">
            <summary>
            Attribute indicating additional view name alias that will map to this view-model.
            </summary>
        </member>
        <member name="M:MarkLight.ViewNameAlias.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:MarkLight.ViewPool">
            <summary>
            Provides access to a view pool.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPool.#ctor(MarkLight.Views.UI.ViewPoolContainer)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPool.InsertView(MarkLight.View)">
            <summary>
            Inserts a view into the view pool.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPool.GetView">
            <summary>
            Gets first available view in the pool.
            </summary>
        </member>
        <member name="P:MarkLight.ViewPool.IsFull">
            <summary>
            Gets boolean indicating if pool is full.
            </summary>
        </member>
        <member name="P:MarkLight.ViewPool.IsEmpty">
            <summary>
            Gets boolean indicating if pool is empty.
            </summary>
        </member>
        <member name="T:MarkLight.ViewPresenter">
            <summary>
            MarkLight Presentation Engine.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.Awake">
            <summary>
            Called once at startup.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.Initialize">
            <summary>
            Called once to initialize views and runtime data.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.InitializeViews(UnityEngine.GameObject)">
            <summary>
            Initializes the views. Called once on root view at the start of the scene. Need to be called on any views created dynamically.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.InitializeViews(MarkLight.View)">
            <summary>
            Initializes the views. Called once on root view at the start of the scene. Need to be called on any views created dynamically.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.PrintTriggeredChangeHandlerOverflowError(System.Int32,MarkLight.View)">
            <summary>
            Prints triggered change handler overflow error message.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.Clear">
            <summary>
            Removes all view data from presenter and clears the scene.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.GetViewTypeData(System.String)">
            <summary>
            Gets view type data.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.LoadViewTypeDataDictionary">
            <summary>
            Loads the view type data dictionary.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.GetThemeData(System.String)">
            <summary>
            Gets theme data.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.GetResourceDictionary(System.String)">
            <summary>
            Gets resource dictionary.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.GetAsset(System.String)">
            <summary>
            Gets pre-loaded asset from path.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.GetAsset(UnityEngine.Object)">
            <summary>
            Gets pre-loaded asset from path.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.GetAssetPath(UnityEngine.Object)">
            <summary>
            Gets asset path from asset.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.AddAsset(System.String,UnityEngine.Object)">
            <summary>
            Adds asset to list of loaded assets.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.GetViewType(System.String)">
            <summary>
            Gets view type from view type name.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.GetValueConverterForType(System.String)">
            <summary>
            Gets value converter for view field type.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.GetValueConverter(System.String)">
            <summary>
            Gets value converter.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.GetValueInterpolatorForType(System.String)">
            <summary>
            Gets value interpolator for view field type.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.LoadAsset(System.String,UnityEngine.Object)">
            <summary>
            Loads asset at path.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.UnloadAsset(System.String)">
            <summary>
            Unloads the asset at path.
            </summary>
        </member>
        <member name="M:MarkLight.ViewPresenter.UpdateInstance">
            <summary>
            Refreshes and updates the view presenter instance.
            </summary>
        </member>
        <member name="P:MarkLight.ViewPresenter.Instance">
            <summary>
            Gets global presentation engine instance.
            </summary>
        </member>
        <member name="P:MarkLight.ViewPresenter.CachedValueConverters">
            <summary>
            Gets cached value converters.
            </summary>
        </member>
        <member name="T:MarkLight.ViewTypeData">
            <summary>
            Contains data about a specific view type.
            </summary>
        </member>
        <member name="M:MarkLight.ViewTypeData.#ctor">
            <summary>
            Initializes a new instance of the class
            </summary>
        </member>
        <member name="M:MarkLight.ViewTypeData.GetMappedViewField(System.String)">
            <summary>
            Gets mapped view field. Returns the same field if no mapped field exist.
            </summary>
        </member>
        <member name="M:MarkLight.ViewTypeData.GetViewFieldValueConverter(System.String)">
            <summary>
            Gets value converter for view field.
            </summary>
        </member>
        <member name="M:MarkLight.ViewTypeData.GetViewFieldChangeHandler(System.String)">
            <summary>
            Gets view field change handler.
            </summary>
        </member>
        <member name="M:MarkLight.ViewTypeData.GetViewField(System.String)">
            <summary>
            Returns view field.
            </summary>
        </member>
        <member name="M:MarkLight.ViewTypeData.GetViewFieldPathInfo(System.String)">
            <summary>
            Gets view field path info for the field.
            </summary>
        </member>
        <member name="M:MarkLight.ViewTypeData.AddViewFieldPathInfo(System.String,MarkLight.ViewFieldPathInfo)">
            <summary>
            Adds view field path info.
            </summary>
        </member>
        <member name="M:MarkLight.ViewTypeData.IsGenericViewField(System.String)">
            <summary>
            Gets boolean indicating if the view field is generic.
            </summary>
        </member>
        <member name="P:MarkLight.ViewTypeData.XumlElement">
            <summary>
            Gets or sets XUML element.
            </summary>
        </member>
        <member name="P:MarkLight.ViewTypeData.Dependencies">
            <summary>
            Gets or sets view dependencies.
            </summary>
        </member>
        <member name="T:MarkLight.MapViewFieldData">
            <summary>
            Contains information about a mapped view field.
            </summary>
        </member>
        <member name="T:MarkLight.ViewFieldConverterData">
            <summary>
            Contains information about a mapped view field.
            </summary>
        </member>
        <member name="T:MarkLight.ViewFieldChangeHandler">
            <summary>
            Contains information about a change handler.
            </summary>
        </member>
        <member name="T:MarkLight.Views.Animate">
            <summary>
            Animates views.
            </summary>
            <d>Animates view fields.</d>
        </member>
        <member name="F:MarkLight.Views.Animate.EasingFunction">
            <summary>
            Animation easing function
            </summary>
            <d>Easing function to be used when interpolating between From and To animation values.</d>
        </member>
        <member name="F:MarkLight.Views.Animate.AutoReset">
            <summary>
            Auto reset animation.
            </summary>
            <d>Boolean indicating if the animation automatically should be reset when completed.</d>
        </member>
        <member name="F:MarkLight.Views.Animate.AutoReverse">
            <summary>
            Auto reverse animation.
            </summary>
            <d>Boolean indicating if animation automatically should be reversed when completed.</d>
        </member>
        <member name="F:MarkLight.Views.Animate.Field">
            <summary>
            Animation view field.
            </summary>
            <d>Path to the view field that should be animated.</d>
        </member>
        <member name="F:MarkLight.Views.Animate.From">
            <summary>
            From animation value.
            </summary>
            <d>The starting value to be set when the animation starts.</d>
        </member>
        <member name="F:MarkLight.Views.Animate.To">
            <summary>
            To animation value.
            </summary>
            <d>The end value to be interpolated to during animation.</d>
        </member>
        <member name="F:MarkLight.Views.Animate.ReverseSpeed">
            <summary>
            Animation reverse speed.
            </summary>
            <d>The speed the animation should have when run in reverse (percentage of original speed).</d>
        </member>
        <member name="F:MarkLight.Views.Animate.Duration">
            <summary>
            Duration of animation.
            </summary>
            <d>The duration of the animation.</d>
        </member>
        <member name="F:MarkLight.Views.Animate.StartOffset">
            <summary>
            Animation start offset.
            </summary>
            <d>Indicates a delay in starting the animation after it is triggered.</d>
        </member>
        <member name="P:MarkLight.Views.Animate.IsAnimationRunning">
            <summary>
            Gets a boolean indicating whether this animation is running.
            </summary>
        </member>
        <member name="P:MarkLight.Views.Animate.IsAnimationReversing">
            <summary>
            Gets a boolean indicating whether this animation is reversing.
            </summary>
        </member>
        <member name="P:MarkLight.Views.Animate.IsAnimationCompleted">
            <summary>
            Gets a boolean indicating whether this animation is completed.
            </summary>
        </member>
        <member name="P:MarkLight.Views.Animate.IsAnimationPaused">
            <summary>
            Gets a boolean indicating whether this animation is paused.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate.Update">
            <summary>
            Updates the animation each frame.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate.StartAnimation">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate.StopAnimation">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate.ResetAndStopAnimation">
            <summary>
            Resets and stops animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate.ReverseAnimation">
            <summary>
            Reverses the animation. Resumes the animation if paused.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate.PauseAnimation">
            <summary>
            Pauses animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate.ResumeAnimation">
            <summary>
            Resumes paused animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate.ResetAnimation">
            <summary>
            Resets the animation to its initial state (doesn't stop it).
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate.BehaviorChanged">
            <summary>
            Called once by view before animations are used.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate.SetAnimationTarget(MarkLight.View)">
            <summary>
            Sets animation target.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate._viewFieldAnimator_Started(MarkLight.Animation.ViewFieldAnimator)">
            <summary>
            Called when animation started.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate._viewFieldAnimator_Completed(MarkLight.Animation.ViewFieldAnimator)">
            <summary>
            Called when animation completed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate._viewFieldAnimator_Paused(MarkLight.Animation.ViewFieldAnimator)">
            <summary>
            Called when animation paused.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate._viewFieldAnimator_Reversed(MarkLight.Animation.ViewFieldAnimator)">
            <summary>
            Called when animation reversed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate._viewFieldAnimator_Stopped(MarkLight.Animation.ViewFieldAnimator)">
            <summary>
            Called when animation stopped.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate._viewFieldAnimator_Resumed(MarkLight.Animation.ViewFieldAnimator)">
            <summary>
            Called when animation resumed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Animate.UpdateViewFieldAnimator">
            <summary>
            Updates view field animator.
            </summary>
        </member>
        <member name="T:MarkLight.Views.ContentPlaceholder">
            <summary>
            Special view that acts as a placeholder for where view content should be placed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.ContentPlaceholder.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:MarkLight.Views.Cube">
            <summary>
            Cube.
            </summary>
        </member>
        <member name="F:MarkLight.Views.Cube.Mesh">
            <summary>
            Instantiated mesh.
            </summary>
            <d>Instantiated mesh assigned to the mesh filter.</d>
        </member>
        <member name="F:MarkLight.Views.Cube.SharedMesh">
            <summary>
            Shared mesh.
            </summary>
            <d>Shared mesh of the mesh filter.</d>
        </member>
        <member name="F:MarkLight.Views.Cube.MeshFilter">
            <summary>
            Mesh filter component.
            </summary>
            <d>The mesh filter takes a mesh and passes it to the mesh renderer.</d>
        </member>
        <member name="F:MarkLight.Views.Cube.AdditionalVertexStreams">
            <summary>
            Additional vertex streams.
            </summary>
            <d>Vertex attributes in this mesh will override or add attributes of the primary mesh in the MeshRenderer.</d>
        </member>
        <member name="F:MarkLight.Views.Cube.MeshRenderer">
            <summary>
            Mesh renderer component.
            </summary>
            <d>Renders a mesh.</d>
        </member>
        <member name="M:MarkLight.Views.Cube.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Views.Cube.InitializeInternalDefaultValues">
            <summary>
            Initializes internal default values.
            </summary>
        </member>
        <member name="T:MarkLight.Views.EventSystem">
            <summary>
            Handles input, raycasting and sending events.
            </summary>
            <d>Handles input, raycasting and sending events.</d>
        </member>
        <member name="F:MarkLight.Views.EventSystem.FirstSelectedGameObject">
            <summary>
            GameObject selected first.
            </summary>
            <d>The GameObject that was selected first.</d>
        </member>
        <member name="F:MarkLight.Views.EventSystem.CurrentSelectedGameObject">
            <summary>
            GameObject currently selected.
            </summary>
            <d>The GameObject that is currently selected.</d>
        </member>
        <member name="F:MarkLight.Views.EventSystem.PixelDragThreshold">
            <summary>
            Pixel drag threshold.
            </summary>
            <d>The soft area for dragging in pixels.</d>
        </member>
        <member name="F:MarkLight.Views.EventSystem.SendNavigationEvents">
            <summary>
            Indicates if navigation events are sent.
            </summary>
            <d>Boolean indicating if navigation events (move, submit, cancel) are handled by the event system.</d>
        </member>
        <member name="F:MarkLight.Views.EventSystem.UnityEventSystem">
            <summary>
            Unity event system.
            </summary>
            <d>Handles input, raycasting and sending events.</d>
        </member>
        <member name="F:MarkLight.Views.EventSystem.HorizontalAxis">
            <summary>
            Horizontal axis button name.
            </summary>
            <d>Input manager name for the horizontal axis button.</d>
        </member>
        <member name="F:MarkLight.Views.EventSystem.VerticalAxis">
            <summary>
            Vertical axis button name.
            </summary>
            <d>Input manager name for the vertical axis button.</d>
        </member>
        <member name="F:MarkLight.Views.EventSystem.SubmitButton">
            <summary>
            Submit button name.
            </summary>
            <d>Input manager name for the submit button.</d>
        </member>
        <member name="F:MarkLight.Views.EventSystem.CancelButton">
            <summary>
            Cancel button name.
            </summary>
            <d>Input manager name for the cancel button.</d>
        </member>
        <member name="F:MarkLight.Views.EventSystem.InputActionsPerSecond">
            <summary>
            Input actions allowed per second.
            </summary>
            <d>Number of keyboard / controller inputs allowed per second.</d>
        </member>
        <member name="F:MarkLight.Views.EventSystem.AllowActivationOnMobileDevice">
            <summary>
            Indicates if input module is activated on mobile devices.
            </summary>
            <d>Boolean indicates if the standalone input module is to be activated on mobile devices.</d>
        </member>
        <member name="F:MarkLight.Views.EventSystem.StandaloneInputModule">
            <summary>
            Standalone input module.
            </summary>
            <d>Standalone input module for designed for mouse and keyboard controller input.</d>
        </member>
        <member name="T:MarkLight.Views.StateAnimation">
            <summary>
            Animates views.
            </summary>
        </member>
        <member name="M:MarkLight.Views.StateAnimation.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.StateAnimation.InitializeInternal">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.StateAnimation.StartAnimation">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.StateAnimation.StopAnimation">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.StateAnimation.ResetAnimation">
            <summary>
            Resets the animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.StateAnimation.ResetAndStopAnimation">
            <summary>
            Resets and stops the animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.StateAnimation.ReverseAnimation">
            <summary>
            Reverses the animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.StateAnimation.PauseAnimation">
            <summary>
            Pauses the animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.StateAnimation.ResumeAnimation">
            <summary>
            Resumes the animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.StateAnimation.ChildAnimationCompleted">
            <summary>
            Called if a child animation has been completed. 
            </summary>
        </member>
        <member name="M:MarkLight.Views.StateAnimation.GetFieldAnimators(System.String)">
            <summary>
            Gets list of animators for specified view field.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.ItemSelectionActionData">
            <summary>
            Item selection action data.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.ListChangedActionData">
            <summary>
            Items changed action data.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.TabSelectionActionData">
            <summary>
            Tab selection action data.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.Button">
            <summary>
            Button view.
            </summary>
            <d>The button view is a clickable region with text. Has the states: Default, Highlighted, Pressed and Disabled. The button can be set to toggle through IsToggleButton and to adjust its size to its text through the AdjustToText field.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.ButtonLabel">
            <summary>
            The button label.
            </summary>
            <d>The button label arranges and displays the button text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.Text">
            <summary>
            Button text.
            </summary>
            <d>The text of the button label. The button can be set to adjust its size to the text through the AdjustToText field.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.Font">
            <summary>
            Button text font.
            </summary>
            <d>The font of the button label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.FontSize">
            <summary>
            Button text font size.
            </summary>
            <d>The size of the button label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.LineSpacing">
            <summary>
            Button text line spacing.
            </summary>
            <d>The line spacing of the button label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.SupportRichText">
            <summary>
            Support rich text.
            </summary>
            <d>Boolean indicating if the button label supports rich text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.FontColor">
            <summary>
            Button text font color.
            </summary>
            <d>The font color of the button label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.FontStyle">
            <summary>
            Button text font style.
            </summary>
            <d>The font style of the button label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.TextMargin">
            <summary>
            Button text margin.
            </summary>
            <d>The margin of the button label text. Can be used to adjust the text positioning. If AdjustToText is used the TextPadding field is used to add padding.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.TextAlignment">
            <summary>
            Button text alignment.
            </summary>
            <d>The alignment of the text inside the button label. Can be used with TextMargin and TextOffset to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.TextOffset">
            <summary>
            Button text offset.
            </summary>
            <d>The offset of the button label. Can be used with TextMargin and TextAlignment to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.ShadowColor">
            <summary>
            Button text shadow color.
            </summary>
            <d>The shadow color of the button label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.ShadowDistance">
            <summary>
            Button text shadow distance.
            </summary>
            <d>The distance of the button label text shadow.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.OutlineColor">
            <summary>
            Button text outline color.
            </summary>
            <d>The outline color of the button label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.OutlineDistance">
            <summary>
            Button text outline distance.
            </summary>
            <d>The distance of the button label text outline.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.AdjustToText">
            <summary>
            Adjust button to text.
            </summary>
            <d>An enum indiciating how the button should adjust its size to the label text. By default the button does not adjust its size to the text. Is used in conjunction with the TextPadding field to get the desired size of the button in relation to its text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.IsToggleButton">
            <summary>
            Indicates if this button is set to toggle.
            </summary>
            <d>If IsToggleButton is set to true the button will toggle between pressed and unpressed (default) state when clicked.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.IsDisabled">
            <summary>
            Indicates if the button is disabled.
            </summary>
            <d>If set to true the button enters the "Disabled" state and can't be interacted with.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.ToggleValue">
            <summary>
            Button toggle value.
            </summary>
            <d>If the button is a toggle button (IsToggleButton is set to true) the toggle value indicates the toggle state of the button. If pressed the ToggleValue is true.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.TextPadding">
            <summary>
            Button text padding.
            </summary>
            <d>The button TextPadding is used when AdjustToText is set. It determines the additional padding to be added to the size of the button when it adjusts to the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.CanToggleOn">
            <summary>
            Indicates if user can toggle on the button.
            </summary>
            <d>Boolean indicating if the button can be toggled on by user interaction. If set to false the button can only be toggled on programmatically.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.CanToggleOff">
            <summary>
            Indicates if user can toggle off the button.
            </summary>
            <d>Boolean indicating if the button can be toggled off by user interaction. If set to false the button can only be toggled on programmatically.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Button.IsPressed">
            <summary>
            Indicates if the button is pressed.
            </summary>
        </member>
        <member name="F:MarkLight.Views.UI.Button.IsMouseOver">
            <summary>
            Indicates if the mouse is over the button.
            </summary>
        </member>
        <member name="F:MarkLight.Views.UI.Button.ToggleClick">
            <summary>
            Toggle click view action.
            </summary>
            <d>Similar to Click view action but is only triggered if IsToggleButton is True and if the button toggles its state. It also supplies a bool indicating the button toggle state.</d>
        </member>
        <member name="M:MarkLight.Views.UI.Button.TextChanged">
            <summary>
            Called when the button text has been changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Button.IsDisabledChanged">
            <summary>
            Called when IsDisabled field changes.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Button.ToggleValueChanged">
            <summary>
            Called when ToggleValue field changes.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Button.ButtonMouseClick">
            <summary>
            Called when mouse is clicked.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Button.ButtonMouseEnter">
            <summary>
            Called when mouse enters.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Button.ButtonMouseExit">
            <summary>
            Called when mouse exits.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Button.ButtonMouseDown">
            <summary>
            Called when mouse down.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Button.ButtonMouseUp">
            <summary>
            Called when mouse up.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Button.SetState(System.String)">
            <summary>
            Sets the state of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Button.OnDisable">
            <summary>
            Called when the button is disabled.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.Button.TogglePressed">
            <summary>
            Gets value indicating if button is a toggle button and is pressed.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.CheckBox">
            <summary>
            CheckBox view.
            </summary>
            <d>A check box consisting of a box that can be ticked and a text label. Has the states: Default, Checked and Disabled.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.IsChecked">
            <summary>
            Indicates if the check box is checked.
            </summary>
            <d>If true the check box changes state from Default to Checked.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.IsDisabled">
            <summary>
            Indicates if the check box is disabled.
            </summary>
            <d>If true the check box changes state from Default to Disabled and no longer responds to user interaction.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.IsInteractable">
            <summary>
            Indicates if the check box can be interacted with.        
            </summary>
            <d>If true the check box can only be set programmatically rather than by the user.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.Spacing">
            <summary>
            Check box group spacing.
            </summary>
            <d>Spacing between the check box image and text label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.CheckBoxGroup">
            <summary>
            Group containing the check box image and label.
            </summary>
            <d>The the check box group arranges the check box image and text label horizontally.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.CheckBoxImage">
            <summary>
            Check box image sprite.
            </summary>
            <d>The sprite that will be rendered as the check box.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.CheckBoxImageType">
            <summary>
            Check box image type.
            </summary>
            <d>The type of the image sprite that is to be rendered as the check box.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.CheckBoxMaterial">
            <summary>
            Check box image material.
            </summary>
            <d>The material of the check box image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.CheckBoxColor">
            <summary>
            Check box image color.
            </summary>
            <d>The color of the check box image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.CheckBoxWidth">
            <summary>
            Check box image width.
            </summary>
            <d>Specifies the width of the check box image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.CheckBoxHeight">
            <summary>
            Check box image height.
            </summary>
            <d>Specifies the height of the check box image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.CheckBoxOffset">
            <summary>
            Check box image offset.
            </summary>
            <d>Specifies the offset of the check box image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.CheckBoxImageView">
            <summary>
            Image displaying the check box.
            </summary>
            <d>Image view that displays the check box. Different images are presented when the check box changes state between Default and Checked.</d>        
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.Text">
            <summary>
            Check box text.
            </summary>
            <d>The text of the check box label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.Font">
            <summary>
            Check box text font.
            </summary>
            <d>The font of the check box label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.FontSize">
            <summary>
            Check box text font size.
            </summary>
            <d>The font size of the check box label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.LineSpacing">
            <summary>
            Check box text line spacing.
            </summary>
            <d>The line spacing of the check box label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.SupportRichText">
            <summary>
            Supports rich text.
            </summary>
            <d>Boolean indicating if the check box label supports rich text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.FontColor">
            <summary>
            Check box text font color.
            </summary>
            <d>The font color of the check box label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.FontStyle">
            <summary>
            Check box text font style.
            </summary>
            <d>The font style of the check box label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.TextMargin">
            <summary>
            Check box text margin.
            </summary>
            <d>The margin of the check box label. Can be used to adjust the text positioning.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.TextAlignment">
            <summary>
            Check box text alignment.
            </summary>
            <d>The alignment of the text inside the check box label. Can be used with TextMargin and TextOffset to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.TextOffset">
            <summary>
            Check box text offset.
            </summary>
            <d>The offset of the check box label. Can be used with TextMargin and TextAlignment to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.ShadowColor">
            <summary>
            Check box text shadow color.
            </summary>
            <d>The shadow color of the check box label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.ShadowDistance">
            <summary>
            Check box text shadow distance.
            </summary>
            <d>The distance of the check box label shadow.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.OutlineColor">
            <summary>
            Check box text outline color.
            </summary>
            <d>The outline color of the check box label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.OutlineDistance">
            <summary>
            Check box text outline distance.
            </summary>
            <d>The distance of the check box label outline.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.AdjustToText">
            <summary>
            Adjusts the check box to the text.
            </summary>
            <d>An enum indiciating how the check box should adjust its size to the label text. By default the check box does not adjust its size to the text. Is used in conjunction with the TextPadding field to get the desired size of the check box in relation to its text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.CheckBox.CheckBoxLabel">
            <summary>
            The check box label.
            </summary>
            <d>The check box label displays text next to the check box.</d>
        </member>
        <member name="M:MarkLight.Views.UI.CheckBox.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.CheckBox.ChildLayoutChanged">
            <summary>
            Called when a child layout has been updated.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.CheckBox.LayoutChanged">
            <summary>
            Called when a field affecting the layout of the view has changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.CheckBox.IsCheckedChanged">
            <summary>
            Called when the field IsChecked is changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.CheckBox.IsDisabledChanged">
            <summary>
            Called when IsDisabled field changes.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.CheckBox.CheckBoxClick">
            <summary>
            Called when check box is clicked.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.Column">
            <summary>
            Column view.
            </summary>
            <d>The column view displays the content of a cell in the data grid.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Column.Text">
            <summary>
            Column label text.
            </summary>
            <d>The text of the column label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Column.Font">
            <summary>
            Column label text font.
            </summary>
            <d>The font of the column label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Column.FontSize">
            <summary>
            Column label text font size.
            </summary>
            <d>The font size of the column label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Column.LineSpacing">
            <summary>
            Column label text line spacing.
            </summary>
            <d>The line spacing of the column label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Column.SupportRichText">
            <summary>
            Supports rich text.
            </summary>
            <d>Boolean indicating if the column label supports rich text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Column.FontColor">
            <summary>
            Column label text font color.
            </summary>
            <d>The font color of the column label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Column.FontStyle">
            <summary>
            Column label text font style.
            </summary>
            <d>The font style of the column label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Column.TextMargin">
            <summary>
            Column label text margin.
            </summary>
            <d>The margin of the column label. Can be used to adjust the text positioning.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Column.TextAlignment">
            <summary>
            Column label text alignment.
            </summary>
            <d>The alignment of the text inside the column label. Can be used with TextMargin and TextOffset to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Column.TextOffset">
            <summary>
            Column label text offset.
            </summary>
            <d>The offset of the column label. Can be used with TextMargin and TextAlignment to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Column.ShadowColor">
            <summary>
            Column label text shadow color.
            </summary>
            <d>The shadow color of the column label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Column.ShadowDistance">
            <summary>
            Column label text shadow distance.
            </summary>
            <d>The distance of the column label shadow.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Column.OutlineColor">
            <summary>
            Column label text outline color.
            </summary>
            <d>The outline color of the column label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Column.OutlineDistance">
            <summary>
            Column label text outline distance.
            </summary>
            <d>The distance of the column label outline.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Column.AdjustToText">
            <summary>
            Adjusts the column to the text.
            </summary>
            <d>An enum indiciating how the column should adjust its size to the label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Column.ColumnLabel">
            <summary>
            The column label.
            </summary>
            <d>The column label displays text in the column.</d>
        </member>
        <member name="M:MarkLight.Views.UI.Column.SetState(System.String)">
            <summary>
            Sets the state of the view.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.ColumnHeader">
            <summary>
            Column header view.
            </summary>
            <d>The column header displays the contents of a header cell in the data grid.</d>
        </member>
        <member name="T:MarkLight.Views.UI.ComboBox">
            <summary>
            Combo box view.
            </summary>
            <d>Presents a static or dynamic list of items in a drop-down.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonImage">
            <summary>
            Combo box button image sprite.
            </summary>
            <d>The sprite that will be rendered as the combo box button.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonImageType">
            <summary>
            Combo box button image type.
            </summary>
            <d>The type of the image sprite that is to be rendered as the combo box button.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonMaterial">
            <summary>
            Combo box button image material.
            </summary>
            <d>The material of the combo box button image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonColor">
            <summary>
            Combo box button image color.
            </summary>
            <d>The color of the combo box button image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonWidth">
            <summary>
            Combo box button width.
            </summary>
            <d>Specifies the width of the combo box button either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonHeight">
            <summary>
            Combo box button height.
            </summary>
            <d>Specifies the height of the combo box button either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonOffset">
            <summary>
            Combo box button offset.
            </summary>
            <d>Specifies the offset of the combo box button.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonMargin">
            <summary>
            Combo box button margin.
            </summary>
            <d>Specifies the margin of the combo box button.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonAlignment">
            <summary>
            Combo box button alignment.
            </summary>
            <d>Specifies the alignment of the combo box button.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonText">
            <summary>
            Combo box button text.
            </summary>
            <d>The text of the combo box button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonFont">
            <summary>
            Combo box button text font.
            </summary>
            <d>The font of the combo box button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonFontSize">
            <summary>
            Combo box button text font size.
            </summary>
            <d>The font size of the combo box button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonLineSpacing">
            <summary>
            Combo box button text line spacing.
            </summary>
            <d>The line spacing of the combo box button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonSupportRichText">
            <summary>
            Supports rich text.
            </summary>
            <d>Boolean indicating if the combo box button label supports rich text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonTextPadding">
            <summary>
            Combo box button text padding.
            </summary>
            <d>The combo box button TextPadding is used when AdjustToText is set. It determines the additional padding to be added to the size of the button when it adjusts to the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonFontColor">
            <summary>
            Combo box button text font color.
            </summary>
            <d>The font color of the combo box button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonFontStyle">
            <summary>
            Combo box button text font style.
            </summary>
            <d>The font style of the combo box button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonTextMargin">
            <summary>
            Combo box button text margin.
            </summary>
            <d>The margin of the combo box button label. Can be used to adjust the text positioning.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonTextAlignment">
            <summary>
            Combo box button text alignment.
            </summary>
            <d>The alignment of the text inside the combo box button label. Can be used with TextMargin and TextOffset to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonTextOffset">
            <summary>
            Combo box button text offset.
            </summary>
            <d>The offset of the combo box button label. Can be used with TextMargin and TextAlignment to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonShadowColor">
            <summary>
            Combo box button text shadow color.
            </summary>
            <d>The shadow color of the combo box button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonShadowDistance">
            <summary>
            Combo box button text shadow distance.
            </summary>
            <d>The distance of the combo box button label shadow.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonOutlineColor">
            <summary>
            Combo box button text outline color.
            </summary>
            <d>The outline color of the combo box button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonOutlineDistance">
            <summary>
            Combo box button text outline distance.
            </summary>
            <d>The distance of the combo box button label outline.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ButtonAdjustToText">
            <summary>
            Adjusts the combo box button to the text.
            </summary>
            <d>An enum indiciating how the combo box button should adjust its size to the label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ComboBoxButton">
            <summary>
            The combo box button.
            </summary>
            <d>The combo box button is a toggle button that displays the drop-down list when pressed.</d>        
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.IsScrollable">
            <summary>
            Indicates if the combo box list is scrollable.
            </summary>
            <d>Boolean indicating if the combo box list is scrollable. The height of the scrollable list can be set by the ListHeight field.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.DisableInteractionScrollDelta">
            <summary>
            Scroll delta distance for disabling interaction.
            </summary>
            <d>If set any interaction with child views (clicks, etc) is disabled when the specified distance has been scrolled. This is used e.g. to disable clicks while scrolling a selectable list of items.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.SelectOnMouseUp">
            <summary>
            Indicates if items are selected on mouse up.
            </summary>
            <d>Boolean indicating if items are selected on mouse up rather than mouse down (default).</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.Items">
            <summary>
            User-defined list data.
            </summary>
            <d>Can be bound to an generic ObservableList to dynamically generate combo box items based on a template.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.SelectedItem">
            <summary>
            Selected list item.
            </summary>
            <d>Set when the selected combo box item changes and points to the user-defined item data.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListImage">
            <summary>
            Combo box list image sprite.
            </summary>
            <d>The sprite that will be rendered as the combo box list.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListImageType">
            <summary>
            Combo box list image type.
            </summary>
            <d>The type of the image sprite that is to be rendered as the combo box list.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListMaterial">
            <summary>
            Combo box list image material.
            </summary>
            <d>The material of the combo box list image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListColor">
            <summary>
            Combo box list image color.
            </summary>
            <d>The color of the combo box list image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListWidth">
            <summary>
            Combo box list image width.
            </summary>
            <d>Specifies the width of the combo box list image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListHeight">
            <summary>
            Combo box list image height.
            </summary>
            <d>Specifies the height of the combo box list image either in pixels or percents. Used when IsScrollable is True to control the height of the scrollable viewport.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListOffset">
            <summary>
            Combo box list image offset.
            </summary>
            <d>Specifies the offset of the combo box list image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListMargin">
            <summary>
            Combo box list image offset.
            </summary>
            <d>Specifies the offset of the combo box list image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListAlignment">
            <summary>
            Combo box list alignment.
            </summary>
            <d>Specifies the alignment of the combo box list.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListOrientation">
            <summary>
            Combo box list orientation.
            </summary>
            <d>Specifies the orientation of the combo box list.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListSpacing">
            <summary>
            Spacing between combo box list items.
            </summary>
            <d>The spacing between combo box list items.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListContentAlignment">
            <summary>
            The alignment of combo box list items.
            </summary>
            <d>If the combo box list items varies in size the content alignment specifies how the combo box list items should be arranged in relation to each other.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListContentMargin">
            <summary>
            Combo box list content margin.
            </summary>
            <d>Sets the margin of the combo box list mask view that contains the contents of the combo box list.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListSortDirection">
            <summary>
            Sort direction.
            </summary>
            <d>If combo box list items has SortIndex set they can be sorted in the direction specified.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.UseListMask">
            <summary>
            Indicates if a list mask is to be used.
            </summary>
            <d>Boolean indicating if a list mask is to be used.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListMaskWidth">
            <summary>
            The width of the list mask image.
            </summary>
            <d>Specifies the width of the list mask image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListMaskHeight">
            <summary>
            The height of the list mask image.
            </summary>
            <d>Specifies the height of the list mask image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListMaskOffset">
            <summary>
            The offset of the list mask image.
            </summary>
            <d>Specifies the offset of the list mask image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListMaskImage">
            <summary>
            Combo box list mask image sprite.
            </summary>
            <d>The sprite that will be rendered as the list max.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListMaskImageType">
            <summary>
            Combo box list mask image type.
            </summary>
            <d>The type of the image sprite that is to be rendered as the list max.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListMaskMaterial">
            <summary>
            Combo box list mask image material.
            </summary>
            <d>The material of the list max image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListMaskColor">
            <summary>
            Combo box list mask image color.
            </summary>
            <d>The color of the list max image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListMaskAlignment">
            <summary>
            Combo box list mask alignment.
            </summary>
            <d>Specifies the alignment of the list mask.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ListMaskShowGraphic">
            <summary>
            Indicates if list mask should be rendered.
            </summary>
            <d>Indicates if the list mask, i.e. the list mask background image sprite and color should be rendered.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ComboBoxList">
            <summary>
            Combo box drop-down list.
            </summary>
            <d>The combo box drop-down list that is displayed when the combo box button is pressed.</d>                
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.CanvasSortingOrder">
            <summary>
            Combo box list canvas sorting order.
            </summary>
            <d>Combo box list canvas draw order within a sorting layer.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.CanvasOverrideSorting">
            <summary>
            Override combo box list canvas sort order.
            </summary>
            <d>Boolean indicating if the sort order should be overriden (not inherited from parent canvas).</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.ComboBoxListCanvas">
            <summary>
            Combo box list canvas.
            </summary>
            <d>The combo box list canvas is used to render the drop-down list on top of all child views in the scene.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ComboBox.IsDropUp">
            <summary>
            Indicates if the combo box is a drop-up list.
            </summary>
            <d>Boolean indicating if the combo box should open above instead of below the combo box button.</d>
        </member>
        <member name="M:MarkLight.Views.UI.ComboBox.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ComboBox.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ComboBox.Update">
            <summary>
            Called each frame. Updates the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ComboBox.IsDropUpChanged">
            <summary>
            Called when IsDropUp field changes.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ComboBox.ComboBoxButtonClick(MarkLight.Views.UI.Button)">
            <summary>
            Called when mouse is clicked.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ComboBox.ComboBoxListSelectionChanged(MarkLight.Views.UI.ItemSelectionActionData)">
            <summary>
            Called when combo box list selection changes.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.ComboBoxItem">
            <summary>
            ComboBoxItem view.
            </summary>
            <d>The combo box item displays the content of a ComboBox drop-down list item.</d>
        </member>
        <member name="T:MarkLight.Views.UI.DataGrid">
            <summary>
            DataGrid view.
            </summary>
            <d>The data grid is used to arrange dynamic or static content in a grid.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.RowHeader">
            <summary>
            Row header view.
            </summary>
            <d>The row view that is displayed as header for all the data grid rows.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.Items">
            <summary>
            User-defined data grid data.
            </summary>
            <d>Can be bound to an generic ObservableList to dynamically generate data grid items based on a template.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.SelectedItem">
            <summary>
            Selected list item.
            </summary>
            <d>Set when the selected data grid item changes and points to the user-defined item data.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.IsScrollable">
            <summary>
            Indicates if the list of rows are scrollable.
            </summary>
            <d>Boolean indicating if the list of rows is to be scrollable.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.CanDeselect">
            <summary>
            Indicates if items can be deselected by clicking.
            </summary>
            <d>A boolean indicating if items in the data grid can be deselected by clicking. Items can always be deselected programmatically.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.CanMultiSelect">
            <summary>
            Indicates if more than one list item can be selected.
            </summary>
            <d>A boolean indicating if more than one data grid item can be selected by clicking or programmatically.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.CanSelect">
            <summary>
            Indicates if items can be selected by clicking.
            </summary>
            <d>A boolean indicating if items can be selected by clicking. Items can always be selected programmatically.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.AlternateRows">
            <summary>
            Indicates if the rows should alternate in style.
            </summary>
            <d>Boolean indicating if the Row style should alternate between "Default" and "Alternate".</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListImage">
            <summary>
            Data grid list image sprite.
            </summary>
            <d>The sprite that will be rendered as the data grid list.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListImageType">
            <summary>
            Data grid list image type.
            </summary>
            <d>The type of the image sprite that is to be rendered as the data grid list.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListMaterial">
            <summary>
            Data grid list image material.
            </summary>
            <d>The material of the data grid list image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListColor">
            <summary>
            Data grid list image color.
            </summary>
            <d>The color of the data grid list image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListWidth">
            <summary>
            Data grid list image width.
            </summary>
            <d>Specifies the width of the data grid list image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListHeight">
            <summary>
            Data grid list image height.
            </summary>
            <d>Specifies the height of the data grid list image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListOffset">
            <summary>
            Data grid list image offset.
            </summary>
            <d>Specifies the offset of the data grid list image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListMargin">
            <summary>
            Data grid list image offset.
            </summary>
            <d>Specifies the offset of the data grid list image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListAlignment">
            <summary>
            Data grid list alignment.
            </summary>
            <d>Specifies the alignment of the data grid list.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListOrientation">
            <summary>
            Data grid list orientation.
            </summary>
            <d>Specifies the orientation of the data grid list.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListSpacing">
            <summary>
            Spacing between data grid list items.
            </summary>
            <d>The spacing between data grid list items.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListContentAlignment">
            <summary>
            The alignment of data grid list items.
            </summary>
            <d>If the data grid list items varies in size the content alignment specifies how the data grid list items should be arranged in relation to each other.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListContentMargin">
            <summary>
            Data grid list content margin.
            </summary>
            <d>Sets the margin of the data grid list mask view that contains the contents of the data grid list.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListSortDirection">
            <summary>
            Sort direction.
            </summary>
            <d>If data grid list items has SortIndex set they can be sorted in the direction specified.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.UseListMask">
            <summary>
            Indicates if a list mask is to be used.
            </summary>
            <d>Boolean indicating if a list mask is to be used.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListMaskWidth">
            <summary>
            The width of the list mask image.
            </summary>
            <d>Specifies the width of the list mask image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListMaskHeight">
            <summary>
            The height of the list mask image.
            </summary>
            <d>Specifies the height of the list mask image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListMaskOffset">
            <summary>
            The offset of the list mask image.
            </summary>
            <d>Specifies the offset of the list mask image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListMaskImage">
            <summary>
            List max image sprite.
            </summary>
            <d>The sprite that will be rendered as the list max.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListMaskImageType">
            <summary>
            List max image type.
            </summary>
            <d>The type of the image sprite that is to be rendered as the list max.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListMaskMaterial">
            <summary>
            List max image material.
            </summary>
            <d>The material of the list max image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListMaskColor">
            <summary>
            List max image color.
            </summary>
            <d>The color of the list max image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListMaskAlignment">
            <summary>
            List mask alignment.
            </summary>
            <d>Specifies the alignment of the list mask.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ListMaskShowGraphic">
            <summary>
            Indicates if list mask should be rendered.
            </summary>
            <d>Indicates if the list mask, i.e. the list mask background image sprite and color should be rendered.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.DataGridList">
            <summary>
            Data grid list.
            </summary>
            <d>The data grid list renders all the selectable data grid rows.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ColumnTextMargin">
            <summary>
            Column text margin.
            </summary>
            <d>The margin of the column text. If set the text margin is applied to all columns that doesn't have a custom text margin set.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ColumnTextAlignment">
            <summary>
            Column text alignment.
            </summary>
            <d>The alignment of the column text. If set the alignment is applied to all columns that doesn't have a custom alignment set.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ColumnHeaderTextMargin">
            <summary>
            Column header text margin.
            </summary>
            <d>The margin of the column header text. If set the text margin is applied to all column headers that doesn't have a custom text margin set.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ColumnHeaderTextAlignment">
            <summary>
            Column header text alignment.
            </summary>
            <d>The alignment of the column header text. If set the alignment is applied to all column header that doesn't have a custom alignment set.</d>
        </member>
        <member name="F:MarkLight.Views.UI.DataGrid.ColumnSpacing">
            <summary>
            Spacing between columns.
            </summary>
            <d>Specifies the spacing that should be between columns.</d>
        </member>
        <member name="M:MarkLight.Views.UI.DataGrid.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.DataGrid.ChildLayoutChanged">
            <summary>
            Called when the layout of a child has changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.DataGrid.LayoutChanged">
            <summary>
            Called when the layout of the view changes.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.DataGrid.Initialize">
            <summary>
            Initializes the view. 
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.Frame">
            <summary>
            Frame view.
            </summary>
            <d>The frame resizes itself to its content by default.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Frame.ResizeToContent">
            <summary>
            Indicates if the view should resize to content.
            </summary>
            <d>Resizes the view to the size of its children.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Frame.ContentMargin">
            <summary>
            Content margin.
            </summary>
            <d>The margin of the content of this view.</d>
        </member>
        <member name="M:MarkLight.Views.UI.Frame.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Frame.ChildLayoutChanged">
            <summary>
            Called when a child layout has been updated.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Frame.LayoutChanged">
            <summary>
            Updates the layout of the view.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.Group">
            <summary>
            Group view.
            </summary>
            <d>The group is used to spacially arrange child views next to each other either horizontally or vertically.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Group.Orientation">
            <summary>
            Orientation of the group.
            </summary>
            <d>The orientation of the group that determines how the child views will be arranged.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Group.Spacing">
            <summary>
            Spacing between views.
            </summary>
            <d>Determines the spacing to be added between views in the group.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Group.ContentAlignment">
            <summary>
            Content alignment.
            </summary>
            <d>Determines how the children should be aligned in relation to each other.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Group.SortDirection">
            <summary>
            Sort direction.
            </summary>
            <d>If children has SortIndex set the sort direction determines which order the views should be arranged in the group.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Group.SetChildVisibility">
            <summary>
            Sets the visibility of children so they are made visible after they are arranged.
            </summary>
            <d>Boolean indicating that the group should set the visibility of children so they are only made visible after they are arranged.</d>
        </member>
        <member name="M:MarkLight.Views.UI.Group.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Group.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Group.ChildLayoutChanged">
            <summary>
            Called when a child layout has been updated.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Group.LayoutChanged">
            <summary>
            Updates the layout of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Group.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.HyperLink">
            <summary>
            HyperLink view. 
            </summary>
            <d>Displays text that can be pressed. Has the states: Default, Highlighted, Pressed and Disabled.</d>
        </member>
        <member name="F:MarkLight.Views.UI.HyperLink.IsDisabled">
            <summary>
            Indicates if the hyperlink is disabled.
            </summary>
            <d>If set to true the hyperlink enters the Disabled state and can't be interacted with.</d>
        </member>
        <member name="F:MarkLight.Views.UI.HyperLink.IsPressed">
            <summary>
            Boolean indicating if the hyperlink is being pressed.
            </summary>
        </member>
        <member name="F:MarkLight.Views.UI.HyperLink.IsMouseOver">
            <summary>
            Boolean indicating if mouse is over the hyperlink.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.HyperLink.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.HyperLink.IsDisabledChanged">
            <summary>
            Called when IsDisabled field changes.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.HyperLink.HyperLinkMouseEnter">
            <summary>
            Called when mouse enters.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.HyperLink.HyperLinkMouseExit">
            <summary>
            Called when mouse exits.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.HyperLink.HyperLinkMouseDown">
            <summary>
            Called when mouse down.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.HyperLink.HyperLinkMouseUp">
            <summary>
            Called when mouse up.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.Image">
            <summary>
            Image view.
            </summary>
            <d>Used to display an image. Contains additional mappings to the background image component.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Image.EventAlphaThreshold">
            <summary>
            Alpha threshold for letting through events.
            </summary>
            <d>The alpha threshold specifying the minimum alpha a pixel must have for the event to be passed through.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Image.FillAmount">
            <summary>
            Image fill amount.
            </summary>
            <d>Amount of the Image shown when the Image.type is set to Image.Type.Filled.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Image.FillCenter">
            <summary>
            Indicates if center should be filled.
            </summary>
            <d>Boolean indicating whether or not to render the center of a Tiled or Sliced image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Image.FillClockwise">
            <summary>
            Indicates if the image should be filled clockwise.
            </summary>
            <d>Boolean indicating whether the image should be filled clockwise (true) or counter-clockwise (false).</d>
        </member>
        <member name="F:MarkLight.Views.UI.Image.FillMethod">
            <summary>
            Image fill method.
            </summary>
            <d>Indicates what type of fill method should be used.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Image.FillOrigin">
            <summary>
            Image fill origin.
            </summary>
            <d>Controls the origin point of the Fill process. Value means different things with each fill method.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Image.OverrideSprite">
            <summary>
            Image override sprite.
            </summary>
            <d>Set an override sprite to be used for rendering. If set the override sprite is used instead of the regular image sprite.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Image.PreserveAspect">
            <summary>
            Preserve aspect ratio.
            </summary>
            <d>Indicates whether this image should preserve its Sprite aspect ratio.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Image.Sprite">
            <summary>
            Image sprite.
            </summary>
            <d>The sprite that will be rendered.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Image.Type">
            <summary>
            Image type.
            </summary>
            <d>Type of image sprite that is to be rendered.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Image.Material">
            <summary>
            Image material.
            </summary>
            <d>Image material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Image.Maskable">
            <summary>
            Indicates if the image is maskable.
            </summary>
            <d>Indicates if the image graphic is to be maskable.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Image.Color">
            <summary>
            Image color.
            </summary>
            <d>Image color.</d>
        </member>
        <member name="T:MarkLight.Views.UI.InputField">
            <summary>
            Input field.
            </summary>
            <d>Interactable input field enabling user to type single or multi-line text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.AsteriskChar">
            <summary>
            Character used for password fields.
            </summary>
            <d>The character used for password fields.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.CaretBlinkRate">
            <summary>
            Caret blinks per second.
            </summary>
            <d>The blinking rate of the input caret, defined as the number of times the blink cycle occurs per second.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.CaretColor">
            <summary>
            Caret color.
            </summary>
            <d>The custom caret color used if customCaretColor is set.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.CaretPosition">
            <summary>
            Current caret position.
            </summary>
            <d>Current InputField caret position (also selection tail).</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.CaretWidth">
            <summary>
            Caret width.
            </summary>
            <d>The width of the caret in pixels.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.CharacterLimit">
            <summary>
            Character limit.
            </summary>
            <d>How many characters the input field is limited to. 0 = infinite.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.CharacterValidation">
            <summary>
            Character input validation.
            </summary>
            <d>The type of validation to perform on the input.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.ContentType">
            <summary>
            Type of input content (standard, password, etc).
            </summary>
            <d>Type of input field content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.UseCustomCaretColor">
            <summary>
            Indicates if custom caret color should be used.
            </summary>
            <d>Boolean indicating if the custom caret color specified by CaretColor should be used.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.InputType">
            <summary>
            Type of input expected.
            </summary>
            <d>Enum indicating what type of input is expected.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.KeyboardType">
            <summary>
            Type of touch screen keyboard.
            </summary>
            <d>The type of touch screen keyboard that will be used.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.LineType">
            <summary>
            Input field line type.
            </summary>
            <d>Enum indicating line type of the input field.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.IsReadOnly">
            <summary>
            Indicates if input field is read-only.
            </summary>
            <d>Boolean indicating if input field is read-only.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.SelectionStart">
            <summary>
            Selection start position.
            </summary>
            <d>Selection start position.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.SelectionEnd">
            <summary>
            Selection end position.
            </summary>
            <d>Selection end position.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.SelectionColor">
            <summary>
            Selection color.
            </summary>
            <d>The color of the highlight showing which characters are selected.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.ShouldHideMobileInput">
            <summary>
            Indicates if mobile input should be hidden.
            </summary>
            <d>Boolean indicating if mobile input should be hidden.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.InputFieldComponent">
            <summary>
            Input field component.
            </summary>
            <d>Component used to receive and display user text input.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.Font">
            <summary>
            Input field text font.
            </summary>
            <d>The font of the input field label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.FontSize">
            <summary>
            Input field text font size.
            </summary>
            <d>The font size of the input field label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.LineSpacing">
            <summary>
            Input field text line spacing.
            </summary>
            <d>The line spacing of the input field label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.SupportRichText">
            <summary>
            Supports rich text.
            </summary>
            <d>Boolean indicating if the input field label supports rich text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.FontColor">
            <summary>
            Input field text font color.
            </summary>
            <d>The font color of the input field label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.FontStyle">
            <summary>
            Input field text font style.
            </summary>
            <d>The font style of the input field label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.TextMargin">
            <summary>
            Input field text margin.
            </summary>
            <d>The margin of the input field label. Can be used to adjust the text positioning.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.TextAlignment">
            <summary>
            Input field text alignment.
            </summary>
            <d>The alignment of the text inside the input field label. Can be used with TextMargin and TextOffset to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.TextOffset">
            <summary>
            Input field text offset.
            </summary>
            <d>The offset of the input field label. Can be used with TextMargin and TextAlignment to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.ShadowColor">
            <summary>
            Input field text shadow color.
            </summary>
            <d>The shadow color of the input field label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.ShadowDistance">
            <summary>
            Input field text shadow distance.
            </summary>
            <d>The distance of the input field label shadow.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.OutlineColor">
            <summary>
            Input field text outline color.
            </summary>
            <d>The outline color of the input field label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.OutlineDistance">
            <summary>
            Input field text outline distance.
            </summary>
            <d>The distance of the input field label outline.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.AdjustToText">
            <summary>
            Adjusts the input field to the text.
            </summary>
            <d>An enum indiciating how the input field should adjust its size to the label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.InputText">
            <summary>
            Label used to display user text input.
            </summary>
            <d>Label used to display user text input.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.Text">
            <summary>
            Input field text.
            </summary>
            <d>Text displayind in the input field. Set as text is typed or at the end of edit if SetValueOnEndEdit is set.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.SetValueOnEndEdit">
            <summary>
            Indicates if text value should be updated at end edit.
            </summary>
            <d>Boolean indicating if text value should be set at end edit rather than while text is being typed.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.OnlyTriggerValueChangedFromUI">
            <summary>
            Indicates that the value changed action is only to be triggered from changes made to the text in the UI.
            </summary>
            <b>Boolean indicate that the value changed action is only to be triggered from changes made to the text in the UI.</b>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.InputFieldPlaceholder">
            <summary>
            Region displayed when input field is empty.
            </summary>
            <d>Region that is displayed when the input field has no text input. Any child content of the input field is placed inside this region.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.EndEdit">
            <summary>
            Input field end edit.
            </summary>
            <d>Triggered when the user stops editing the input field.</d>
        </member>
        <member name="F:MarkLight.Views.UI.InputField.ValueChanged">
            <summary>
            Input field value changed.
            </summary>
            <d>Triggered when the input field text changes. Triggered once at end edit if SetValueOnEndEdit is set.</d>
        </member>
        <member name="M:MarkLight.Views.UI.InputField.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.InputField.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.InputField.TextChanged">
            <summary>
            Called when the text is changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.InputField.InputFieldEndEdit(System.String)">
            <summary>
            Called on input field end edit.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.InputField.InputFieldValueChanged(System.String)">
            <summary>
            Called when input field value has been updated.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.InputField.UpdatePlaceholder">
            <summary>
            Shows or hides placeholder based on text.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.InteractableRegion">
            <summary>
            Interactable region view.
            </summary>
            <d>Interactable region used to intercept and handle user interactions such as clicks and drags.</d>
        </member>
        <member name="M:MarkLight.Views.UI.InteractableRegion.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.Label">
            <summary>
            Label view.
            </summary>
            <d>Presents (read-only) text. Can adjust its size to text. Can display rich text with BBCode style syntax.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Label.Text">
            <summary>
            Label text.
            </summary>
            <d>The text of the label. The label can be set to adjust its size to the text through the AdjustToText field.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Label.Font">
            <summary>
            Label text font.
            </summary>
            <d>The font of the label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Label.FontSize">
            <summary>
            Label text font size.
            </summary>
            <d>The size of the label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Label.LineSpacing">
            <summary>
            Label text line spacing.
            </summary>
            <d>The line spacing of the label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Label.SupportRichText">
            <summary>
            Support rich text.
            </summary>
            <d>Boolean indicating if the label supports rich text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Label.FontColor">
            <summary>
            Label text font color.
            </summary>
            <d>The font color of the label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Label.FontStyle">
            <summary>
            Label text font style.
            </summary>
            <d>The font style of the label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Label.AlignByGeometry">
            <summary>
            Align by glyph geometry.
            </summary>
            <d>Boolean indicating if the extents of glyph geometry should be used to perform horizontal alignment rather than glyph metrics.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Label.ResizeTextForBestFit">
            <summary>
            Resize text for best fit.
            </summary>
            <d>Boolean indicating if the text is to be automatically resized to fill the size of the label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Label.ResizeTextMaxSize">
            <summary>
            Resize text max size.
            </summary>
            <d>If ResizeTextForBestFit is true this indicates the maximum size the text can be, 1 = infinity.</d>
        </member>
        <!-- Badly formed XML comment ignored for member "F:MarkLight.Views.UI.Label.ResizeTextMinSize" -->
        <!-- Badly formed XML comment ignored for member "F:MarkLight.Views.UI.Label.HorizontalOverflow" -->
        <!-- Badly formed XML comment ignored for member "F:MarkLight.Views.UI.Label.VerticalOverflow" -->
        <member name="F:MarkLight.Views.UI.Label.TextComponent">
            <summary>
            Unity UI component used to render text.
            </summary>
            <d>Unity UI component used to render text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Label.TextAlignment">
            <summary>
            Label text alignment.
            </summary>
            <d>The alignment of the text inside the label. Can be used with TextMargin and TextOffset to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Label.ShadowColor">
            <summary>
            Label text shadow color.
            </summary>
            <d>The shadow color of the label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Label.ShadowDistance">
            <summary>
            Label text shadow distance.
            </summary>
            <d>The distance of the label text shadow.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Label.OutlineColor">
            <summary>
            Label text outline color.
            </summary>
            <d>The outline color of the label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Label.OutlineDistance">
            <summary>
            Label text outline distance.
            </summary>
            <d>The distance of the label text outline.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Label.AdjustToText">
            <summary>
            Adjust label to text.
            </summary>
            <d>An enum indiciating how the label should adjust its size to the label text. By default the label does not adjust its size to the text.</d>
        </member>
        <member name="M:MarkLight.Views.UI.Label.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Label.TextChanged">
            <summary>
            Called when text changes.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Label.LayoutChanged">
            <summary>
            Called when a field affecting the layout of the view has changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Label.TextStyleChanged">
            <summary>
            Called when the text style has changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Label.BehaviorChanged">
            <summary>
            Called when a field affecting the behavior and visual appearance of the view has changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Label.AdjustLabelToText">
            <summary>
            Adjusts the label to text.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Label.ParseText(System.String)">
            <summary>
            Replaces BBCode style tags with unity rich text syntax and parses embedded views.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.Label.TextAnchor">
            <summary>
            Gets text anchor.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.Label.PreferredWidth">
            <summary>
            Preferred width of text.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.Label.PreferredHeight">
            <summary>
            Preferred height of text.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.List">
            <summary>
            List view.
            </summary>
            <d>The list view presents a selectable list of items. It can either contain a static list of ListItem views or one ListItem with IsTemplate="True". If bound to list data through the Items field the list uses the template to generate a dynamic list of ListItems.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.UseListMask">
            <summary>
            Indicates if a list mask is to be used.
            </summary>
            <d>Boolean indicating if a list mask is to be used.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.ListMaskWidth">
            <summary>
            The width of the list mask image.
            </summary>
            <d>Specifies the width of the list mask image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.ListMaskHeight">
            <summary>
            The height of the list mask image.
            </summary>
            <d>Specifies the height of the list mask image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.ListMaskOffset">
            <summary>
            The offset of the list mask image.
            </summary>
            <d>Specifies the offset of the list mask image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.ListMaskImage">
            <summary>
            List max image sprite.
            </summary>
            <d>The sprite that will be rendered as the list max.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.ListMaskImageType">
            <summary>
            List max image type.
            </summary>
            <d>The type of the image sprite that is to be rendered as the list max.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.ListMaskMaterial">
            <summary>
            List max image material.
            </summary>
            <d>The material of the list max image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.ListMaskColor">
            <summary>
            List max image color.
            </summary>
            <d>The color of the list max image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.ListMaskAlignment">
            <summary>
            List mask alignment.
            </summary>
            <d>Specifies the alignment of the list mask.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.ListMaskShowGraphic">
            <summary>
            Indicates if list mask should be rendered.
            </summary>
            <d>Indicates if the list mask, i.e. the list mask background image sprite and color should be rendered.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.ContentMargin">
            <summary>
            Content margin of the list.
            </summary>
            <d>Sets the margin of the list mask view that contains the contents of the list.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.ListMask">
            <summary>
            List mask.
            </summary>
            <d>The list mask can be used to mask the list and its items using a mask graphic.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HorizontalScrollbarOrientation">
            <summary>
            Orientation of the horizontal scrollbar.
            </summary>
            <d>Orientation of the horizontal scrollbar.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HorizontalScrollbarBreadth">
            <summary>
            Breadth of the horizontal scrollbar.
            </summary>
            <d>Breadth of the horizontal scrollbar.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HorizontalScrollbarScrollDirection">
            <summary>
            Scrollbar scroll direction.
            </summary>
            <d>Scrollbar scroll direction.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HorizontalScrollbarNumberOfSteps">
            <summary>
            Scroll steps.
            </summary>
            <d>The number of steps to use for the value. A value of 0 disables use of steps.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HorizontalScrollbarHandleSize">
            <summary>
            Handle size.
            </summary>
            <d> The size of the horizontal scrollbar handle where 1 means it fills the entire horizontal scrollbar.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HorizontalScrollbarValue">
            <summary>
            Scrollbar value.
            </summary>
            <d>The current value of the horizontal scrollbar, between 0 and 1.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HorizontalScrollbarImage">
            <summary>
            Horizontal scrollbar image.
            </summary>
            <d>Horizontal scrollbar image sprite.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HorizontalScrollbarImageType">
            <summary>
            Horizontal scrollbar image type.
            </summary>
            <d>Horizontal scrollbar image sprite type.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HorizontalScrollbarMaterial">
            <summary>
            Horizontal scrollbar image material.
            </summary>
            <d>Horizontal scrollbar image material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HorizontalScrollbarColor">
            <summary>
            Horizontal scrollbar image color.
            </summary>
            <d>Horizontal scrollbar image color.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HorizontalScrollbarHandleImage">
            <summary>
            Horizontal scrollbar handle image.
            </summary>
            <d>Horizontal scrollbar handle image sprite.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HorizontalScrollbarHandleImageType">
            <summary>
            Horizontal scrollbar handle image type.
            </summary>
            <d>Horizontal scrollbar handle image sprite type.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HorizontalScrollbarHandleMaterial">
            <summary>
            Horizontal scrollbar handle image material.
            </summary>
            <d>Horizontal scrollbar handle image material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HorizontalScrollbarHandleColor">
            <summary>
            Horizontal scrollbar handle image color.
            </summary>
            <d>Horizontal scrollbar handle image color.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VerticalScrollbarOrientation">
            <summary>
            Orientation of the vertical scrollbar.
            </summary>
            <d>Orientation of the vertical scrollbar.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VerticalScrollbarBreadth">
            <summary>
            Breadth of the vertical scrollbar.
            </summary>
            <d>Breadth of the vertical scrollbar.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VerticalScrollbarScrollDirection">
            <summary>
            Scrollbar scroll direction.
            </summary>
            <d>Scrollbar scroll direction.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VerticalScrollbarNumberOfSteps">
            <summary>
            Scroll steps.
            </summary>
            <d>The number of steps to use for the value. A value of 0 disables use of steps.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VerticalScrollbarHandleSize">
            <summary>
            Vertical scrollbar handle size.
            </summary>
            <d> The size of the vertical scrollbar handle where 1 means it fills the entire vertical scrollbar.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VerticalScrollbarValue">
            <summary>
            Scrollbar value.
            </summary>
            <d>The current value of the vertical scrollbar, between 0 and 1.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VerticalScrollbarImage">
            <summary>
            Vertical scrollbar image.
            </summary>
            <d>Vertical scrollbar image sprite.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VerticalScrollbarImageType">
            <summary>
            Vertical scrollbar image type.
            </summary>
            <d>Vertical scrollbar image sprite type.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VerticalScrollbarMaterial">
            <summary>
            Vertical scrollbar image material.
            </summary>
            <d>Vertical scrollbar image material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VerticalScrollbarColor">
            <summary>
            Vertical scrollbar image color.
            </summary>
            <d>Vertical scrollbar image color.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VerticalScrollbarHandleImage">
            <summary>
            Vertical scrollbar handle image.
            </summary>
            <d>Vertical scrollbar handle image sprite.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VerticalScrollbarHandleImageType">
            <summary>
            Vertical scrollbar handle image type.
            </summary>
            <d>Vertical scrollbar handle image sprite type.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VerticalScrollbarHandleMaterial">
            <summary>
            Vertical scrollbar handle image material.
            </summary>
            <d>Vertical scrollbar handle image material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VerticalScrollbarHandleColor">
            <summary>
            Vertical scrollbar handle image color.
            </summary>
            <d>Vertical scrollbar handle image color.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.CanScrollHorizontally">
            <summary>
            Indicates if the content can scroll horizontally.
            </summary>
            <d>Boolean indicating if the content can be scrolled horizontally.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.CanScrollVertically">
            <summary>
            Indicates if the content can scroll vertically.
            </summary>
            <d>Boolean indicating if the content can be scrolled vertically.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.DecelerationRate">
            <summary>
            Scroll deceleration rate.
            </summary>
            <d>Value indicating the rate of which the scroll stops moving.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.Elasticity">
            <summary>
            Scroll elasticity.
            </summary>
            <d>Value indicating how elastic the scrolling is when moved beyond the bounds of the scrollable content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HorizontalNormalizedPosition">
            <summary>
            Horizontal normalized position.
            </summary>
            <d>Value between 0-1 indicating the position of the scrollable content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HorizontalScrollbarSpacing">
            <summary>
            Space between scrollbar and scrollable content.
            </summary>
            <d>Space between scrollbar and scrollable content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HasInertia">
            <summary>
            Indicates if scroll has intertia.
            </summary>
            <d>Boolean indicating if the scroll has inertia.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.MovementType">
            <summary>
            Behavior when scrolled beyond bounds.
            </summary>
            <d>Enum specifying the behavior to use when the content moves beyond the scroll rect.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.NormalizedPosition">
            <summary>
            Normalized position of the scroll.
            </summary>
            <d>The scroll position as a Vector2 between (0,0) and (1,1) with (0,0) being the lower left corner.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.ScrollSensitivity">
            <summary>
            Scroll sensitivity.
            </summary>
            <d>Value indicating how sensitive the scrolling is to scroll wheel and track pad movement.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.ScrollVelocity">
            <summary>
            Current velocity of the content.
            </summary>
            <d>Indicates the current velocity of the scrolled content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VerticalNormalizedPosition">
            <summary>
            Vertical normalized position.
            </summary>
            <d>Value between 0-1 indicating the position of the scrollable content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VerticalScrollbarSpacing">
            <summary>
            Space between scrollbar and scrollable content.
            </summary>
            <d>Space between scrollbar and scrollable content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.DisableInteractionScrollDelta">
            <summary>
            Scroll delta distance for disabling interaction.
            </summary>
            <d>If set any interaction with child views (clicks, etc) is disabled when the specified distance has been scrolled. This is used e.g. to disable clicks while scrolling a selectable list of items.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.AddMaskMargin">
            <summary>
            Indicates if mask margin should be added.
            </summary>
            <d>Boolean indicating if margin should be added to the content mask to make room for the scrollbars.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HorizontalScrollbarVisibility">
            <summary>
            Horizontal scrollbar visibility of scrollable list content.
            </summary>
            <d>Horizontal scrollbar visibility of scrollable list content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VerticalScrollbarVisibility">
            <summary>
            Vertical scrollbar visibility of scrollable list content.
            </summary>
            <d>Vertical scrollbar visibility of scrollable list content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.ScrollableContentAlignment">
            <summary>
            Alignment of scrollable list content.
            </summary>
            <d>Sets the alignment of the scrollable list content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.AlternateItems">
            <summary>
            Indicates if the items should alternate in style.
            </summary>
            <d>Boolean indicating if the ListItem style should alternate between "Default" and "Alternate".</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.IsScrollable">
            <summary>
            Indicates if the list is scrollable.
            </summary>
            <d>Boolean indicating if the list is to be scrollable.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.ScrollContent">
            <summary>
            Scrollable region of the list that contains the list items.
            </summary>
            <d>Scrollable region of the list that contains the list items. Set to null if the list isn't scrollable.</d>
        </member>
        <!-- Badly formed XML comment ignored for member "F:MarkLight.Views.UI.List.ListPanel" -->
        <member name="F:MarkLight.Views.UI.List.Items">
            <summary>
            User-defined data list.
            </summary>
            <d>Can be bound to an generic ObservableList to dynamically generate ListItems based on a template.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.Orientation">
            <summary>
            Orientation of the list.
            </summary>
            <d>Defines how the list items should be arranged.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.DisableItemArrangement">
            <summary>
            Boolean indicating if list item arrangement should be disabled.
            </summary>
            <d>If set to true the list doesn't automatically arrange one item after another. Used when item arrangement is done elsewhere.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.IsItemSelected">
            <summary>
            Indicates if an item is selected.
            </summary>
            <d>Set to true when a list item is selected.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.CanDeselect">
            <summary>
            Indicates if items can be deselected by clicking.
            </summary>
            <d>A boolean indicating if items in the list can be deselected by clicking. Items can always be deselected programmatically.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.CanMultiSelect">
            <summary>
            Indicates if more than one list item can be selected.
            </summary>
            <d>A boolean indicating if more than one list items can be selected by clicking or programmatically.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.CanSelect">
            <summary>
            Indicates if items can be selected by clicking.
            </summary>
            <d>A boolean indicating if items can be selected by clicking. Items can always be selected programmatically.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.CanReselect">
            <summary>
            Indicates if item can be selected again if it's already selected.
            </summary>
            <d>Boolean indicating if the item can be selected again if it is already selected. This setting is ignored if CanDeselect is True.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.DeselectAfterSelect">
            <summary>
            Indicates if items are deselected immediately after being selected.
            </summary>
            <d>A boolean indicating if items are deselected immediately after being selected. Useful if you want to trigger selection action but don't want the item to remain selected.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.Overflow">
            <summary>
            Indicates how items overflow.
            </summary>
            <d>Enum indicating how items should overflow as they reach the boundaries of the list.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.Spacing">
            <summary>
            Spacing between list items.
            </summary>
            <d>The spacing between list items.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.HorizontalSpacing">
            <summary>
            Horizontal spacing between list items.
            </summary>
            <d>The horizontal spacing between list items.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VerticalSpacing">
            <summary>
            Vertical spacing between list items.
            </summary>
            <d>The vertical spacing between list items.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.ContentAlignment">
            <summary>
            The alignment of list items.
            </summary>
            <d>If the list items varies in size the content alignment specifies how the list items should be arranged in relation to each other.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.SortDirection">
            <summary>
            Sort direction.
            </summary>
            <d>If list items has SortIndex set they can be sorted in the direction specified.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.SelectOnMouseUp">
            <summary>
            Indicates if items are selected on mouse up.
            </summary>
            <d>Boolean indicating if items are selected on mouse up rather than mouse down (default).</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.ShowTemplateInEditor">
            <summary>
            Indicates if template is to be shown in the editor.
            </summary>
            <d>Boolean indicating if template should be shown in the editor.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.PoolSize">
            <summary>
            List item pool size.
            </summary>
            <d>Indicates how many list items should be pooled. Pooled items are already created and ready to be used rather than being created and destroyed on demand. Can be used to increase the performance of dynamic lists.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.MaxPoolSize">
            <summary>
            Max list item pool size.
            </summary>
            <d>Indicates maximum number of list items that should be pooled. If not set it uses initial PoolSize is used as max. Pooled items are already created and ready to be used rather than being created and destroyed on demand. Can be used to increase the performance of dynamic lists.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.UseVirtualization">
            <summary>
            Indicates if list should use virtualization.
            </summary>
            <d>Boolean indicating if list should use virtualization where only visible list items are presented in the visual hierarchy.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.RealizationMargin">
            <summary>
            Indicates how much margin should be added to the realization viewport.
            </summary>
            <d>Boolean indicating how much margin should be added to the realization viewport. If zero the realization viewport will be the same size as the scrollable viewport. Used when UseVirtualization is True.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.VirtualizationUpdateThreshold">
            <summary>
            Indicates how many pixels should be scrolled before virtualization updates.
            </summary>
            <d>Boolean indicating how many pixels should be scrolled before virtualization updates.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.Padding">
            <summary>
            List item padding.
            </summary>
            <d>Adds padding to the list.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.SelectedItem">
            <summary>
            Selected data list item.
            </summary>
            <d>Set when the selected list item changes and points to the user-defined data item.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.SelectedItems">
            <summary>
            Selected items in the data list.
            </summary>
            <d>Contains selected items in the user-defined list data. Can contain more than one item if IsMultiSelect is true.</d>
        </member>
        <member name="F:MarkLight.Views.UI.List.ItemSelected">
            <summary>
            Item selected view action.
            </summary>
            <d>Triggered when a list item is selected either by user interaction or programmatically.</d>
            <actionData>ItemSelectionActionData</actionData>
        </member>
        <member name="F:MarkLight.Views.UI.List.ItemDeselected">
            <summary>
            Item deselected view action.
            </summary>
            <d>Triggered when a list item is deselected either by user interaction or programmatically. An item is deselected if another item is selected and CanMultiSelect is false. If CanMultiSelect is true an item is deselected when the user clicks on an selected item.</d>
            <actionData>ItemSelectionActionData</actionData>
        </member>
        <member name="F:MarkLight.Views.UI.List.ListChanged">
            <summary>
            List changed view action.
            </summary>
            <d>Triggered when the list changes (items added, removed or moved).</d>
            <actionData>ListChangedActionData</actionData>
        </member>
        <member name="M:MarkLight.Views.UI.List.Update">
            <summary>
            Checks if ActualWidth changes and updates the layout.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.ChildLayoutChanged">
            <summary>
            Called when a child layout has been updated.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.UpdateVirtualizedItems">
            <summary>
            Called whenever the list is scrolled or items are added, removed or rearranged.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.LayoutChanged">
            <summary>
            Updates the layout of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.GetActiveListItems">
            <summary>
            Gets all list items (realized and virtualized) that are active in the list.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.AdjustScrollableLayout">
            <summary>
            Adjusts scrollable layout.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.SelectedItemChanged">
            <summary>
            Called when the selected item of the list has been changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.SelectItem(MarkLight.Views.UI.ListItem,System.Boolean)">
            <summary>
            Selects item in the list.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.SelectItem(System.Int32)">
            <summary>
            Selects item in the list.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.SelectItem(System.Object)">
            <summary>
            Selects item in the list.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.SetSelected(MarkLight.Views.UI.ListItem,System.Boolean)">
            <summary>
            Selects or deselects a list item.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.ItemsChanged">
            <summary>
            Called when the list of items has been changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.OnListChanged(System.Object,MarkLight.ListChangedEventArgs)">
            <summary>
            Called when the list of items has been changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.ScrollTo(System.Int32,System.Nullable{MarkLight.ElementAlignment},MarkLight.ElementMargin)">
            <summary>
            Scrolls to item at index.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.UpdateSortIndex">
            <summary>
            Updates the sort index on the list items.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.Rebuild">
            <summary>
            Rebuilds the entire list.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.Clear">
            <summary>
            Clears the list items.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.AddRange(System.Int32,System.Int32)">
            <summary>
            Adds a range of list items.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of list items.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.ItemsModified(System.Int32,System.Int32,System.String)">
            <summary>
            Called when item data in the list have been modified.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.ItemModified(System.Int32,System.String)">
            <summary>
            Called when item data in list has been modified.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.ItemsReplaced(System.Int32,System.Int32)">
            <summary>
            Called when item data in the list have been replaced.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.ItemReplaced(System.Int32)">
            <summary>
            Called when item data in list has been replaced.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.CreateListItem(System.Int32)">
            <summary>
            Creates and initializes a new list item.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.GetListItemTemplate(System.Object)">
            <summary>
            Gets template based on item data.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.DestroyListItem(System.Int32)">
            <summary>
            Destroys a list item.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.DestroyListItem(MarkLight.Views.UI.ListItem)">
            <summary>
            Destroys a list item.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.GetVirtualizedItems">
            <summary>
            Creates a container for virtualized items which will be presented on demand. Used to improve performance.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.InitializeVirtualization">
            <summary>
            Called once at initialization to set the list up for virtualization.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.List.UpdatePresentedListItems">
            <summary>
            Updates list of presented list items. Needs to be called after list items are added manually to the list.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.List.ListItemTemplates">
            <summary>
            Returns list item template.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.List.PresentedListItems">
            <summary>
            Returns list of presented list items.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.ListItem">
            <summary>
            List item view.
            </summary>
            <d>Displays a selectable list item. Has the states: Default, Disabled, Highlighted, Pressed and Selected.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.Text">
            <summary>
            List item text.
            </summary>
            <d>The text of the list item label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.Font">
            <summary>
            List item text font.
            </summary>
            <d>The font of the list item label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.FontSize">
            <summary>
            List item text font size.
            </summary>
            <d>The font size of the list item label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.LineSpacing">
            <summary>
            List item text line spacing.
            </summary>
            <d>The line spacing of the list item label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.SupportRichText">
            <summary>
            Supports rich text.
            </summary>
            <d>Boolean indicating if the list item label supports rich text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.FontColor">
            <summary>
            List item text font color.
            </summary>
            <d>The font color of the list item label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.FontStyle">
            <summary>
            List item text font style.
            </summary>
            <d>The font style of the list item label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.TextMargin">
            <summary>
            List item text margin.
            </summary>
            <d>The margin of the list item label. Can be used to adjust the text positioning.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.TextAlignment">
            <summary>
            List item text alignment.
            </summary>
            <d>The alignment of the text inside the list item label. Can be used with TextMargin and TextOffset to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.TextOffset">
            <summary>
            List item text offset.
            </summary>
            <d>The offset of the list item label. Can be used with TextMargin and TextAlignment to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.ShadowColor">
            <summary>
            List item text shadow color.
            </summary>
            <d>The shadow color of the list item label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.ShadowDistance">
            <summary>
            List item text shadow distance.
            </summary>
            <d>The distance of the list item label shadow.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.OutlineColor">
            <summary>
            List item text outline color.
            </summary>
            <d>The outline color of the list item label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.OutlineDistance">
            <summary>
            List item text outline distance.
            </summary>
            <d>The distance of the list item label outline.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.AdjustToText">
            <summary>
            Adjusts the list item to the text.
            </summary>
            <d>An enum indiciating how the list item should adjust its size to the label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.ItemLabel">
            <summary>
            The list item label.
            </summary>
            <d>The list item label displays text next to the list item.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.IsDisabled">
            <summary>
            Indicates if the item is disabled.
            </summary>
            <d>If set to true the item enters the "Disabled" state and can't be interacted with.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.IsAlternate">
            <summary>
            Indicates if this item is an alternate item.
            </summary>
            <d>Boolean indicating if the tiem is an alternate item which uses the "Alternate" state instead of the "Default" state.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.TextPadding">
            <summary>
            List item text padding.
            </summary>
            <d>Padding added to list item text when AdjustToText is set.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.Length">
            <summary>
            List item length.
            </summary>
            <d>Specifies the list item length. Used as the default item width when Width isn't set.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.Breadth">
            <summary>
            List item breadth.
            </summary>
            <d>Specifies the list item breadth. Used as the default item height when Height isn't set.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.PoolSize">
            <summary>
            List item pool size.
            </summary>
            <d>Indicates how many list items should be pooled. Pooled items are already created and ready to be used rather than being created and destroyed on demand. Can be used to increase the performance of dynamic lists.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.MaxPoolSize">
            <summary>
            Max list item pool size.
            </summary>
            <d>Indicates maximum number of list items that should be pooled. If not set it uses initial PoolSize is used as max. Pooled items are already created and ready to be used rather than being created and destroyed on demand. Can be used to increase the performance of dynamic lists.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.Template">
            <summary>
            Template used to create view.
            </summary>
            <d>Reference to the template used to create the view. Used to identify the list item type.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ListItem.ParentList">
            <summary>
            Parent list.
            </summary>
            <d>The list that created this list item.</d>
        </member>
        <member name="M:MarkLight.Views.UI.ListItem.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ListItem.Initialize">
            <summary>
            Initializes the list item.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ListItem.LayoutChanged">
            <summary>
            Called when the layout of the view has been changed. 
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ListItem.TextChanged">
            <summary>
            Called when the item text has been changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ListItem.ListItemMouseClick">
            <summary>
            Called when mouse is clicked.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ListItem.ListItemMouseEnter">
            <summary>
            Called when mouse enters.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ListItem.ListItemMouseExit">
            <summary>
            Called when mouse exits.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ListItem.ListItemMouseDown">
            <summary>
            Called when mouse down.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ListItem.ListItemMouseUp">
            <summary>
            Called when mouse up.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ListItem.IsSelectedChanged">
            <summary>
            Called when the IsSelected field changes.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ListItem.IsDisabledChanged">
            <summary>
            Called when IsDisabled field changes.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ListItem.IsAlternateChanged">
            <summary>
            Called when IsAlternate changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ListItem.SetState(System.String)">
            <summary>
            Sets the state of the view.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.ListItem.DefaultItemStyle">
            <summary>
            Returns default item style.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.Mask">
            <summary>
            Mask view.
            </summary>
            <d>A view that masks any content using the background image and color as mask.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Mask.ShowMaskGraphic">
            <summary>
            Indicates if mask should be rendered.
            </summary>
            <d>Indicates if the mask, i.e. Background image sprite and color should be rendered.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Mask.MaskComponent">
            <summary>
            A component for masking child elements.
            </summary>
            <d>The mask components mask the child elements using the BackgroundImage sprite and color.</d>
        </member>
        <member name="M:MarkLight.Views.UI.Mask.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Mask.BackgroundChanged">
            <summary>
            Called when fields affecting the background image/color of the view are changed.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.Panel">
            <summary>
            Panel view.
            </summary>
            <d>Presents scrollable content. Content can be aligned using the ContentAlignment field.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HorizontalScrollbarOrientation">
            <summary>
            Orientation of the horizontal scrollbar.
            </summary>
            <d>Orientation of the horizontal scrollbar.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HorizontalScrollbarBreadth">
            <summary>
            Breadth of the horizontal scrollbar.
            </summary>
            <d>Breadth of the horizontal scrollbar.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HorizontalScrollbarScrollDirection">
            <summary>
            Scrollbar scroll direction.
            </summary>
            <d>Scrollbar scroll direction.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HorizontalScrollbarNumberOfSteps">
            <summary>
            Scroll steps.
            </summary>
            <d>The number of steps to use for the value. A value of 0 disables use of steps.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HorizontalScrollbarHandleSize">
            <summary>
            Handle size.
            </summary>
            <d> The size of the horizontal scrollbar handle where 1 means it fills the entire horizontal scrollbar.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HorizontalScrollbarValue">
            <summary>
            Scrollbar value.
            </summary>
            <d>The current value of the horizontal scrollbar, between 0 and 1.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HorizontalScrollbarImage">
            <summary>
            Horizontal scrollbar image.
            </summary>
            <d>Horizontal scrollbar image sprite.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HorizontalScrollbarImageType">
            <summary>
            Horizontal scrollbar image type.
            </summary>
            <d>Horizontal scrollbar image sprite type.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HorizontalScrollbarMaterial">
            <summary>
            Horizontal scrollbar image material.
            </summary>
            <d>Horizontal scrollbar image material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HorizontalScrollbarColor">
            <summary>
            Horizontal scrollbar image color.
            </summary>
            <d>Horizontal scrollbar image color.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HorizontalScrollbarHandleImage">
            <summary>
            Horizontal scrollbar handle image.
            </summary>
            <d>Horizontal scrollbar handle image sprite.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HorizontalScrollbarHandleImageType">
            <summary>
            Horizontal scrollbar handle image type.
            </summary>
            <d>Horizontal scrollbar handle image sprite type.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HorizontalScrollbarHandleMaterial">
            <summary>
            Horizontal scrollbar handle image material.
            </summary>
            <d>Horizontal scrollbar handle image material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HorizontalScrollbarHandleColor">
            <summary>
            Horizontal scrollbar handle image color.
            </summary>
            <d>Horizontal scrollbar handle image color.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HorizontalScrollbar">
            <summary>
            Horizontal scrollbar.
            </summary>
            <d>Horizontal scrollbar.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.VerticalScrollbarOrientation">
            <summary>
            Orientation of the vertical scrollbar.
            </summary>
            <d>Orientation of the vertical scrollbar.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.VerticalScrollbarBreadth">
            <summary>
            Breadth of the vertical scrollbar.
            </summary>
            <d>Breadth of the vertical scrollbar.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.VerticalScrollbarScrollDirection">
            <summary>
            Scrollbar scroll direction.
            </summary>
            <d>Scrollbar scroll direction.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.VerticalScrollbarNumberOfSteps">
            <summary>
            Scroll steps.
            </summary>
            <d>The number of steps to use for the value. A value of 0 disables use of steps.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.VerticalScrollbarHandleSize">
            <summary>
            Vertical scrollbar handle size.
            </summary>
            <d> The size of the vertical scrollbar handle where 1 means it fills the entire vertical scrollbar.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.VerticalScrollbarValue">
            <summary>
            Scrollbar value.
            </summary>
            <d>The current value of the vertical scrollbar, between 0 and 1.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.VerticalScrollbarImage">
            <summary>
            Vertical scrollbar image.
            </summary>
            <d>Vertical scrollbar image sprite.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.VerticalScrollbarImageType">
            <summary>
            Vertical scrollbar image type.
            </summary>
            <d>Vertical scrollbar image sprite type.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.VerticalScrollbarMaterial">
            <summary>
            Vertical scrollbar image material.
            </summary>
            <d>Vertical scrollbar image material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.VerticalScrollbarColor">
            <summary>
            Vertical scrollbar image color.
            </summary>
            <d>Vertical scrollbar image color.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.VerticalScrollbarHandleImage">
            <summary>
            Vertical scrollbar handle image.
            </summary>
            <d>Vertical scrollbar handle image sprite.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.VerticalScrollbarHandleImageType">
            <summary>
            Vertical scrollbar handle image type.
            </summary>
            <d>Vertical scrollbar handle image sprite type.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.VerticalScrollbarHandleMaterial">
            <summary>
            Vertical scrollbar handle image material.
            </summary>
            <d>Vertical scrollbar handle image material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.VerticalScrollbarHandleColor">
            <summary>
            Vertical scrollbar handle image color.
            </summary>
            <d>Vertical scrollbar handle image color.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.VerticalScrollbar">
            <summary>
            Vertical scrollbar.
            </summary>
            <d>Vertical scrollbar.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.CanScrollHorizontally">
            <summary>
            Indicates if the content can scroll horizontally.
            </summary>
            <d>Boolean indicating if the content can be scrolled horizontally.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.CanScrollVertically">
            <summary>
            Indicates if the content can scroll vertically.
            </summary>
            <d>Boolean indicating if the content can be scrolled vertically.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.DecelerationRate">
            <summary>
            Scroll deceleration rate.
            </summary>
            <d>Value indicating the rate of which the scroll stops moving.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.Elasticity">
            <summary>
            Scroll elasticity.
            </summary>
            <d>Value indicating how elastic the scrolling is when moved beyond the bounds of the scrollable content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HorizontalNormalizedPosition">
            <summary>
            Horizontal normalized position.
            </summary>
            <d>Value between 0-1 indicating the position of the scrollable content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HorizontalScrollbarSpacing">
            <summary>
            Space between scrollbar and scrollable content.
            </summary>
            <d>Space between scrollbar and scrollable content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HasInertia">
            <summary>
            Indicates if scroll has intertia.
            </summary>
            <d>Boolean indicating if the scroll has inertia.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.MovementType">
            <summary>
            Behavior when scrolled beyond bounds.
            </summary>
            <d>Enum specifying the behavior to use when the content moves beyond the scroll rect.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.NormalizedPosition">
            <summary>
            Normalized position of the scroll.
            </summary>
            <d>The scroll position as a Vector2 between (0,0) and (1,1) with (0,0) being the lower left corner.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.ScrollSensitivity">
            <summary>
            Scroll sensitivity.
            </summary>
            <d>Value indicating how sensitive the scrolling is to scroll wheel and track pad movement.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.ScrollVelocity">
            <summary>
            Current velocity of the content.
            </summary>
            <d>Indicates the current velocity of the scrolled content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.VerticalNormalizedPosition">
            <summary>
            Vertical normalized position.
            </summary>
            <d>Value between 0-1 indicating the position of the scrollable content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.VerticalScrollbarSpacing">
            <summary>
            Space between scrollbar and scrollable content.
            </summary>
            <d>Space between scrollbar and scrollable content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.DisableInteractionScrollDelta">
            <summary>
            Scroll delta distance for disabling interaction.
            </summary>
            <d>If set any interaction with child views (clicks, etc) is disabled when the specified distance has been scrolled. This is used e.g. to disable clicks while scrolling a selectable list of items.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.Viewport">
            <summary>
            Scrollable viewport.
            </summary>
            <d>References the RectTransform parent to the content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.ContentAlignment">
            <summary>
            Panel content alignment.
            </summary>
            <d>Panel content alignment. Also controls the initial position of the scrollbars.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.ScrollRect">
            <summary>
            Scrollable content.
            </summary>
            <d>Contains the panel's scrollable content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.HorizontalScrollbarVisibility">
            <summary>
            Indicates how the horizontal scrollbar should be shown.
            </summary>
            <d>Enum indicating how the horizontal scrollbar should be shown.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.VerticalScrollbarVisibility">
            <summary>
            Indicates how the vertical scrollbar should be shown.
            </summary>
            <d>Enum indicating how the vertical scrollbar should be shown.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.AddMaskMargin">
            <summary>
            Indicates if mask margin should be added.
            </summary>
            <d>Boolean indicating if margin should be added to the content mask to make room for the scrollbars.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Panel.ScrollbarMask">
            <summary>
            Mask containing the panel content.
            </summary>
            <d>Mask containing the panel content but not the scrollbars.</d>
        </member>
        <member name="M:MarkLight.Views.UI.Panel.SetDefaultValues">
            <summary>
            Sets default values of the view
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Panel.ScrollbarVisibilityChanged">
            <summary>
            Called when the behavior of the view has been changed.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.RadialMenu">
            <summary>
            RadialMenu view.
            </summary>
            <d>Arranges content in a circle. Can be opened/closed with optional animation. Radius and angles can be adjusted.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadialMenu.Radius">
            <summary>
            Radius of the menu.
            </summary>
            <d>Value determined the radial distance of the content from the center.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadialMenu.StartAngle">
            <summary>
            Start angle.
            </summary>
            <d>The start angle of the radial menu.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadialMenu.EndAngle">
            <summary>
            End angle.
            </summary>
            <d>The end angle of the radial menu.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadialMenu.AnimationDuration">
            <summary>
            Animation duration.
            </summary>
            <d>The open/close animation duration.</d>
        </member>
        <member name="M:MarkLight.Views.UI.RadialMenu.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadialMenu.Update">
            <summary>
            Updates view field animators.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadialMenu.Toggle(System.Boolean)">
            <summary>
            Toggles radial menu.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadialMenu.ToggleAt(UnityEngine.Vector2,System.Boolean)">
            <summary>
            Toggles radial menu.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadialMenu.OpenAt(UnityEngine.Vector2,System.Boolean)">
            <summary>
            Opens radial menu at position.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadialMenu.Open(System.Boolean)">
            <summary>
            Opens the radial menu.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadialMenu.Close(System.Boolean)">
            <summary>
            Closes the radial menu.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadialMenu.ActivateMenuItem(System.String)">
            <summary>
            Activates a view within the radial menu.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadialMenu.ActivateMenuItem(System.Int32)">
            <summary>
            Activates a view within the radial menu.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadialMenu.ActivateMenuItem(MarkLight.Views.UI.UIView)">
            <summary>
            Activates a view within the radial menu.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadialMenu.DeactivateMenuItem(System.String)">
            <summary>
            Deactivates a view within the radial menu.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadialMenu.DeactivateMenuItem(System.Int32)">
            <summary>
            Deactivates a view within the radial menu.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadialMenu.DeactivateMenuItem(MarkLight.Views.UI.UIView)">
            <summary>
            Deactivates a view within the radial menu.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadialMenu.UpdateMenu">
            <summary>
            Updates menu views and offset animators.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadialMenu.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.RadioButton">
            <summary>
            RadioButton view.
            </summary>
            <d>Presents a one-of-many selection option. If multiple radio buttons shares the same parent only one is selected at a time.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.IsChecked">
            <summary>
            Indicates if the radio button is checked.
            </summary>
            <d>If true the radio button changes state from Default to Checked.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.IsDisabled">
            <summary>
            Indicates if the radio button is disabled.
            </summary>
            <d>If true the radio button changes state from Default to Disabled and no longer responds to user interaction.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.Spacing">
            <summary>
            Radio button group spacing.
            </summary>
            <d>Spacing between the radio button image and text label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.RadioButtonGroup">
            <summary>
            Group containing the radio button image and label.
            </summary>
            <d>The the radio button group arranges the radio button image and text label horizontally.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.RadioButtonImage">
            <summary>
            Radio button image sprite.
            </summary>
            <d>The sprite that will be rendered as the radio button.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.RadioButtonImageType">
            <summary>
            Radio button image type.
            </summary>
            <d>The type of the image sprite that is to be rendered as the radio button.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.RadioButtonMaterial">
            <summary>
            Radio button image material.
            </summary>
            <d>The material of the radio button image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.RadioButtonColor">
            <summary>
            Radio button image color.
            </summary>
            <d>The color of the radio button image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.RadioButtonWidth">
            <summary>
            Radio button image width.
            </summary>
            <d>Specifies the width of the radio button image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.RadioButtonHeight">
            <summary>
            Radio button image height.
            </summary>
            <d>Specifies the height of the radio button image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.RadioButtonOffset">
            <summary>
            Radio button image offset.
            </summary>
            <d>Specifies the offset of the radio button image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.RadioButtonImageView">
            <summary>
            Image displaying the radio button.
            </summary>
            <d>Image view that displays the radio button. Different images are presented when the radio button changes state between Default and Checked.</d>        
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.Text">
            <summary>
            Radio button text.
            </summary>
            <d>The text of the radio button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.Font">
            <summary>
            Radio button text font.
            </summary>
            <d>The font of the radio button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.FontSize">
            <summary>
            Radio button text font size.
            </summary>
            <d>The font size of the radio button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.LineSpacing">
            <summary>
            Radio button text line spacing.
            </summary>
            <d>The line spacing of the radio button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.SupportRichText">
            <summary>
            Supports rich text.
            </summary>
            <d>Boolean indicating if the radio button label supports rich text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.FontColor">
            <summary>
            Radio button text font color.
            </summary>
            <d>The font color of the radio button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.FontStyle">
            <summary>
            Radio button text font style.
            </summary>
            <d>The font style of the radio button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.TextMargin">
            <summary>
            Radio button text margin.
            </summary>
            <d>The margin of the radio button label. Can be used to adjust the text positioning.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.TextAlignment">
            <summary>
            Radio button text alignment.
            </summary>
            <d>The alignment of the text inside the radio button label. Can be used with TextMargin and TextOffset to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.TextOffset">
            <summary>
            Radio button text offset.
            </summary>
            <d>The offset of the radio button label. Can be used with TextMargin and TextAlignment to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.ShadowColor">
            <summary>
            Radio button text shadow color.
            </summary>
            <d>The shadow color of the radio button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.ShadowDistance">
            <summary>
            Radio button text shadow distance.
            </summary>
            <d>The distance of the radio button label shadow.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.OutlineColor">
            <summary>
            Radio button text outline color.
            </summary>
            <d>The outline color of the radio button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.OutlineDistance">
            <summary>
            Radio button text outline distance.
            </summary>
            <d>The distance of the radio button label outline.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.AdjustToText">
            <summary>
            Adjusts the radio button to the text.
            </summary>
            <d>An enum indiciating how the radio button should adjust its size to the label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.RadioButton.RadioButtonLabel">
            <summary>
            The radio button label.
            </summary>
            <d>The radio button label displays text next to the radio button.</d>
        </member>
        <member name="M:MarkLight.Views.UI.RadioButton.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadioButton.ChildLayoutChanged">
            <summary>
            Called when a child layout has been updated.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadioButton.LayoutChanged">
            <summary>
            Called when a field affecting the layout of the view has changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadioButton.IsCheckedChanged">
            <summary>
            Called when the field IsChecked is changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadioButton.IsDisabledChanged">
            <summary>
            Called when IsDisabled field changes.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.RadioButton.RadioButtonClick">
            <summary>
            Called when radio button is clicked.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.Region">
            <summary>
            Region view.
            </summary>
            <d>View used primarily to section off a region of space in order to spacially arrange child views.</d>
        </member>
        <member name="T:MarkLight.Views.UI.Row">
            <summary>
            Row view.
            </summary>
            <d>The row view displays the content of a row in the data grid.</d>
        </member>
        <member name="M:MarkLight.Views.UI.Row.LayoutChanged">
            <summary>
            Called when the layout of the view has changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Row.SetState(System.String)">
            <summary>
            Sets the state of the view.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.Row.ParentDataGrid">
            <summary>
            Gets parent datagrid.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.RowHeader">
            <summary>
            RowHeader view.
            </summary>
            <d>The row header view displays the content of a header row in the data grid.</d>
        </member>
        <member name="M:MarkLight.Views.UI.RowHeader.LayoutChanged">
            <summary>
            Called when the layout of the view has changed.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.RowHeader.ParentDataGrid">
            <summary>
            Gets parent datagrid.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.ScrollRect">
            <summary>
            ScrollRect view.
            </summary>
            <d>Displays scrollable content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.CanScrollHorizontally">
            <summary>
            Indicates if the content can scroll horizontally.
            </summary>
            <d>Boolean indicating if the content can be scrolled horizontally.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.CanScrollVertically">
            <summary>
            Indicates if the content can scroll vertically.
            </summary>
            <d>Boolean indicating if the content can be scrolled vertically.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.DecelerationRate">
            <summary>
            Scroll deceleration rate.
            </summary>
            <d>Value indicating the rate of which the scroll stops moving.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.Elasticity">
            <summary>
            Scroll elasticity.
            </summary>
            <d>Value indicating how elastic the scrolling is when moved beyond the bounds of the scrollable content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.HorizontalNormalizedPosition">
            <summary>
            Horizontal normalized position.
            </summary>
            <d>Value between 0-1 indicating the position of the scrollable content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.HorizontalScrollbar">
            <summary>
            Horizontal scrollbar component.
            </summary>
            <d>Optional scrollbar component linked to the horizontal scrolling of the content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.HorizontalScrollbarSpacing">
            <summary>
            Space between scrollbar and scrollable content.
            </summary>
            <d>Space between scrollbar and scrollable content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.HorizontalScrollbarVisibility">
            <summary>
            Indicates horizontal scrollbar visiblity mode.
            </summary>
            <d>Indicates horizontal scrollbar visiblity mode.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.HasInertia">
            <summary>
            Indicates if scroll has intertia.
            </summary>
            <d>Boolean indicating if the scroll has inertia.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.MovementType">
            <summary>
            Behavior when scrolled beyond bounds.
            </summary>
            <d>Enum specifying the behavior to use when the content moves beyond the scroll rect.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.NormalizedPosition">
            <summary>
            Normalized position of the scroll.
            </summary>
            <d>The scroll position as a Vector2 between (0,0) and (1,1) with (0,0) being the lower left corner.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.ScrollContent">
            <summary>
            Scrollable content.
            </summary>
            <d>The content that can be scrolled. It should be a child of the GameObject with ScrollRect on it.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.ScrollSensitivity">
            <summary>
            Scroll sensitivity.
            </summary>
            <d>Value indicating how sensitive the scrolling is to scroll wheel and track pad movement.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.ScrollVelocity">
            <summary>
            Current velocity of the content.
            </summary>
            <d>Indicates the current velocity of the scrolled content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.VerticalNormalizedPosition">
            <summary>
            Vertical normalized position.
            </summary>
            <d>Value between 0-1 indicating the position of the scrollable content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.VerticalScrollbar">
            <summary>
            Vertical scrollbar component.
            </summary>
            <d>Optional scrollbar component linked to the vertical scrolling of the content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.VerticalScrollbarSpacing">
            <summary>
            Space between scrollbar and scrollable content.
            </summary>
            <d>Space between scrollbar and scrollable content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.VerticalScrollbarVisibility">
            <summary>
            Indicates vertical scrollbar visiblity mode.
            </summary>
            <d>Indicates vertical scrollbar visiblity mode.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.DisableInteractionScrollDelta">
            <summary>
            Scroll delta distance for disabling interaction.
            </summary>
            <d>If set any interaction with child views (clicks, etc) is disabled when the specified amount of pixels has been scrolled. This is used e.g. to disable clicks while scrolling a selectable list of items.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.Viewport">
            <summary>
            Scrollable viewport.
            </summary>
            <d>References the RectTransform parent to the content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.ContentAlignment">
            <summary>
            Scrollable content alignment.
            </summary>
            <d>Scrollable content alignment. Also controls the initial position of the scrollbars.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.UpdateNormalizedPosition">
            <summary>
            Indicates if normalized position should be updated from NormalizedPosition field.
            </summary>
            <d>When NormalizedPosition is changed from the outside UpdateNormalizedPosition is set to true so that the scroll rect updates from the field instead of the other way around.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ScrollRect.ScrollRectComponent">
            <summary>
            ScrollRect component.
            </summary>
            <d>Component responsible for handling scrollable content.</d>
        </member>
        <member name="M:MarkLight.Views.UI.ScrollRect.SetDefaultValues">
            <summary>
            Sets default values of the view
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ScrollRect.ChildrenChanged">
            <summary>
            Called when a child view has been added or removed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ScrollRect.LayoutChanged">
            <summary>
            Called when the layout of the view has been changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ScrollRect.Update">
            <summary>
            Called each frame and updates the scroll rect.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ScrollRect.NormalizedPositionChanged">
            <summary>
            Called when the normalized position of the scroll rect has changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ScrollRect.UnblockDragEvents">
            <summary>
            Workaround for draggable child views blocking drag events.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ScrollRect.UnblockDragEvents(MarkLight.View)">
            <summary>
            Unblocks drag events on view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ScrollRect.ScrollRectEndDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called on scroll rect drag end.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ScrollRect.ScrollRectDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called on scroll rect drag.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.Scrollbar">
            <summary>
            Scrollbar view.
            </summary>
            <d>A scrollbar with a draggable handle.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Scrollbar.Orientation">
            <summary>
            Orientation of the scrollbar.
            </summary>
            <d>Orientation of the scrollbar.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Scrollbar.Breadth">
            <summary>
            Breadth of the scrollbar.
            </summary>
            <d>Breadth of the scrollbar.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Scrollbar.ScrollDirection">
            <summary>
            Scrollbar scroll direction.
            </summary>
            <d>Scrollbar scroll direction.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Scrollbar.NumberOfSteps">
            <summary>
            Scroll steps.
            </summary>
            <d>The number of steps to use for the value. A value of 0 disables use of steps.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Scrollbar.HandleSize">
            <summary>
            Handle size.
            </summary>
            <d> The size of the scrollbar handle where 1 means it fills the entire scrollbar.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Scrollbar.Value">
            <summary>
            Scrollbar value.
            </summary>
            <d>The current value of the scrollbar, between 0 and 1.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Scrollbar.ScrollbarComponent">
            <summary>
            Scrollbar component.
            </summary>
            <d>Manages a scrollbar and handle.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Scrollbar.HandleImage">
            <summary>
            Handle image.
            </summary>
            <d>Handle image sprite.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Scrollbar.HandleImageType">
            <summary>
            Handle image type.
            </summary>
            <d>Handle image sprite type.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Scrollbar.HandleMaterial">
            <summary>
            Handle image material.
            </summary>
            <d>Handle image material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Scrollbar.HandleColor">
            <summary>
            Handle image color.
            </summary>
            <d>Handle image color.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Scrollbar.Handle">
            <summary>
            Handle image.
            </summary>
            <d>Image used to display scrollbar handle.</d>
        </member>
        <member name="M:MarkLight.Views.UI.Scrollbar.SetDefaultValues">
            <summary>
            Sets default values of the view
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Scrollbar.LayoutChanged">
            <summary>
            Called when the layout of the view has been changed.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.Slider">
            <summary>
            Slider view.
            </summary>
            <d>Slider with a handle that can be moved with the mouse. Can be oriented horizontally or vertically.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderBackgroundImage">
            <summary>
            Slider image sprite.
            </summary>
            <d>The sprite that will be rendered as the slider.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderBackgroundImageType">
            <summary>
            Slider image type.
            </summary>
            <d>The type of the image sprite that is to be rendered as the slider.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderBackgroundMaterial">
            <summary>
            Slider image material.
            </summary>
            <d>The material of the slider image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderBackgroundColor">
            <summary>
            Slider image color.
            </summary>
            <d>The color of the slider image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderBackgroundImageView">
            <summary>
            Slider background image.
            </summary>
            <d>Presents the slider background image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderFillImage">
            <summary>
            Slider fill image sprite.
            </summary>
            <d>The sprite that will be rendered as the slider fill.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderFillImageType">
            <summary>
            Slider fill image type.
            </summary>
            <d>The type of the image sprite that is to be rendered as the slider fill.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderFillMaterial">
            <summary>
            Slider fill image material.
            </summary>
            <d>The material of the slider fill image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderFillColor">
            <summary>
            Slider fill image color.
            </summary>
            <d>The color of the slider fill image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderFillImageView">
            <summary>
            Slider fill image.
            </summary>
            <d>Presents the slider fill image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderHandleImage">
            <summary>
            Slider handle image sprite.
            </summary>
            <d>The sprite that will be rendered as the slider handle.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderHandleImageType">
            <summary>
            Slider handle image type.
            </summary>
            <d>The type of the image sprite that is to be rendered as the slider handle.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderHandleMaterial">
            <summary>
            Slider handle image material.
            </summary>
            <d>The material of the slider handle image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderHandleColor">
            <summary>
            Slider handle image color.
            </summary>
            <d>The color of the slider handle image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderHandleLength">
            <summary>
            Slider handle length.
            </summary>
            <d>Length of the slider handle.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderHandleBreadth">
            <summary>
            Slider handle breadth.
            </summary>
            <d>Breadth of the slider handle.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderHandleImageView">
            <summary>
            Slider handle image.
            </summary>
            <d>Presents the slider handle image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderFillMargin">
            <summary>
            Slider fill margin.
            </summary>
            <d>Margin of the slider fill region.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderFillRegion">
            <summary>
            Region that contains the fill image.
            </summary>
            <d>Region that contains the fill image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.Length">
            <summary>
            Length of the slider.
            </summary>
            <d>Specifies the length of the slider. Corresponds to the width or height depending on the orientation of the slider.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.Breadth">
            <summary>
            Breadth of the slider.
            </summary>
            <d>Specifies the breadth of the slider. Corresponds to the height or width depending on the orientation of the slider.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.Orientation">
            <summary>
            Orientation of the slider.
            </summary>
            <d>Enum specifying the orientation of the slider.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.Min">
            <summary>
            Minimum value.
            </summary>
            <d>Value of the slider when the handle is at the beginning of the slide area.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.Max">
            <summary>
            Maximum value.
            </summary>
            <d>Value of the slider when the handle is at the end of the slide area.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.Value">
            <summary>
            Current value.
            </summary>
            <d>Current value of the slider. Calculated from the current handle position and the Min/Max value of the slider.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.CanSlide">
            <summary>
            Indicates if user can drag the slider handle.
            </summary>
            <d>Boolean indicating if the user can interact with the slider and drag the handle.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SetValueOnDragEnded">
            <summary>
            Indicates if value set when handle is released.
            </summary>
            <d>Boolean indicating if the slider value should be set when the user releases the handle instead of continously while dragging.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.Steps">
            <summary>
            Specifies how many steps the slider should have.
            </summary>
            <d>Specifies how many steps the slider should have. If zero or less, infinite steps are used.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.SliderRegion">
            <summary>
            Region containing slider content.
            </summary>
            <d>Region containing slider background, fill and handle image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Slider.ValueChanged">
            <summary>
            Slider value changed.
            </summary>
            <d>Triggered when the slider value changes. Triggered once when handle is released if SetValueOnDragEnded is set.</d>
        </member>
        <member name="M:MarkLight.Views.UI.Slider.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Slider.LayoutChanged">
            <summary>
            Updates the layout of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Slider.SliderValueChanged">
            <summary>
            Called when the value of the slider changes (or any fields affecting the value).
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Slider.SliderBeginDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called on slider drag begin.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Slider.SliderEndDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called on slider drag end.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Slider.SliderDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called on slider drag.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Slider.SliderInitializePotentialDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called on potential drag begin (click).
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Slider.SlideTo(System.Single)">
            <summary>
            Sets slider value.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Slider.SetSlideTo(UnityEngine.Vector2,System.Boolean)">
            <summary>
            Slides the slider to the given position.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Slider.Nearest(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Slider.UpdateSliderPosition(System.Single)">
            <summary>
            Sets slider position based on value.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.Tab">
            <summary>
            Tab view.
            </summary>
            <d>Represents a tab in the tab panel.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Tab.IsSelected">
            <summary>
            Indicates if tab is selected.
            </summary>
            <d>Boolean indicating if the tab is selected.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Tab.Text">
            <summary>
            Tab header text.
            </summary>
            <d>Tab header text.</d>
        </member>
        <member name="T:MarkLight.Views.UI.TabHeader">
            <summary>
            TabHeader view.
            </summary>
            <d>Displays the content of a tab header in the tab panel. Has the states: Default, Disabled, Highlighted, Pressed and Selected.</d>
        </member>
        <member name="M:MarkLight.Views.UI.TabHeader.InitializeInternalDefaultValues">
            <summary>
            Initializes internal default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabHeader.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.TabPanel">
            <summary>
            TabPanel view.
            </summary>
            <d>Arranges content in a series of tabs that can be switched between. Tabs can be oriented horizontallt/vertically and aligned topleft/bottom/etc. Tabs can be generated from a template and bound list data.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabContentImage">
            <summary>
            Tab content image sprite.
            </summary>
            <d>The sprite that will be rendered as the tab content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabContentImageType">
            <summary>
            Tab content image type.
            </summary>
            <d>The type of the image sprite that is to be rendered as the tab content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabContentMaterial">
            <summary>
            Tab content image material.
            </summary>
            <d>The material of the tab content image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabContentColor">
            <summary>
            Tab content image color.
            </summary>
            <d>The color of the tab content image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabContentWidth">
            <summary>
            Tab content image width.
            </summary>
            <d>Specifies the width of the tab content image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabContentHeight">
            <summary>
            Tab content image height.
            </summary>
            <d>Specifies the height of the tab content image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabContentOffset">
            <summary>
            Tab content image offset.
            </summary>
            <d>Specifies the offset of the tab content image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabContentMargin">
            <summary>
            Tab content image offset.
            </summary>
            <d>Specifies the offset of the tab content image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabContentAlignment">
            <summary>
            Tab content alignment.
            </summary>
            <d>Specifies the alignment of the tab content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabContent">
            <summary>
            Tab content region.
            </summary>
            <d>Region that contains the tab content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListImage">
            <summary>
            Tab header list image sprite.
            </summary>
            <d>The sprite that will be rendered as the tab header list.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListImageType">
            <summary>
            Tab header list image type.
            </summary>
            <d>The type of the image sprite that is to be rendered as the tab header list.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListMaterial">
            <summary>
            Tab header list image material.
            </summary>
            <d>The material of the tab header list image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListColor">
            <summary>
            Tab header list image color.
            </summary>
            <d>The color of the tab header list image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListWidth">
            <summary>
            Tab header list image width.
            </summary>
            <d>Specifies the width of the tab header list image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListHeight">
            <summary>
            Tab header list image height.
            </summary>
            <d>Specifies the height of the tab header list image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListOffset">
            <summary>
            Tab header list image offset.
            </summary>
            <d>Specifies the offset of the tab header list image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListMargin">
            <summary>
            Tab header list image offset.
            </summary>
            <d>Specifies the offset of the tab header list image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListAlignment">
            <summary>
            Tab header list alignment.
            </summary>
            <d>Specifies the alignment of the tab header list.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListOrientation">
            <summary>
            Tab header list orientation.
            </summary>
            <d>Specifies the orientation of the tab header list.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListSpacing">
            <summary>
            Spacing between tab header list items.
            </summary>
            <d>The spacing between tab header list items.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListContentAlignment">
            <summary>
            The alignment of tab header list items.
            </summary>
            <d>If the tab header list items varies in size the content alignment specifies how the tab header list items should be arranged in relation to each other.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListContentMargin">
            <summary>
            Tab header list content margin.
            </summary>
            <d>Sets the margin of the tab header list mask view that contains the contents of the tab header list.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListSortDirection">
            <summary>
            Sort direction.
            </summary>
            <d>If tab header list items has SortIndex set they can be sorted in the direction specified.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListUseListMask">
            <summary>
            Indicates if a list mask is to be used.
            </summary>
            <d>Boolean indicating if a list mask is to be used.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListMaskWidth">
            <summary>
            The width of the list mask image.
            </summary>
            <d>Specifies the width of the list mask image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListMaskHeight">
            <summary>
            The height of the list mask image.
            </summary>
            <d>Specifies the height of the list mask image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListMaskOffset">
            <summary>
            The offset of the list mask image.
            </summary>
            <d>Specifies the offset of the list mask image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListMaskImage">
            <summary>
            Tab header list mask image sprite.
            </summary>
            <d>The sprite that will be rendered as the list max.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListMaskImageType">
            <summary>
            Tab header list mask image type.
            </summary>
            <d>The type of the image sprite that is to be rendered as the list max.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListMaskMaterial">
            <summary>
            Tab header list mask image material.
            </summary>
            <d>The material of the list max image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListMaskColor">
            <summary>
            Tab header list mask image color.
            </summary>
            <d>The color of the list max image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListMaskAlignment">
            <summary>
            Tab header list mask alignment.
            </summary>
            <d>Specifies the alignment of the list mask.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabListMaskShowGraphic">
            <summary>
            Indicates if list mask should be rendered.
            </summary>
            <d>Indicates if the list mask, i.e. the list mask background image sprite and color should be rendered.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabHeaderList">
            <summary>
            Tab header list.
            </summary>
            <d>Presents a selectable list of tab headers that switches the tab content when clicked.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.Items">
            <summary>
            User-defined list data.
            </summary>
            <d>Can be bound to an generic ObservableList to dynamically generate tab content and headers based on a template.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.CanSelect">
            <summary>
            Indicates if tabs can be selected by the user.
            </summary>
            <d>Boolean indicating if tabs in the tab panel can be selected by the user.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.AutoAdjustContentMargin">
            <summary>
            Indicates if tab content margin should be automatically adjusted.
            </summary>
            <d>Boolean indicating if the tab panel content margin should automatically be adjusted to make room for the tab headers.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.AutoAdjustTabListContentAlignment">
            <summary>
            Indicates if tab list content should be automatically adjusted.
            </summary>
            <d>Boolean indicating if tab list content alignment should automatically be adjusted to the tab list orientation/alignment. E.g. if tab list is oriented horizontally to the top-left then the content alignment of the list is set to bottom so the tab headers hug the top border of the tab panel content region.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.SelectedItem">
            <summary>
            Selected data list item.
            </summary>
            <d>Set when the selected list item changes and points to the user-defined data item.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.TabSelected">
            <summary>
            Tab selected view action.
            </summary>
            <d>Triggered when a tab is selected either by user interaction or programmatically.</d>
            <actionData>TabSelectionActionData</actionData>
        </member>
        <member name="F:MarkLight.Views.UI.TabPanel.ListChanged">
            <summary>
            List changed view action.
            </summary>
            <d>Triggered when the list changes (items added, removed or moved).</d>
            <actionData>ListChangedActionData</actionData>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.LayoutChanged">
            <summary>
            Updates the layout of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.NextTab(System.Boolean,System.Boolean)">
            <summary>
            Switches to next tab.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.PreviousTab(System.Boolean,System.Boolean)">
            <summary>
            Switches to previous tab.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.SelectTab(MarkLight.Views.UI.Tab,System.Boolean,System.Boolean)">
            <summary>
            Selects tab.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.SelectTab(System.Int32,System.Boolean)">
            <summary>
            Selects tab.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.SelectTab(System.Object,System.Boolean)">
            <summary>
            Selects tab.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.SelectedItemChanged">
            <summary>
            Called when the selected item has been changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.SetSelected(MarkLight.Views.UI.Tab,System.Boolean)">
            <summary>
            Selects or deselects a tab.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.ItemsChanged">
            <summary>
            Called when the list of items has been changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.OnListChanged(System.Object,MarkLight.ListChangedEventArgs)">
            <summary>
            Called when the list of items has been changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.Rebuild">
            <summary>
            Rebuilds the list of tabs.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.Clear">
            <summary>
            Clears the tabs.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.AddRange(System.Int32,System.Int32)">
            <summary>
            Adds a range of tabs.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of tabs.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.CreateTab(System.Int32)">
            <summary>
            Creates and initializes a new tab.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.SetItemData(MarkLight.View,System.Object)">
            <summary>
            Sets item data.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.DestroyTab(System.Int32)">
            <summary>
            Destroys a tab.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.DestroyTab(MarkLight.Views.UI.Tab)">
            <summary>
            Destroys a tab.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.DestroyTabHeader(MarkLight.Views.UI.Tab)">
            <summary>
            Destroys a tab header.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.CreateTabHeader(MarkLight.Views.UI.Tab,System.Int32,System.Object)">
            <summary>
            Creates tab header from tab.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.TabHeaderSelected(MarkLight.Views.UI.ItemSelectionActionData)">
            <summary>
            Called when a tab header gets selected.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TabPanel.TabHeaderListOrientationChanged">
            <summary>
            Called when the alignment or orientation of the tab header list is changed.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.TabPanel.TabItemTemplate">
            <summary>
            Returns list item template.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.TextMeshProInputField">
            <summary>
            Text Mesh Pro Input field.
            </summary>
            <d>Text input using Text Mesh Pro</d>    
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.IsRightToLeftText">
            <summary>
            Indicates if text goes right to left.
            </summary>
            <d>Boolean indicating if text goes right to left.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.TMProFont">
            <summary>
            Text font.
            </summary>
            <d>Text font.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.FontSharedMaterial">
            <summary>
            Text font shared material.
            </summary>
            <d>Text font shared material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.FontSharedMaterials">
            <summary>
            Text font shared materials.
            </summary>
            <d>Text font shared materials.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.FontMaterial">
            <summary>
            Text font material.
            </summary>
            <d>Text font material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.FontMaterials">
            <summary>
            Text font materials.
            </summary>
            <d>Text font materials.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.TextAlpha">
            <summary>
            Default text vertex alpha value.
            </summary>
            <d>Default text vertex alpha value.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.EnableVertexGradient">
            <summary>
            Indicates if text vertex color gradient should be used.
            </summary>
            <d>Boolean indicating if text vertex color gradient should be used.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.ColorGradient">
            <summary>
            Specifies the colors for the four vertices of the character quads.
            </summary>
            <d>Specifies the colors for the four vertices of the character quads.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.ColorGradientPreset">
            <summary>
            Preset specifying the color gradient.
            </summary>
            <d>Preset specifying the color gradient.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.SpriteAsset">
            <summary>
            Sprite asset used by the text object.
            </summary>
            <d>Sprite asset used by the text object.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.TintAllSprites">
            <summary>
            Indicates if sprite color is multiplies by the vertex color of the text.
            </summary>
            <d>Indicates if sprite color is multiplies by the vertex color of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.OverrideColorTags">
            <summary>
            Indicates if color tags should be ignored and default font color should be used.
            </summary>
            <d>Boolean indicating if color tags should be ignored and default font color should be used.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.FaceColor">
            <summary>
            Face color property of the assigned material.
            </summary>
            <d>_FaceColor property of the assigned material. Changing face color will result in an instance of the material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.TextMeshProOutlineColor">
            <summary>
            Outline color property of the assigned material.
            </summary>
            <d>_OutlineColor property of the assigned material. Changing outline color will result in an instance of the material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.OutlineWidth">
            <summary>
            Thickness of the font outline.
            </summary>
            <d>Thickness of the font outline. Setting this will result in an instance of the material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.FontWeight">
            <summary>
            Weight of the font.
            </summary>
            <d>Controls the weight of the font if an alternative font asset is assigned for the given weight in the font asset editor.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.EnableAutoSizing">
            <summary>
            Enables text auto-sizing.
            </summary>
            <d>Boolean indicating if text auto-sizing should be enabled.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.FontSizeMin">
            <summary>
            Minimum point size of font when auto-sizing is enabled.
            </summary>
            <d>Minimum point size of font when auto-sizing is enabled through the EnableAutoSizing field.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.FontSizeMax">
            <summary>
            Maximum point size of font when auto-sizing is enabled.
            </summary>
            <d>Maximum point size of font when auto-sizing is enabled through the EnableAutoSizing field.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.TMProFontStyle">
            <summary>
            Text font style.
            </summary>
            <d>Text font style.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.TMProAlignment">
            <summary>
            Text alignment options.
            </summary>
            <d>Text alignment options.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.CharacterSpacing">
            <summary>
            Additional spacing between characters.
            </summary>
            <d>Additional spacing between characters.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.ParagraphSpacing">
            <summary>
            Additional spacing between paragraphs.
            </summary>
            <d>Additional spacing between paragraphs.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.CharacterWidthAdjustment">
            <summary>
            Percentage of character width can be adjusted before auto-sizing reduces point size.
            </summary>
            <d>Percentage of character width can be adjusted before auto-sizing reduces point size.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.EnableWordWrapping">
            <summary>
            Indicates if words should be wrapped.
            </summary>
            <d>Boolean indicating if words should be wrapped.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.WordWrappingRatios">
            <summary>
            Controls the ratio between character and word spacing to fill-in space for justified text.
            </summary>
            <d>Controls the ratio between character and word spacing to fill-in space for justified text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.EnableAdaptiveJustification">
            <summary>
            Indicates if justification should be adaptive.
            </summary>
            <d>Boolean indicating if justification should be adaptive.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.OverflowMode">
            <summary>
            Specifies text overflow mode.
            </summary>
            <d>Enum specifying text overflow mode.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.EnableKerning">
            <summary>
            Indicates if kerning is enabled.
            </summary>
            <d>Boolean indicating if kerning is enabled.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.ExtraPadding">
            <summary>
            Indicates if extra padding around characters should be added.
            </summary>
            <d>Boolean indicating if extra padding around characters should be added. This may be necessary when the displayed text is very small to prevent clipping.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.RichText">
            <summary>
            Indicates if rich text tags are enabled.
            </summary>
            <d>Boolean indicating if rich text tags are enabled.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.ParseCtrlCharacters">
            <summary>
            Indicates if CTRL characters should be parsed.
            </summary>
            <d>Boolean indiciating if CTRL characters should be parsed.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.IsOverlay">
            <summary>
            Indicates if text should be rendered last on top of scene elements.
            </summary>
            <d>Boolean indicating if text should be rendered last on top of scene elements.</d>
        </member>
        <!-- Badly formed XML comment ignored for member "F:MarkLight.Views.UI.TextMeshProInputField.IsOrthographic" -->
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.EnableCulling">
            <summary>
            Enables culling on the shaders. 
            </summary>
            <d>Enables culling on the shaders. Note changing this value will result in an instance of the material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.IgnoreVisibility">
            <summary>
            Indicates if non-visible objects should be refreshed.
            </summary>
            <d>Boolean indicating if non-visible objects should be refreshed.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.HorizontalMapping">
            <summary>
            Controls how face and outline textures are applied to text object.
            </summary>
            <d>Controls how face and outline textures are applied to text object.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.VerticalMapping">
            <summary>
            Controls how face and outline textures are applied to text object.
            </summary>
            <d>Controls how face and outline textures are applied to text object.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.RenderMode">
            <summary>
            Indicates if the mesh will be rendered.
            </summary>
            <d>Boolean indicating if the mesh will be rendered.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.MaxVisibleCharacters">
            <summary>
            Maximum number of characters visible.
            </summary>
            <d>Maximum number of characters visible.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.MaxVisibleWords">
            <summary>
            Maximum number of words visible.
            </summary>
            <d>Maximum number of words visible.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.MaxVisibleLines">
            <summary>
            Maximum number of lines visible.
            </summary>
            <d>Maximum number of lines visible.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.UseMaxVisibleDescender">
            <summary>
            Indicates if vertical alignment of text is adjusted based on visible descender of text.
            </summary>
            <d>Boolean indicating if vertical alignment of text is adjusted based on visible descender of text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.PageToDisplay">
            <summary>
            Indicates which page of the text is displayed.
            </summary>
            <d>Indicates which page of the text is displayed (starting at 1).</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.InputTextMargin">
            <summary>
            Margin of text object.
            </summary>
            <d>Margin of text object.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.AutoSizeTextContainer">
            <summary>
            Indicates if size of text container adjusts to match text object.
            </summary>
            <d>Indicates if size of text container adjusts to match text object.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.IsVolumetricText">
            <summary>
            Indicates if geometry of characters are volumetric (cubes) rather than quads.
            </summary>
            <d>Indicates if geometry of characters are volumetric (cubes) rather than quads.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.TextMeshProInputFieldComponent">
            <summary>
            Text Mesh Pro InputField component.
            </summary>
            <d>Text Mesh Pro InputField component.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProInputField.InputFieldComponentWrapper">
            <summary>
            Wrapper for the unity text component.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TextMeshProInputField.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TextMeshProInputField.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TextMeshProInputField.TextChanged">
            <summary>
            Called when the input text is changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TextMeshProInputField.TMProInputFieldEndEdit(System.String)">
            <summary>
            Called on input field end edit.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TextMeshProInputField.TMProInputFieldValueChanged(System.String)">
            <summary>
            Called when input field value has been updated.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TextMeshProInputField.TMProUpdatePlaceholder">
            <summary>
            Shows or hides placeholder based on text.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.TextMeshProInputField.IsFocused">
            <summary>
            Gets boolean indicating if the text field is in focus (allowing input). 
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.InputFieldComponentWrapper">
            <summary>
            Wraps the unity input field component.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.TextMeshProLabel">
            <summary>
            Text Mesh Pro label view.
            </summary>
            <d>Presents text using Text Mesh Pro.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.CanvasRendererComponent">
            <summary>
            Renders graphics on a canvas.
            </summary>
            <d>Renders graphics on a canvas.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.IsRightToLeftText">
            <summary>
            Indicates if text goes right to left.
            </summary>
            <d>Boolean indicating if text goes right to left.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.TMProFont">
            <summary>
            Text font.
            </summary>
            <d>Text font.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.FontSharedMaterial">
            <summary>
            Text font shared material.
            </summary>
            <d>Text font shared material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.FontSharedMaterials">
            <summary>
            Text font shared materials.
            </summary>
            <d>Text font shared materials.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.FontMaterial">
            <summary>
            Text font material.
            </summary>
            <d>Text font material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.FontMaterials">
            <summary>
            Text font materials.
            </summary>
            <d>Text font materials.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.TextAlpha">
            <summary>
            Default text vertex alpha value.
            </summary>
            <d>Default text vertex alpha value.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.EnableVertexGradient">
            <summary>
            Indicates if text vertex color gradient should be used.
            </summary>
            <d>Boolean indicating if text vertex color gradient should be used.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.ColorGradient">
            <summary>
            Specifies the colors for the four vertices of the character quads.
            </summary>
            <d>Specifies the colors for the four vertices of the character quads.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.ColorGradientPreset">
            <summary>
            Preset specifying the color gradient.
            </summary>
            <d>Preset specifying the color gradient.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.SpriteAsset">
            <summary>
            Sprite asset used by the text object.
            </summary>
            <d>Sprite asset used by the text object.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.TintAllSprites">
            <summary>
            Indicates if sprite color is multiplies by the vertex color of the text.
            </summary>
            <d>Indicates if sprite color is multiplies by the vertex color of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.OverrideColorTags">
            <summary>
            Indicates if color tags should be ignored and default font color should be used.
            </summary>
            <d>Boolean indicating if color tags should be ignored and default font color should be used.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.FaceColor">
            <summary>
            Face color property of the assigned material.
            </summary>
            <d>_FaceColor property of the assigned material. Changing face color will result in an instance of the material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.TextMeshProOutlineColor">
            <summary>
            Outline color property of the assigned material.
            </summary>
            <d>_OutlineColor property of the assigned material. Changing outline color will result in an instance of the material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.OutlineWidth">
            <summary>
            Thickness of the font outline.
            </summary>
            <d>Thickness of the font outline. Setting this will result in an instance of the material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.FontWeight">
            <summary>
            Weight of the font.
            </summary>
            <d>Controls the weight of the font if an alternative font asset is assigned for the given weight in the font asset editor.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.EnableAutoSizing">
            <summary>
            Enables text auto-sizing.
            </summary>
            <d>Boolean indicating if text auto-sizing should be enabled.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.FontSizeMin">
            <summary>
            Minimum point size of font when auto-sizing is enabled.
            </summary>
            <d>Minimum point size of font when auto-sizing is enabled through the EnableAutoSizing field.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.FontSizeMax">
            <summary>
            Maximum point size of font when auto-sizing is enabled.
            </summary>
            <d>Maximum point size of font when auto-sizing is enabled through the EnableAutoSizing field.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.TMProFontStyle">
            <summary>
            Text font style.
            </summary>
            <d>Text font style.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.TMProAlignment">
            <summary>
            Text alignment options.
            </summary>
            <d>Text alignment options.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.CharacterSpacing">
            <summary>
            Additional spacing between characters.
            </summary>
            <d>Additional spacing between characters.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.ParagraphSpacing">
            <summary>
            Additional spacing between paragraphs.
            </summary>
            <d>Additional spacing between paragraphs.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.CharacterWidthAdjustment">
            <summary>
            Percentage of character width can be adjusted before auto-sizing reduces point size.
            </summary>
            <d>Percentage of character width can be adjusted before auto-sizing reduces point size.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.EnableWordWrapping">
            <summary>
            Indicates if words should be wrapped.
            </summary>
            <d>Boolean indicating if words should be wrapped.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.WordWrappingRatios">
            <summary>
            Controls the ratio between character and word spacing to fill-in space for justified text.
            </summary>
            <d>Controls the ratio between character and word spacing to fill-in space for justified text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.EnableAdaptiveJustification">
            <summary>
            Indicates if justification should be adaptive.
            </summary>
            <d>Boolean indicating if justification should be adaptive.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.OverflowMode">
            <summary>
            Specifies text overflow mode.
            </summary>
            <d>Enum specifying text overflow mode.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.EnableKerning">
            <summary>
            Indicates if kerning is enabled.
            </summary>
            <d>Boolean indicating if kerning is enabled.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.ExtraPadding">
            <summary>
            Indicates if extra padding around characters should be added.
            </summary>
            <d>Boolean indicating if extra padding around characters should be added. This may be necessary when the displayed text is very small to prevent clipping.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.RichText">
            <summary>
            Indicates if rich text tags are enabled.
            </summary>
            <d>Boolean indicating if rich text tags are enabled.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.ParseCtrlCharacters">
            <summary>
            Indicates if CTRL characters should be parsed.
            </summary>
            <d>Boolean indiciating if CTRL characters should be parsed.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.IsOverlay">
            <summary>
            Indicates if text should be rendered last on top of scene elements.
            </summary>
            <d>Boolean indicating if text should be rendered last on top of scene elements.</d>
        </member>
        <!-- Badly formed XML comment ignored for member "F:MarkLight.Views.UI.TextMeshProLabel.IsOrthographic" -->
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.EnableCulling">
            <summary>
            Enables culling on the shaders. 
            </summary>
            <d>Enables culling on the shaders. Note changing this value will result in an instance of the material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.IgnoreVisibility">
            <summary>
            Indicates if non-visible objects should be refreshed.
            </summary>
            <d>Boolean indicating if non-visible objects should be refreshed.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.HorizontalMapping">
            <summary>
            Controls how face and outline textures are applied to text object.
            </summary>
            <d>Controls how face and outline textures are applied to text object.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.VerticalMapping">
            <summary>
            Controls how face and outline textures are applied to text object.
            </summary>
            <d>Controls how face and outline textures are applied to text object.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.RenderMode">
            <summary>
            Indicates if the mesh will be rendered.
            </summary>
            <d>Boolean indicating if the mesh will be rendered.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.MaxVisibleCharacters">
            <summary>
            Maximum number of characters visible.
            </summary>
            <d>Maximum number of characters visible.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.MaxVisibleWords">
            <summary>
            Maximum number of words visible.
            </summary>
            <d>Maximum number of words visible.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.MaxVisibleLines">
            <summary>
            Maximum number of lines visible.
            </summary>
            <d>Maximum number of lines visible.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.UseMaxVisibleDescender">
            <summary>
            Indicates if vertical alignment of text is adjusted based on visible descender of text.
            </summary>
            <d>Boolean indicating if vertical alignment of text is adjusted based on visible descender of text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.PageToDisplay">
            <summary>
            Indicates which page of the text is displayed.
            </summary>
            <d>Indicates which page of the text is displayed (starting at 1).</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.TextMargin">
            <summary>
            Margin of text object.
            </summary>
            <d>Margin of text object.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.AutoSizeTextContainer">
            <summary>
            Indicates if size of text container adjusts to match text object.
            </summary>
            <d>Indicates if size of text container adjusts to match text object.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.IsVolumetricText">
            <summary>
            Indicates if geometry of characters are volumetric (cubes) rather than quads.
            </summary>
            <d>Indicates if geometry of characters are volumetric (cubes) rather than quads.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.TextMeshProComponent">
            <summary>
            Text Mesh Pro UGUI component.
            </summary>
            <d>Text Mesh Pro UGUI component.</d>
        </member>
        <member name="F:MarkLight.Views.UI.TextMeshProLabel.TextComponentWrapper">
            <summary>
            Wrapper for the unity text component.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TextMeshProLabel.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TextMeshProLabel.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TextMeshProLabel.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TextMeshProLabel.LayoutChanged">
            <summary>
            Updates the layout of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TextMeshProLabel.TextChanged">
            <summary>
            Called when text changes.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TextMeshProLabel.BehaviorChanged">
            <summary>
            Called when fields affecting the behavior of the view are changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TextMeshProLabel.TextStyleChanged">
            <summary>
            Called when fields changing the text styles are changed.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.TextMeshProLabel.PreferredWidth">
            <summary>
            Preferred width of text.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.TextMeshProLabel.PreferredHeight">
            <summary>
            Preferred height of text.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.TextComponentWrapper">
            <summary>
            Wraps the unity text component.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.TextMeshProExtensionMethods">
            <summary>
            Extension methods for text mesh pro integration.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TextMeshProExtensionMethods.ToTextAlignmentOptions(MarkLight.ElementAlignment)">
            <summary>
            Converts marklight text alignment to text mesh pro text alignment.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TextMeshProExtensionMethods.ToFontStyles(UnityEngine.FontStyle)">
            <summary>
            Converts marklight font style to text mesh pro font style.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.TMProFontValueConverter">
            <summary>
            Value converter for TMP_FontAsset type.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TMProFontValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TMProFontValueConverter.ConvertAssetPath(System.String,System.Boolean,System.Boolean@)">
            <summary>
            Converts asset path and sets bool indicating if asset not found errors should be suppressed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TMProFontValueConverter.ConvertAssetResult(MarkLight.UnityAsset)">
            <summary>
            Converts loaded asset to desired type.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.TMProGradientValueConverter">
            <summary>
            Value converter for TMP_FontAsset type.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.TMProGradientValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.VertexGradientValueConverter">
            <summary>
            Value converter for VertexGradient type.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.VertexGradientValueConverter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.VertexGradientValueConverter.Convert(System.Object,MarkLight.ValueConverterContext)">
            <summary>
            Value converter for Font type.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.VertexGradientValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts value to string.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.UICanvas">
            <summary>
            Canvas view.
            </summary>
            <d>The canvas view is used to render UI components and controls things like draw sort order, scaling and render mode. In order for UIViews to be rendered and positioned correctly they must be put under a parent UICanvas or a subclass of (like UserInterface).</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.RenderMode">
            <summary>
            Canvas render mode.
            </summary>
            <d>Specifies the render mode to be used by the canvas.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.PixelPerfect">
            <summary>
            Indicates if rendering should be pixel perfect.
            </summary>
            <d>Indicates if the canvas is to be aligned with pixels. Only applied if render mode is set to ScreenSpace.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.SortingOrder">
            <summary>
            Canvas sorting order.
            </summary>
            <d>Canvas draw order within a sorting layer.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.RenderCamera">
            <summary>
            Render camera.
            </summary>
            <d>Camera used for sizing the canvas when in render mode set to: Screen Space - Camera. Also used as camera that events will be sent through in world space.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.PlaneDistance">
            <summary>
            Canvas distance from camera.
            </summary>
            <d>The plane distance determines how far away from the camera the canvas is generated.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.SortingLayerId">
            <summary>
            Unique ID of the canvas sorting layer.
            </summary>
            <d>Unique ID of the canvas sorting layer.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.SortingLayerName">
            <summary>
            Name of the canvas sorting layer.
            </summary>
            <d>Name of the canvas sorting layer.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.OrderInLayer">
            <summary>
            Canvas sorting order.
            </summary>
            <d>Canvas draw order within a sorting layer.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.OverrideSorting">
            <summary>
            Override canvas sort order.
            </summary>
            <d>Boolean indicating if the sort order should be overriden (not inherited from parent canvas).</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.OverridePixelPerfect">
            <summary>
            Override pixel perfect.
            </summary>
            <d>Boolean indicating if the pixel perfect setting should be overriden (not inherited from parent canvas).</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.Canvas">
            <summary>
            Canvas component.
            </summary>
            <d>The canvas component renders the UI components using specified settings.</d>        
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.UIScaleMode">
            <summary>
            UI scale mode.
            </summary>
            <d>Determines how the children within the canvas are scaled.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.ScaleFactor">
            <summary>
            Scale factor.
            </summary>
            <d>Scales all children within the canvas by this factor.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.ReferencePixelsPerUnit">
            <summary>
            Reference pixels per unit.
            </summary>
            <d>If a sprite has 'Pixels Per Unit' setting, one pixel in the sprite will cover one unit in the UI.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.DynamicPixelsPerUnit">
            <summary>
            Dynamic pixels per unit.
            </summary>
            <d>Pixels per unit to use for dynamically generated bitmaps such as text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.ReferenceResolution">
            <summary>
            Reference resolution.
            </summary>
            <d>The resolution the UI layout is designed for. If the screen resolution is larger, the UI will be scaled up, and if it’s smaller, the UI will be scaled down.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.MatchWidthOrHeight">
            <summary>
            Match width or height or in between.
            </summary>
            <d>Scale the canvas area with the width as reference (0), the height as reference (1), or something in between (e.g. 0.75).</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.CanvasScaler">
            <summary>
            Canvas scaler component.
            </summary>
            <d>The canvas scaler component is used for controlling the scale and pixel density of the children of the canvas.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.IgnoreReversedGraphics">
            <summary>
            Indicates if reversed graphics should be ignored.
            </summary>
            <d>Tells the graphic raycaster to ignore graphical components facing away from the camera.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.BlockingObjects">
            <summary>
            Blocking objects.
            </summary>
            <d>Indicates the types of objects that should block the raycasts.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UICanvas.GraphicRaycaster">
            <summary>
            Graphic raycaster component.
            </summary>
            <d>The graphic raycaster components does raycasting against graphical components (such as images).</d>
        </member>
        <member name="M:MarkLight.Views.UI.UICanvas.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.UIView">
            <summary>
            Base class for UI views.
            </summary>    
            <d>Base class for UI views. Has fields for doing layout such as Width, Height, Margin, Alignment, Offset, etc. and fields for rendering a background image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.Width">
            <summary>
            The width of the view.
            </summary>
            <d>Specifies the width of the view either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.Height">
            <summary>
            The height of the view.
            </summary>
            <d>Specifies the height of the view either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.OverrideWidth">
            <summary>
            Override width.
            </summary>
            <d>Used to override the layouting logic of inherited views and set the specified width.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.OverrideHeight">
            <summary>
            Override height.
            </summary>
            <d>Used to override the layouting logic of inherited views and set the specified height.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.Alignment">
            <summary>
            View alignment.
            </summary>
            <d>Used to align the view relative to the layout parent region it resides in.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.Margin">
            <summary>
            View margin
            </summary>
            <d>Determines the size of the content region relative the view's width and height. Adding margins to a view does not change its width or height.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.Offset">
            <summary>
            View offset.
            </summary>
            <d>Determines the offset of the content region relative to the view's position.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.OffsetFromParent">
            <summary>
            View offset from parent.
            </summary>
            <d>Used by parent views to adjust the positioning of its children without affecting the internal offset of the children.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.Pivot">
            <summary>
            View pivot position.
            </summary>
            <d>The normalized position that the view rect transform rotates around.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.RectTransform">
            <summary>
            Position, rotation and scale of the view.
            </summary>
            <d>The view rect transform is used to manipulate the position, rotation and scale of the view in relation to the layout parent view's transform or in world space. For most UIViews the transform manipulated indirectly through other view fields such as Width, Height, Margin, Offset, Alignment and through the UIView's internal layout logic.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.RaycastBlockMode">
            <summary>
            Indicates when raycast should be blocked.
            </summary>
            <d>Enum indicating when raycasts should be blocked by the view.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.Alpha">
            <summary>
            Alpha value.
            </summary>
            <d>Can be used to adjust the alpha color of this view and all its children. E.g. used for fade in/out animations. Is separate from and different from the background color of the view as it affects the children as well.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.IsVisible">
            <summary>
            Indicate if the view is visible.
            </summary>
            <d>Can be used to adjust the visiblity of the view. If set to false the view is made invisible but unlike when deactivating the view, invisible views are still is active and takes up space.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.SortIndex">
            <summary>
            View sort index.
            </summary>
            <d>The sort index is used by views such as Group and List to sort its child views.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.UpdateRectTransform">
            <summary>
            Indicates if rect transform is updated.
            </summary>
            <d>If set to false the rect transform is not updated by the layout logic. It is used when layouting is done elsewhere.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.UpdateBackground">
            <summary>
            Indicates if background is updated.
            </summary>
            <d>If set to false the background image and color is not updated by the view. Is used when the background updates is done elsewhere.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.ImageComponent">
            <summary>
            Displays the background image.
            </summary>
            <d>The background image component is responsible for rendering the background image and sprite of the view.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.BackgroundImageEventAlphaThreshold">
            <summary>
            Alpha threshold for letting through events.
            </summary>
            <d>The alpha threshold specifying the minimum alpha a pixel must have for the event to be passed through.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.BackgroundImageFillAmount">
            <summary>
            Background image fill amount.
            </summary>
            <d>Amount of the Image shown when the Image.type is set to Image.Type.Filled.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.BackgroundImageFillCenter">
            <summary>
            Indicates if center should be filled.
            </summary>
            <d>Boolean indicating whether or not to render the center of a Tiled or Sliced image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.BackgroundImageFillClockwise">
            <summary>
            Indicates if the image should be filled clockwise.
            </summary>
            <d>Whether the Image should be filled clockwise (true) or counter-clockwise (false).</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.BackgroundImageFillMethod">
            <summary>
            Background image fill method.
            </summary>
            <d>Indicates what type of fill method should be used.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.BackgroundImageFillOrigin">
            <summary>
            Background image fill origin.
            </summary>
            <d>Controls the origin point of the Fill process. Value means different things with each fill method.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.BackgroundImageOverrideSprite">
            <summary>
            Background image override sprite.
            </summary>
            <d>Set an override sprite to be used for rendering. If set the override sprite is used instead of the regular image sprite.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.BackgroundImagePreserveAspect">
            <summary>
            Preserve aspect ratio.
            </summary>
            <d>Indicates whether this image should preserve its Sprite aspect ratio.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.BackgroundImage">
            <summary>
            Background image sprite.
            </summary>
            <d>The sprite that will be rendered.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.BackgroundImageType">
            <summary>
            Type of background image.
            </summary>
            <d>The type of the image sprite that is to be rendered.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.BackgroundMaterial">
            <summary>
            Background image material.
            </summary>
            <d>Background image material.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.BackgroundImageMaskable">
            <summary>
            Indicates if the image is maskable.
            </summary>
            <d>Indicates if the background image graphic is to be maskable.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView.BackgroundColor">
            <summary>
            Background color of the view.
            </summary>
            <d>Background color of the view.</d>
        </member>
        <member name="F:MarkLight.Views.UI.UIView._layoutRoot">
            <summary>
            Layout root.
            </summary>
            <d>A reference to the layout root of the UI views.</d>
        </member>
        <member name="M:MarkLight.Views.UI.UIView.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.UIView.LayoutChanged">
            <summary>
            Called when a field affecting the layout of the view (size and anchors) has changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.UIView.OffsetChanged">
            <summary>
            Called when the offset of the view has changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.UIView.RectTransformChanged">
            <summary>
            Called when fields affecting the rect transform of the view has changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.UIView.BehaviorChanged">
            <summary>
            Called when a field affecting the behavior and visual appearance of the view has changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.UIView.BackgroundChanged">
            <summary>
            Called when fields affecting the background image/color of the view are changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.UIView.GetLocalPoint(UnityEngine.Vector2)">
            <summary>
            Gets local point in view from screen point (e.g. mouse position).
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.UIView.ContainsMouse(UnityEngine.Vector3,System.Boolean,System.Boolean)">
            <summary>
            Tests if mouse is over this view. 
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.UIView.OnAssetChanged(MarkLight.UnityAsset)">
            <summary>
            Called when a sprite used by the view has been loaded or unloaded.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.UIView.Initialize">
            <summary>
            Called when the view is initialized.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.UIView.ActualWidth">
            <summary>
            Gets actual width of view in pixels. Useful when Width may be specified as percentage and you want actual pixel width.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.UIView.ActualHeight">
            <summary>
            Gets actual height of view in pixels. Useful when Height may be specified as percentage and you want actual pixel height.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.UIView.CanvasGroup">
            <summary>
            Gets canvas group component.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.UIView.IsFullScreen">
            <summary>
            Gets boolean indicating if view takes up the entire screen.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.UIView.LayoutRoot">
            <summary>
            Gets layout root canvas.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.UnityLabel">
            <summary>
            Unity label view. 
            </summary>
            <d>View can be used when Text Mesh Pro integration is activated (replacing all Label views with Text Mesh Pro labels) but you still want to use the ordinary UGUI label.</d>
        </member>
        <member name="T:MarkLight.Views.UI.UserInterface">
            <summary>
            View that holds user interface views.
            </summary>
            <d>Represents a root UICanvas containing a user interface in the scene.</d>
        </member>
        <member name="M:MarkLight.Views.UI.UserInterface.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.ViewPoolContainer">
            <summary>
            Pools views for fast creation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ViewPoolContainer.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ViewPoolContainer.UpdateViewPool">
            <summary>
            Updates the view pool based on settings.
            </summary>
        </member>
        <member name="P:MarkLight.Views.UI.ViewPoolContainer.IsFull">
            <summary>
            Boolean indicating if pool container is full.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.ViewSwitcher">
            <summary>
            ViewSwitcher view.
            </summary>
            <d>Provides functionality for switching between views (presenting one view at a time). Can apply animations to views being switched to/from.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ViewSwitcher.StartView">
            <summary>
            Id of view displayed by default.
            </summary>
            <d>Id of the view to be displayed by default.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ViewSwitcher.SwitchToDefault">
            <summary>
            Display default view if no start view is set.
            </summary>
            <d>Boolean indicating if default view (first view) should be displayed if no start view is set.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ViewSwitcher.DeactiveViews">
            <summary>
            Deactivate views not currently active in view switcher.
            </summary>
            <d>Boolean indicating if views not currently being switched to should be deactivated.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ViewSwitcher.TransitionIn">
            <summary>
            Transition in animation ID.
            </summary>
            <d>ID of view animation to apply on views transitioned to.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ViewSwitcher.TransitionOut">
            <summary>
            Transition out animation ID.
            </summary>
            <d>ID of view animation to apply on views transitioned from.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ViewSwitcher.TransitionInReverse">
            <summary>
            Transition in reverse animation ID.
            </summary>
            <d>ID of view animation to apply on views transitioned to when going from a higher indexed view to a lower.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ViewSwitcher.TransitionOutReverse">
            <summary>
            Transition out reverse animation ID.
            </summary>
            <d>ID of view animation to apply on views transitioned from when going from a higher indexed view to a lower.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ViewSwitcher.TransitionInAnimation">
            <summary>
            Transition in animation.
            </summary>
            <d>Reference to the animation applied to views transitioned to.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ViewSwitcher.TransitionOutAnimation">
            <summary>
            Transition out animation.
            </summary>
            <d>Reference to the animation applied to views transitioned from.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ViewSwitcher.TransitionInReverseAnimation">
            <summary>
            Transition in reverse animation.
            </summary>
            <d>Reference to the animation applied to views transitioned to when going from a higher indexed view to a lower.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ViewSwitcher.TransitionOutReverseAnimation">
            <summary>
            Transition out reverse animation.
            </summary>
            <d>Reference to the animation applied to views transitioned from when going from a higher indexed view to a lower.</d>
        </member>
        <member name="F:MarkLight.Views.UI.ViewSwitcher.ActiveView">
            <summary>
            Active view.
            </summary>
            <d>Reference to the view currently displayed.</d>
        </member>
        <member name="M:MarkLight.Views.UI.ViewSwitcher.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ViewSwitcher.Initialize">
            <summary>
            Initializes the view switcher.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ViewSwitcher.SwitchTo(MarkLight.View,System.Boolean)">
            <summary>
            Switches to another view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ViewSwitcher.SwitchTo(System.String,System.Boolean)">
            <summary>
            Switches to another view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ViewSwitcher.SwitchTo(System.Int32,System.Boolean)">
            <summary>
            Switches to another view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ViewSwitcher.SwitchTo(System.String,System.Object,System.Boolean)">
            <summary>
            Switches to another view passing data to it.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ViewSwitcher.SwitchTo(System.Int32,System.Object,System.Boolean)">
            <summary>
            Switches to another view passing data to it.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ViewSwitcher.SwitchTo(MarkLight.View,System.Object,System.Boolean)">
            <summary>
            Switches to another view passing data to it.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ViewSwitcher.TransitionOutCompleted(MarkLight.Views.ViewAnimation)">
            <summary>
            Called when transition out animation is completed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ViewSwitcher.Next(System.Boolean,System.Boolean)">
            <summary>
            Switches to next view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.ViewSwitcher.Previous(System.Boolean,System.Boolean)">
            <summary>
            Switches to previous view.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.VirtualizedItemsContainer">
            <summary>
            Virtualized items to be presented on demand.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.VirtualizedItemsContainer.Initialize">
            <summary>
            Initializes the view.
            </summary>
        </member>
        <member name="T:MarkLight.Views.UI.Window">
            <summary>
            Window view.
            </summary>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleRegionImage">
            <summary>
            Title region image sprite.
            </summary>
            <d>The sprite that will be rendered as the title region.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleRegionImageType">
            <summary>
            Title region image type.
            </summary>
            <d>The type of the image sprite that is to be rendered as the title region.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleRegionMaterial">
            <summary>
            Title region image material.
            </summary>
            <d>The material of the title region image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleRegionColor">
            <summary>
            Title region image color.
            </summary>
            <d>The color of the title region image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleRegionWidth">
            <summary>
            Title region image width.
            </summary>
            <d>Specifies the width of the title region image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleRegionHeight">
            <summary>
            Title region image height.
            </summary>
            <d>Specifies the height of the title region image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleRegionOffset">
            <summary>
            Title region image offset.
            </summary>
            <d>Specifies the offset of the title region image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleRegionMargin">
            <summary>
            Title region image offset.
            </summary>
            <d>Specifies the offset of the title region image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleRegionAlignment">
            <summary>
            Title region alignment.
            </summary>
            <d>Specifies the alignment of the title region.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleRegion">
            <summary>
            Title region.
            </summary>
            <d>Interractable title region that can be clicked and dragged to move the window. Contains the window title label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.Title">
            <summary>
            Window title text.
            </summary>
            <d>The text of the window title.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleFont">
            <summary>
            Window title text font.
            </summary>
            <d>The font of the window title.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleFontSize">
            <summary>
            Window title text font size.
            </summary>
            <d>The font size of the window title.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleLineSpacing">
            <summary>
            Window title text line spacing.
            </summary>
            <d>The line spacing of the window title.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleSupportRichText">
            <summary>
            Supports rich text.
            </summary>
            <d>Boolean indicating if the window title supports rich text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleFontColor">
            <summary>
            Window title text font color.
            </summary>
            <d>The font color of the window title.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleFontStyle">
            <summary>
            Window title text font style.
            </summary>
            <d>The font style of the window title.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleMargin">
            <summary>
            Window title text margin.
            </summary>
            <d>The margin of the window title. Can be used to adjust the text positioning.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleAlignment">
            <summary>
            Window title alignment.
            </summary>
            <d>The alignment of the window text label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleTextAlignment">
            <summary>
            Window title text alignment.
            </summary>
            <d>The alignment of the text inside the window title. Can be used with TextMargin and TextOffset to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleOffset">
            <summary>
            Window title text offset.
            </summary>
            <d>The offset of the window title. Can be used with TextMargin and TextAlignment to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleShadowColor">
            <summary>
            Window title text shadow color.
            </summary>
            <d>The shadow color of the window title.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleShadowDistance">
            <summary>
            Window title text shadow distance.
            </summary>
            <d>The distance of the window title shadow.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleOutlineColor">
            <summary>
            Window title text outline color.
            </summary>
            <d>The outline color of the window title.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleOutlineDistance">
            <summary>
            Window title text outline distance.
            </summary>
            <d>The distance of the window title outline.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleAdjustToText">
            <summary>
            Adjusts the title to the text.
            </summary>
            <d>An enum indiciating how the title should adjust its size to the label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.TitleLabel">
            <summary>
            Title label.
            </summary>
            <d>Presents the window title text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.ContentRegionImage">
            <summary>
            Content region image sprite.
            </summary>
            <d>The sprite that will be rendered as the content region.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.ContentRegionImageType">
            <summary>
            Content region image type.
            </summary>
            <d>The type of the image sprite that is to be rendered as the content region.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.ContentRegionMaterial">
            <summary>
            Content region image material.
            </summary>
            <d>The material of the content region image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.ContentRegionColor">
            <summary>
            Content region image color.
            </summary>
            <d>The color of the content region image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.ContentRegionWidth">
            <summary>
            Content region image width.
            </summary>
            <d>Specifies the width of the content region image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.ContentRegionHeight">
            <summary>
            Content region image height.
            </summary>
            <d>Specifies the height of the content region image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.ContentRegionOffset">
            <summary>
            Content region image offset.
            </summary>
            <d>Specifies the offset of the content region image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.ContentRegionMargin">
            <summary>
            Content region image offset.
            </summary>
            <d>Specifies the offset of the content region image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.ContentRegionAlignment">
            <summary>
            Content region alignment.
            </summary>
            <d>Specifies the alignment of the content region.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.ContentRegion">
            <summary>
            Content region.
            </summary>
            <d>Displays the window content.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonImage">
            <summary>
            Close button image sprite.
            </summary>
            <d>The sprite that will be rendered as the close button.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonImageType">
            <summary>
            Close button image type.
            </summary>
            <d>The type of the image sprite that is to be rendered as the close button.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonMaterial">
            <summary>
            Close button image material.
            </summary>
            <d>The material of the close button image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonColor">
            <summary>
            Close button image color.
            </summary>
            <d>The color of the close button image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonWidth">
            <summary>
            Close button width.
            </summary>
            <d>Specifies the width of the close button either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonHeight">
            <summary>
            Close button height.
            </summary>
            <d>Specifies the height of the close button either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonOffset">
            <summary>
            Close button offset.
            </summary>
            <d>Specifies the offset of the close button.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonMargin">
            <summary>
            Close button margin.
            </summary>
            <d>Specifies the margin of the close button.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonAlignment">
            <summary>
            Close button alignment.
            </summary>
            <d>Specifies the alignment of the close button.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonText">
            <summary>
            Close button text.
            </summary>
            <d>The text of the close button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonFont">
            <summary>
            Close button text font.
            </summary>
            <d>The font of the close button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonFontSize">
            <summary>
            Close button text font size.
            </summary>
            <d>The font size of the close button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonLineSpacing">
            <summary>
            Close button text line spacing.
            </summary>
            <d>The line spacing of the close button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonSupportRichText">
            <summary>
            Supports rich text.
            </summary>
            <d>Boolean indicating if the close button label supports rich text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonFontColor">
            <summary>
            Close button text font color.
            </summary>
            <d>The font color of the close button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonFontStyle">
            <summary>
            Close button text font style.
            </summary>
            <d>The font style of the close button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonTextMargin">
            <summary>
            Close button text margin.
            </summary>
            <d>The margin of the close button label. Can be used to adjust the text positioning.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonTextAlignment">
            <summary>
            Close button text alignment.
            </summary>
            <d>The alignment of the text inside the close button label. Can be used with TextMargin and TextOffset to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonTextOffset">
            <summary>
            Close button text offset.
            </summary>
            <d>The offset of the close button label. Can be used with TextMargin and TextAlignment to get desired positioning of the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonTextPadding">
            <summary>
            Close button text padding.
            </summary>
            <d>The close button TextPadding is used when AdjustToText is set. It determines the additional padding to be added to the size of the button when it adjusts to the text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonShadowColor">
            <summary>
            Close button text shadow color.
            </summary>
            <d>The shadow color of the close button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonShadowDistance">
            <summary>
            Close button text shadow distance.
            </summary>
            <d>The distance of the close button label shadow.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonOutlineColor">
            <summary>
            Close button text outline color.
            </summary>
            <d>The outline color of the close button label.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonOutlineDistance">
            <summary>
            Close button text outline distance.
            </summary>
            <d>The distance of the close button label outline.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonAdjustToText">
            <summary>
            Adjusts the close button to the text.
            </summary>
            <d>An enum indiciating how the close button should adjust its size to the label text.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButtonIsActive">
            <summary>
            Active state of the window close button.
            </summary>
            <d>Boolean indicating if window button is active (visible and updated).</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.CloseButton">
            <summary>
            Window close button.
            </summary>
            <d>The window close button.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.WindowImage">
            <summary>
            Window region image sprite.
            </summary>
            <d>The sprite that will be rendered as the window region.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.WindowImageType">
            <summary>
            Window region image type.
            </summary>
            <d>The type of the image sprite that is to be rendered as the window region.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.WindowMaterial">
            <summary>
            Window region image material.
            </summary>
            <d>The material of the window region image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.WindowColor">
            <summary>
            Window region image color.
            </summary>
            <d>The color of the window region image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.WindowRegionWidth">
            <summary>
            Window region image width.
            </summary>
            <d>Specifies the width of the window region image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.WindowRegionHeight">
            <summary>
            Window region image height.
            </summary>
            <d>Specifies the height of the window region image either in pixels or percents.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.WindowRegionOffset">
            <summary>
            Window region image offset.
            </summary>
            <d>Specifies the offset of the window region image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.WindowRegionMargin">
            <summary>
            Window region image offset.
            </summary>
            <d>Specifies the offset of the window region image.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.WindowRegionAlignment">
            <summary>
            Window region alignment.
            </summary>
            <d>Specifies the alignment of the window region.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.WindowRegion">
            <summary>
            Window region.
            </summary>
            <d>Window region containing the title region, content region and close button.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.IsOpen">
            <summary>
            Indicates if window is open.
            </summary>
            <d>Boolean indicating if the window is opened.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.OverrideCloseButtonClick">
            <summary>
            Override close button click.
            </summary>
            <d>Boolean indicating if the default behavior on close button click should be overridden.</d>
        </member>
        <member name="F:MarkLight.Views.UI.Window.IsMovable">
            <summary>
            Indicates if window is movable.
            </summary>
            <d>Boolean indicating if the window can be moved by clicking and dragging the title region.</d>
        </member>
        <member name="M:MarkLight.Views.UI.Window.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Window.WindowBeginDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called on window drag begin.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Window.WindowDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called on window drag.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Window.CloseButtonClick">
            <summary>
            Called when window close button is clicked.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Window.IsOpenChanged">
            <summary>
            Called when IsOpen is changed.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Window.Open">
            <summary>
            Opens the window.
            </summary>
        </member>
        <member name="M:MarkLight.Views.UI.Window.Close">
            <summary>
            Closes the window.
            </summary>
        </member>
        <member name="T:MarkLight.Views.ViewAnimation">
            <summary>
            Animates views.
            </summary>
            <d>Animates views.</d>
        </member>
        <member name="F:MarkLight.Views.ViewAnimation.Target">
            <summary>
            Animation target view.
            </summary>
            <d>The animation target view.</d>
        </member>
        <member name="F:MarkLight.Views.ViewAnimation.AnimationStarted">
            <summary>
            Animation started.
            </summary>
            <d>Triggered when the animation has started.</d>
        </member>
        <member name="F:MarkLight.Views.ViewAnimation.AnimationReversed">
            <summary>
            Animation reversed.
            </summary>
            <d>Triggered when the animation is reversed.</d>
        </member>
        <member name="F:MarkLight.Views.ViewAnimation.AnimationCompleted">
            <summary>
            Animation completed.
            </summary>
            <d>Triggered when the animation is completed.</d>
        </member>
        <member name="F:MarkLight.Views.ViewAnimation.AnimationStopped">
            <summary>
            Animation stopped.
            </summary>
            <d>Triggered when the animation is stopped.</d>
        </member>
        <member name="F:MarkLight.Views.ViewAnimation.AnimationPaused">
            <summary>
            Animation paused.
            </summary>
            <d>Triggered when the animation has paused.</d>
        </member>
        <member name="F:MarkLight.Views.ViewAnimation.AnimationResumed">
            <summary>
            Animation resumed.
            </summary>
            <d>Triggered when the animation resumes playing.</d>
        </member>
        <member name="P:MarkLight.Views.ViewAnimation.IsAnimationRunning">
            <summary>
            Gets a boolean indicating whether this animation is active.
            </summary>
        </member>
        <member name="P:MarkLight.Views.ViewAnimation.IsAnimationReversing">
            <summary>
            Gets a boolean indicating whether this animation is reversing.
            </summary>
        </member>
        <member name="P:MarkLight.Views.ViewAnimation.IsAnimationCompleted">
            <summary>
            Gets a boolean indicating whether this animation is completed.
            </summary>
        </member>
        <member name="P:MarkLight.Views.ViewAnimation.IsAnimationPaused">
            <summary>
            Gets a boolean indicating whether this animation is paused.
            </summary>
        </member>
        <member name="M:MarkLight.Views.ViewAnimation.SetDefaultValues">
            <summary>
            Sets default values of the view.
            </summary>
        </member>
        <member name="M:MarkLight.Views.ViewAnimation.StartAnimation">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.ViewAnimation.StopAnimation">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.ViewAnimation.ResetAnimation">
            <summary>
            Resets the animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.ViewAnimation.ResetAndStopAnimation">
            <summary>
            Resets and stops the animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.ViewAnimation.ReverseAnimation">
            <summary>
            Reverses the animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.ViewAnimation.PauseAnimation">
            <summary>
            Pauses the animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.ViewAnimation.ResumeAnimation">
            <summary>
            Resumes the animation.
            </summary>
        </member>
        <member name="M:MarkLight.Views.ViewAnimation.SetAnimationTarget(MarkLight.View)">
            <summary>
            Sets animation target.
            </summary>
        </member>
        <member name="M:MarkLight.Views.ViewAnimation.ChildAnimationCompleted">
            <summary>
            Called if a child animation has been completed. 
            </summary>
        </member>
        <member name="T:MarkLight.VirtualizedItems">
            <summary>
            Provides access to a view pool.
            </summary>
        </member>
        <member name="M:MarkLight.VirtualizedItems.#ctor(MarkLight.Views.UI.VirtualizedItemsContainer)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:MarkLight.VirtualizedItems.InsertView(MarkLight.Views.UI.ListItem)">
            <summary>
            Inserts a view into the virtualized container.
            </summary>
        </member>
        <member name="M:MarkLight.VirtualizedItems.GetItemsInRange(System.Single,System.Single)">
            <summary>
            Gets items that are in the given range.
            </summary>
        </member>
        <member name="M:MarkLight.VirtualizedItems.IsInRange(MarkLight.Views.UI.ListItem,System.Single,System.Single)">
            <summary>
            Gets boolean indicating if list item is in the specified range.
            </summary>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawCharactersBounds">
            <summary>
            Method to draw a rectangle around each character.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawWordBounds">
            <summary>
            Method to draw rectangles around each word of the text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawLinkBounds">
            <summary>
            Draw rectangle around each of the links contained in the text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawLineBounds">
            <summary>
            Draw Rectangles around each lines of the text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawBounds">
            <summary>
            Draw Rectangle around the bounds of the text object.
            </summary>
        </member>
        <member name="M:TMPro.Examples.TextConsoleSimulator.RevealCharacters(TMPro.TMP_Text)">
            <summary>
            Method revealing the text one character at a time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.TextConsoleSimulator.RevealWords(TMPro.TMP_Text)">
            <summary>
            Method revealing the text one word at a time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.VertexColorCycler.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TMPro.Examples.VertexJitter.VertexAnim">
            <summary>
            Structure to hold pre-computed animation data.
            </summary>
        </member>
        <member name="M:TMPro.Examples.VertexJitter.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.VertexShakeA.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.VertexShakeB.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.VertexZoom.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.WarpTextExample.WarpText">
            <summary>
             Method to curve text along a Unity animation curve.
            </summary>
            <param name="textComponent"></param>
            <returns></returns>
        </member>
        <member name="P:TMPro.MaterialReferenceManager.instance">
            <summary>
            Get a singleton instance of the registry
            </summary>
        </member>
        <member name="M:TMPro.MaterialReferenceManager.AddFontAsset(TMPro.TMP_FontAsset)">
            <summary>
            Add new font asset reference to dictionary.
            </summary>
            <param name="fontAsset"></param>
        </member>
        <member name="M:TMPro.MaterialReferenceManager.AddFontAssetInternal(TMPro.TMP_FontAsset)">
            <summary>
             Add new Font Asset reference to dictionary.
            </summary>
            <param name="fontAsset"></param>
        </member>
        <member name="M:TMPro.MaterialReferenceManager.AddSpriteAsset(TMPro.TMP_SpriteAsset)">
            <summary>
            Add new Sprite Asset to dictionary.
            </summary>
            <param name="hashCode"></param>
            <param name="spriteAsset"></param>
        </member>
        <member name="M:TMPro.MaterialReferenceManager.AddSpriteAssetInternal(TMPro.TMP_SpriteAsset)">
            <summary>
            Internal method to add a new sprite asset to the dictionary.
            </summary>
            <param name="hashCode"></param>
            <param name="spriteAsset"></param>
        </member>
        <member name="M:TMPro.MaterialReferenceManager.AddSpriteAsset(System.Int32,TMPro.TMP_SpriteAsset)">
            <summary>
            Add new Sprite Asset to dictionary.
            </summary>
            <param name="hashCode"></param>
            <param name="spriteAsset"></param>
        </member>
        <member name="M:TMPro.MaterialReferenceManager.AddSpriteAssetInternal(System.Int32,TMPro.TMP_SpriteAsset)">
            <summary>
            Internal method to add a new sprite asset to the dictionary.
            </summary>
            <param name="hashCode"></param>
            <param name="spriteAsset"></param>
        </member>
        <member name="M:TMPro.MaterialReferenceManager.AddFontMaterial(System.Int32,UnityEngine.Material)">
            <summary>
            Add new Material reference to dictionary.
            </summary>
            <param name="hashCode"></param>
            <param name="material"></param>
        </member>
        <member name="M:TMPro.MaterialReferenceManager.AddFontMaterialInternal(System.Int32,UnityEngine.Material)">
            <summary>
            Add new material reference to dictionary.
            </summary>
            <param name="hashCode"></param>
            <param name="material"></param>
        </member>
        <member name="M:TMPro.MaterialReferenceManager.Contains(TMPro.TMP_FontAsset)">
            <summary>
            Function to check if the font asset is already referenced.
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.MaterialReferenceManager.Contains(TMPro.TMP_SpriteAsset)">
            <summary>
            Function to check if the sprite asset is already referenced.
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.MaterialReferenceManager.TryGetFontAsset(System.Int32,TMPro.TMP_FontAsset@)">
            <summary>
            Function returning the Font Asset corresponding to the provided hash code.
            </summary>
            <param name="hashCode"></param>
            <param name="fontAsset"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.MaterialReferenceManager.TryGetFontAssetInternal(System.Int32,TMPro.TMP_FontAsset@)">
            <summary>
            Internal Function returning the Font Asset corresponding to the provided hash code.
            </summary>
            <param name="hashCode"></param>
            <param name="fontAsset"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.MaterialReferenceManager.TryGetSpriteAsset(System.Int32,TMPro.TMP_SpriteAsset@)">
            <summary>
            Function returning the Sprite Asset corresponding to the provided hash code.
            </summary>
            <param name="hashCode"></param>
            <param name="spriteAsset"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.MaterialReferenceManager.TryGetSpriteAssetInternal(System.Int32,TMPro.TMP_SpriteAsset@)">
            <summary>
            Internal function returning the Sprite Asset corresponding to the provided hash code.
            </summary>
            <param name="hashCode"></param>
            <param name="fontAsset"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.MaterialReferenceManager.TryGetMaterial(System.Int32,UnityEngine.Material@)">
            <summary>
            Function returning the Font Material corresponding to the provided hash code.
            </summary>
            <param name="hashCode"></param>
            <param name="material"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.MaterialReferenceManager.TryGetMaterialInternal(System.Int32,UnityEngine.Material@)">
            <summary>
            Internal function returning the Font Material corresponding to the provided hash code.
            </summary>
            <param name="hashCode"></param>
            <param name="material"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.MaterialReference.#ctor(System.Int32,TMPro.TMP_FontAsset,TMPro.TMP_SpriteAsset,UnityEngine.Material,System.Single)">
            <summary>
            Constructor for new Material Reference.
            </summary>
            <param name="index"></param>
            <param name="fontAsset"></param>
            <param name="spriteAsset"></param>
            <param name="material"></param>
            <param name="padding"></param>
        </member>
        <member name="M:TMPro.MaterialReference.Contains(TMPro.MaterialReference[],TMPro.TMP_FontAsset)">
            <summary>
            Function to check if a certain font asset is contained in the material reference array.
            </summary>
            <param name="materialReferences"></param>
            <param name="fontAsset"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.MaterialReference.AddMaterialReference(UnityEngine.Material,TMPro.TMP_FontAsset,TMPro.MaterialReference[],System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Function to add a new material reference and returning its index in the material reference array.
            </summary>
            <param name="material"></param>
            <param name="fontAsset"></param>
            <param name="materialReferences"></param>
            <param name="materialReferenceIndexLookup"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.MaterialReference.AddMaterialReference(UnityEngine.Material,TMPro.TMP_SpriteAsset,TMPro.MaterialReference[],System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            
            </summary>
            <param name="material"></param>
            <param name="spriteAsset"></param>
            <param name="materialReferences"></param>
            <param name="materialReferenceIndexLookup"></param>
            <returns></returns>
        </member>
        <member name="F:TMPro.TMP_Asset.hashCode">
            <summary>
            HashCode based on the name of the asset.
            </summary>
        </member>
        <member name="F:TMPro.TMP_Asset.material">
            <summary>
            The material used by this asset.
            </summary>
        </member>
        <member name="F:TMPro.TMP_Asset.materialHashCode">
            <summary>
            HashCode based on the name of the material assigned to this asset.
            </summary>
        </member>
        <member name="M:TMPro.TMP_ColorGradient.#ctor">
            <summary>
            Default Constructor which sets each of the colors as white.
            </summary>
        </member>
        <member name="M:TMPro.TMP_ColorGradient.#ctor(UnityEngine.Color)">
            <summary>
            Constructor allowing to set the default color of the Color Gradient.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:TMPro.TMP_ColorGradient.#ctor(UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color)">
            <summary>
            The vertex colors at the corners of the characters.
            </summary>
            <param name="color0">Top left color.</param>
            <param name="color1">Top right color.</param>
            <param name="color2">Bottom left color.</param>
            <param name="color3">Bottom right color.</param>
        </member>
        <member name="T:TMPro.TMP_FontWeights">
            <summary>
            Contains the font asset for the specified font weight styles.
            </summary>
        </member>
        <member name="P:TMPro.TMP_FontAsset.defaultFontAsset">
            <summary>
            Default Font Asset used as last resort when glyphs are missing.
            </summary>
        </member>
        <member name="P:TMPro.TMP_FontAsset.fontInfo">
            <summary>
            The general information about the font.
            </summary>
        </member>
        <member name="F:TMPro.TMP_FontAsset.fallbackFontAssets">
            <summary>
            List which contains the Fallback font assets for this font.
            </summary>
        </member>
        <member name="M:TMPro.TMP_FontAsset.OnValidate">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_FontAsset.AddFaceInfo(TMPro.FaceInfo)">
            <summary>
            
            </summary>
            <param name="faceInfo"></param>
        </member>
        <member name="M:TMPro.TMP_FontAsset.AddGlyphInfo(TMPro.TMP_Glyph[])">
            <summary>
            
            </summary>
            <param name="glyphInfo"></param>
        </member>
        <member name="M:TMPro.TMP_FontAsset.AddKerningInfo(TMPro.KerningTable)">
            <summary>
            
            </summary>
            <param name="kerningTable"></param>
        </member>
        <member name="M:TMPro.TMP_FontAsset.ReadFontDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_FontAsset.HasCharacter(System.Int32)">
            <summary>
            Function to check if a certain character exists in the font asset.
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_FontAsset.HasCharacter(System.Char)">
            <summary>
            Function to check if a certain character exists in the font asset.
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_FontAsset.HasCharacter(System.Char,System.Boolean)">
            <summary>
            Function to check if a character is contained in a font asset with the option to also check through fallback font assets.
            </summary>
            <param name="character"></param>
            <param name="searchFallbacks"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_FontAsset.HasCharacters(System.String,System.Collections.Generic.List{System.Char}@)">
            <summary>
            Function to check if certain characters exists in the font asset. Function returns a list of missing characters.
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_FontAsset.GetCharacters(TMPro.TMP_FontAsset)">
            <summary>
            Function to extract all the characters from a font asset.
            </summary>
            <param name="fontAsset"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_FontAsset.GetCharactersArray(TMPro.TMP_FontAsset)">
            <summary>
            Function which returns an array that contains all the characters from a font asset.
            </summary>
            <param name="fontAsset"></param>
            <returns></returns>
        </member>
        <member name="T:TMPro.TMP_InputField">
            <summary>
            Editable text input field.
            </summary>
        </member>
        <member name="F:TMPro.TMP_InputField.m_TextViewport">
            <summary>
            Text Text used to display the input's value.
            </summary>
        </member>
        <member name="F:TMPro.TMP_InputField.m_InputType">
            <summary>
            Type of data expected by the input field.
            </summary>
        </member>
        <member name="F:TMPro.TMP_InputField.m_AsteriskChar">
            <summary>
            The character used to hide text in password field.
            </summary>
        </member>
        <member name="F:TMPro.TMP_InputField.m_KeyboardType">
            <summary>
            Keyboard type applies to mobile keyboards that get shown.
            </summary>
        </member>
        <member name="F:TMPro.TMP_InputField.m_HideMobileInput">
            <summary>
            Should hide mobile input.
            </summary>
        </member>
        <member name="F:TMPro.TMP_InputField.m_CharacterValidation">
            <summary>
            What kind of validation to use with the input field's data.
            </summary>
        </member>
        <member name="F:TMPro.TMP_InputField.m_CharacterLimit">
            <summary>
            Maximum number of characters allowed before input no longer works.
            </summary>
        </member>
        <member name="F:TMPro.TMP_InputField.m_OnEndEdit">
            <summary>
            Event delegates triggered when the input field submits its data.
            </summary>
        </member>
        <member name="F:TMPro.TMP_InputField.m_OnSubmit">
            <summary>
            Event delegates triggered when the input field submits its data.
            </summary>
        </member>
        <member name="F:TMPro.TMP_InputField.m_OnFocusLost">
            <summary>
            Event delegates triggered when the input field focus is lost.
            </summary>
        </member>
        <member name="F:TMPro.TMP_InputField.m_OnValueChanged">
            <summary>
            Event delegates triggered when the input field changes its data.
            </summary>
        </member>
        <member name="F:TMPro.TMP_InputField.m_OnValidateInput">
            <summary>
            Custom validation callback.
            </summary>
        </member>
        <member name="F:TMPro.TMP_InputField.m_Text">
            <summary>
            Input field's value.
            </summary>
        </member>
        <member name="P:TMPro.TMP_InputField.shouldHideMobileInput">
            <summary>
            Should the mobile keyboard input be hidden.
            </summary>
        </member>
        <member name="P:TMPro.TMP_InputField.text">
            <summary>
            Input field's current text value.
            </summary>
        </member>
        <member name="P:TMPro.TMP_InputField.caretPositionInternal">
            <summary>
            Current position of the cursor.
            Getters are public Setters are protected
            </summary>
        </member>
        <member name="P:TMPro.TMP_InputField.caretPosition">
            <summary>
            Get: Returns the focus position as thats the position that moves around even during selection.
            Set: Set both the anchor and focus position such that a selection doesn't happen
            </summary>
        </member>
        <member name="P:TMPro.TMP_InputField.selectionAnchorPosition">
            <summary>
            Get: Returns the fixed position of selection
            Set: If Input.compositionString is 0 set the fixed position
            </summary>
        </member>
        <member name="P:TMPro.TMP_InputField.selectionFocusPosition">
            <summary>
            Get: Returns the variable position of selection
            Set: If Input.compositionString is 0 set the variable position
            </summary>
        </member>
        <member name="M:TMPro.TMP_InputField.LateUpdate">
            <summary>
            Update the text based on input.
            </summary>
        </member>
        <member name="M:TMPro.TMP_InputField.GetCharacterIndexFromPosition(UnityEngine.Vector2)">
            <summary>
            Given an input position in local space on the Text return the index for the selection cursor at this position.
            </summary>
        </member>
        <member name="F:TMPro.TMP_InputField.m_ProcessingEvent">
            <summary>
            Handle the specified event.
            </summary>
        </member>
        <member name="M:TMPro.TMP_InputField.OnUpdateSelected(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:TMPro.TMP_InputField.SendOnSubmit">
            <summary>
            Submit the input field's text.
            </summary>
        </member>
        <member name="M:TMPro.TMP_InputField.Append(System.String)">
            <summary>
            Append the specified text to the end of the current.
            </summary>
        </member>
        <member name="M:TMPro.TMP_InputField.UpdateLabel">
            <summary>
            Update the visual text Text.
            </summary>
        </member>
        <member name="M:TMPro.TMP_InputField.AdjustRectTransformRelativeToViewport(UnityEngine.Vector2,System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="startPosition"></param>
            <param name="height"></param>
            <param name="isCharVisible"></param>
        </member>
        <member name="M:TMPro.TMP_InputField.Validate(System.String,System.Int32,System.Char)">
            <summary>
            Validate the specified input.
            </summary>
        </member>
        <member name="T:TMPro.TMP_LineInfo">
            <summary>
            Structure which contains information about the individual lines of text.
            </summary>
        </member>
        <member name="M:TMPro.TMP_MaterialManager.GetStencilMaterial(UnityEngine.Material,System.Int32)">
            <summary>
            Create a Masking Material Instance for the given ID
            </summary>
            <param name="baseMaterial"></param>
            <param name="stencilID"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_MaterialManager.ReleaseStencilMaterial(UnityEngine.Material)">
            <summary>
            Function to release the stencil material.
            </summary>
            <param name="stencilMaterial"></param>
        </member>
        <member name="M:TMPro.TMP_MaterialManager.SetStencil(UnityEngine.Material,System.Int32)">
            <summary>
            Function to set the Material Stencil ID
            </summary>
            <param name="material"></param>
            <param name="stencilID"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_MaterialManager.GetStencilID(UnityEngine.GameObject)">
            <summary>
            Function to get the Stencil ID
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_MaterialManager.GetFallbackMaterial(UnityEngine.Material,UnityEngine.Material)">
            <summary>
            This function returns a material instance using the material properties of a previous material but using the font atlas texture of the new font asset.
            </summary>
            <param name="sourceMaterial">The material containing the source material properties to be copied to the new material.</param>
            <param name="targetMaterial">The font atlas texture that should be assigned to the new material.</param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_MaterialManager.AddFallbackMaterialReference(UnityEngine.Material)">
            <summary>
            
            </summary>
            <param name="targetMaterial"></param>
        </member>
        <member name="M:TMPro.TMP_MaterialManager.RemoveFallbackMaterialReference(UnityEngine.Material)">
            <summary>
            
            </summary>
            <param name="targetMaterial"></param>
        </member>
        <member name="M:TMPro.TMP_MaterialManager.CleanupFallbackMaterials">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_MaterialManager.ReleaseFallbackMaterial(UnityEngine.Material)">
            <summary>
            Function to release the fallback material.
            </summary>
            <param name="fallackMaterial"></param>
        </member>
        <member name="M:TMPro.TMP_MaterialManager.CopyMaterialPresetProperties(UnityEngine.Material,UnityEngine.Material)">
            <summary>
            Function to copy the properties of a source material preset to another while preserving the unique font asset properties of the destination material.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="T:TMPro.TMP_MeshInfo">
            <summary>
            Structure which contains the vertex attributes (geometry) of the text object.
            </summary>
        </member>
        <member name="M:TMPro.TMP_MeshInfo.#ctor(UnityEngine.Mesh,System.Int32)">
            <summary>
            Function to pre-allocate vertex attributes for a mesh of size X.
            </summary>
            <param name="mesh"></param>
            <param name="size"></param>
        </member>
        <member name="M:TMPro.TMP_MeshInfo.#ctor(UnityEngine.Mesh,System.Int32,System.Boolean)">
            <summary>
            Function to pre-allocate vertex attributes for a mesh of size X.
            </summary>
            <param name="mesh"></param>
            <param name="size"></param>
            <param name="isVolumetric"></param>
        </member>
        <member name="M:TMPro.TMP_MeshInfo.ResizeMeshInfo(System.Int32)">
            <summary>
            Function to resized the content of MeshData and re-assign normals, tangents and triangles.
            </summary>
            <param name="meshData"></param>
            <param name="size"></param>
        </member>
        <member name="M:TMPro.TMP_MeshInfo.ResizeMeshInfo(System.Int32,System.Boolean)">
            <summary>
            Function to resized the content of MeshData and re-assign normals, tangents and triangles.
            </summary>
            <param name="size"></param>
            <param name="isVolumetric"></param>
        </member>
        <member name="M:TMPro.TMP_MeshInfo.Clear">
            <summary>
            Function to clear the vertices while preserving the Triangles, Normals and Tangents.
            </summary>
        </member>
        <member name="M:TMPro.TMP_MeshInfo.Clear(System.Boolean)">
            <summary>
            Function to clear the vertices while preserving the Triangles, Normals and Tangents.
            </summary>
        </member>
        <member name="M:TMPro.TMP_MeshInfo.ClearUnusedVertices">
            <summary>
            Function to clear the vertices while preserving the Triangles, Normals and Tangents.
            </summary>
        </member>
        <member name="M:TMPro.TMP_MeshInfo.ClearUnusedVertices(System.Int32)">
            <summary>
            Function used to mark unused vertices as degenerate.
            </summary>
            <param name="startIndex"></param>
        </member>
        <member name="M:TMPro.TMP_MeshInfo.ClearUnusedVertices(System.Int32,System.Boolean)">
            <summary>
            Function used to mark unused vertices as degenerate an upload resulting data to the mesh.
            </summary>
            <param name="startIndex"></param>
        </member>
        <member name="M:TMPro.TMP_MeshInfo.SortGeometry(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Function to rearrange the quads of the text object to change their rendering order.
            </summary>
            <param name="sortingOrder"></param>
        </member>
        <member name="M:TMPro.TMP_MeshInfo.SwapVertexData(System.Int32,System.Int32)">
            <summary>
            Method to swap the vertex attributes between src and dst quads.
            </summary>
            <param name="src">Index of the first vertex attribute of the source character / quad.</param>
            <param name="dst">Index of the first vertex attribute of the destination character / quad.</param>
        </member>
        <member name="P:TMPro.TMP_Settings.enableWordWrapping">
            <summary>
            Controls if Word Wrapping will be enabled on newly created text objects by default.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.enableKerning">
            <summary>
            Controls if Kerning is enabled on newly created text objects by default.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.enableExtraPadding">
            <summary>
            Controls if Extra Padding is enabled on newly created text objects by default.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.enableTintAllSprites">
            <summary>
            Controls if TintAllSprites is enabled on newly created text objects by default.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.enableParseEscapeCharacters">
            <summary>
            Controls if Escape Characters will be parsed in the Text Input Box on newly created text objects.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.missingGlyphCharacter">
            <summary>
            The character the will be used as a replacement for missing glyphs in a font asset.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.warningsDisabled">
            <summary>
            Controls the display of warning message in the console.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.defaultFontAsset">
            <summary>
            Returns the Default Font Asset to be used by newly created text objects.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.defaultFontAssetPath">
            <summary>
            The relative path to a Resources folder in the project.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.defaultFontSize">
            <summary>
            The Default Point Size of newly created text objects.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.defaultTextContainerWidth">
            <summary>
            The Default Width of the Rect Transform or Text Container.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.defaultTextContainerHeight">
            <summary>
            The Default Height of the Rect Transform or Text Container.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.fallbackFontAssets">
            <summary>
            Returns the list of Fallback Fonts defined in the TMP Settings file.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.matchMaterialPreset">
            <summary>
            Controls whether or not TMP will create a matching material preset or use the default material of the fallback font asset.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.defaultSpriteAsset">
            <summary>
            The Default Sprite Asset to be used by default.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.defaultSpriteAssetPath">
            <summary>
            The relative path to a Resources folder in the project.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.defaultStyleSheet">
            <summary>
            The Default Style Sheet used by the text objects.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.leadingCharacters">
            <summary>
            Text file that contains the leading characters used for line breaking for Asian languages.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.followingCharacters">
            <summary>
            Text file that contains the following characters used for line breaking for Asian languages.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.linebreakingRules">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMPro.TMP_Settings.instance">
            <summary>
            Get a singleton instance of the settings class.
            </summary>
        </member>
        <member name="M:TMPro.TMP_Settings.LoadDefaultSettings">
            <summary>
            Static Function to load the TMP Settings file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Settings.GetSettings">
            <summary>
            Returns the Sprite Asset defined in the TMP Settings file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Settings.GetFontAsset">
            <summary>
            Returns the Font Asset defined in the TMP Settings file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Settings.GetSpriteAsset">
            <summary>
            Returns the Sprite Asset defined in the TMP Settings file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Settings.GetStyleSheet">
            <summary>
            Returns the Sprite Asset defined in the TMP Settings file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Settings.GetCharacters(UnityEngine.TextAsset)">
            <summary>
             Get the characters from the line breaking files
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="P:TMPro.TMP_SpriteAsset.defaultSpriteAsset">
            <summary>
            Static reference to the default font asset included with TextMesh Pro.
            </summary>
        </member>
        <member name="M:TMPro.TMP_SpriteAsset.OnValidate">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_SpriteAsset.GetDefaultSpriteMaterial">
            <summary>
            Create a material for the sprite asset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_SpriteAsset.GetSpriteIndex(System.Int32)">
            <summary>
            Function which returns the sprite index using the hashcode of the name
            </summary>
            <param name="hashCode"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_SpriteAsset.LoadSprites">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_SpriteAsset.GetSprites">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:TMPro.TMP_Style.name" -->
        <member name="P:TMPro.TMP_Style.hashCode">
            <summary>
            The hash code corresponding to the name of this style.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:TMPro.TMP_Style.styleOpeningDefinition" -->
        <!-- Badly formed XML comment ignored for member "P:TMPro.TMP_Style.styleClosingDefinition" -->
        <!-- Badly formed XML comment ignored for member "M:TMPro.TMP_Style.RefreshStyle" -->
        <member name="P:TMPro.TMP_StyleSheet.instance">
            <summary>
            Get a singleton instance of the TMP_StyleSheet
            </summary>
        </member>
        <member name="M:TMPro.TMP_StyleSheet.LoadDefaultStyleSheet">
            <summary>
            Static Function to load the Default Style Sheet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_StyleSheet.GetStyle(System.Int32)">
            <summary>
            Function to retrieve the Style matching the HashCode.
            </summary>
            <param name="hashCode"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_StyleSheet.GetStyleInternal(System.Int32)">
            <summary>
            Internal method to retrieve the Style matching the Hashcode.
            </summary>
            <param name="hashCode"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_StyleSheet.RefreshStyles">
            <summary>
            Function to refresh the Style Dictionary.
            </summary>
        </member>
        <member name="M:TMPro.TMP_StyleSheet.LoadStyleDictionaryInternal">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMesh.fontAsset">
            <summary>
            The TMP Font Asset assigned to this sub text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMesh.spriteAsset">
            <summary>
            The TMP Sprite Asset assigned to this sub text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMesh.material">
            <summary>
            The material to be assigned to this object. Returns an instance of the material.
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMesh.sharedMaterial">
            <summary>
            The material to be assigned to this text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMesh.fallbackMaterial">
            <summary>
            The fallback material created from the properties of the fallback source material.
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMesh.fallbackSourceMaterial">
            <summary>
            The source material used by the fallback font
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMesh.isDefaultMaterial">
            <summary>
            Is the text object using the default font asset material.
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMesh.padding">
            <summary>
            Padding value resulting for the property settings on the material.
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMesh.renderer">
            <summary>
            The Mesh Renderer of this text sub object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMesh.meshFilter">
            <summary>
            The MeshFilter of this text sub object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMesh.mesh">
            <summary>
            The Mesh of this text sub object.
            </summary>
        </member>
        <member name="M:TMPro.TMP_SubMesh.ON_TMP_SETTINGS_CHANGED">
            <summary>
            Event received when the TMP Settings are changed.
            </summary>
        </member>
        <member name="M:TMPro.TMP_SubMesh.CreateMaterialInstance(UnityEngine.Material)">
            <summary>
            Method used to create an instance of the material
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_SubMesh.GetSharedMaterial">
            <summary>
            Method returning the shared material assigned to the text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_SubMesh.SetSharedMaterial(UnityEngine.Material)">
            <summary>
            Method to set the shared material.
            </summary>
            <param name="mat"></param>
        </member>
        <member name="M:TMPro.TMP_SubMesh.GetPaddingForMaterial">
            <summary>
            Function called when the padding value for the material needs to be re-calculated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_SubMesh.UpdateMeshPadding(System.Boolean,System.Boolean)">
            <summary>
            Function to update the padding values of the object.
            </summary>
            <param name="isExtraPadding"></param>
            <param name="isBold"></param>
        </member>
        <member name="M:TMPro.TMP_SubMesh.SetVerticesDirty">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_SubMesh.SetMaterialDirty">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_SubMesh.UpdateMaterial">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMeshUI.fontAsset">
            <summary>
            The TMP Font Asset assigned to this sub text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMeshUI.spriteAsset">
            <summary>
            The TMP Sprite Asset assigned to this sub text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMeshUI.mainTexture">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMeshUI.material">
            <summary>
            The material to be assigned to this object. Returns an instance of the material.
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMeshUI.sharedMaterial">
            <summary>
            The material to be assigned to this text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMeshUI.fallbackMaterial">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMeshUI.fallbackSourceMaterial">
            <summary>
            The source material used by the fallback font
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMeshUI.materialForRendering">
            <summary>
            Get the material that will be used for rendering.
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMeshUI.isDefaultMaterial">
            <summary>
            Is the text object using the default font asset material.
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMeshUI.padding">
            <summary>
            Padding value resulting for the property settings on the material.
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMeshUI.canvasRenderer">
            <summary>
            The Mesh Renderer of this text sub object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_SubMeshUI.mesh">
            <summary>
            The Mesh of this text sub object.
            </summary>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.AddSubTextObject(TMPro.TextMeshProUGUI,TMPro.MaterialReference)">
            <summary>
            Function to add a new sub text object.
            </summary>
            <param name="textComponent"></param>
            <param name="materialReference"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.OnEnable">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.ON_TMP_SETTINGS_CHANGED">
            <summary>
            Event received when the TMP Settings are changed.
            </summary>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.OnTransformParentChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.GetModifiedMaterial(UnityEngine.Material)">
            <summary>
            Function returning the modified material for masking if necessary.
            </summary>
            <param name="baseMaterial"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.GetPaddingForMaterial">
            <summary>
            Function called when the padding value for the material needs to be re-calculated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.GetPaddingForMaterial(UnityEngine.Material)">
            <summary>
            Function called when the padding value for the material needs to be re-calculated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.UpdateMeshPadding(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="isExtraPadding"></param>
            <param name="isBold"></param>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.SetAllDirty">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.SetVerticesDirty">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.SetLayoutDirty">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.SetMaterialDirty">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.SetPivotDirty">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.UpdateGeometry">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.Rebuild(UnityEngine.UI.CanvasUpdate)">
            <summary>
            
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.RefreshMaterial">
            <summary>
            Function to update the material from the parent text object.
            </summary>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.UpdateMaterial">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.RecalculateClipping">
            <summary>
            Method called when the state of a parent changes.
            </summary>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.RecalculateMasking">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.GetMaterial">
            <summary>
            Method which returns an instance of the shared material
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.CreateMaterialInstance(UnityEngine.Material)">
            <summary>
            Method used to create an instance of the material
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.GetSharedMaterial">
            <summary>
            Method returning the shared material assigned to the text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_SubMeshUI.SetSharedMaterial(UnityEngine.Material)">
            <summary>
            Method to set the shared material.
            </summary>
            <param name="mat"></param>
        </member>
        <member name="T:TMPro.TextRenderFlags">
            <summary>
            Flags controlling what vertex data gets pushed to the mesh.
            </summary>
        </member>
        <member name="T:TMPro.TMP_Text">
            <summary>
            Base class which contains common properties and functions shared between the TextMeshPro and TextMeshProUGUI component.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.text">
            <summary>
            A string containing the text to be displayed.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.isRightToLeftText">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.font">
            <summary>
            The Font Asset to be assigned to this text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.fontSharedMaterial">
            <summary>
            The material to be assigned to this text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.fontSharedMaterials">
            <summary>
            An array containing the materials used by the text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.fontMaterial">
            <summary>
            The material to be assigned to this text object. An instance of the material will be assigned to the object's renderer.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.fontMaterials">
            <summary>
            The materials to be assigned to this text object. An instance of the materials will be assigned.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.color">
            <summary>
            This is the default vertex color assigned to each vertices. Color tags will override vertex colors unless the overrideColorTags is set.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.alpha">
            <summary>
            Sets the vertex color alpha value.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.enableVertexGradient">
            <summary>
            Determines if Vertex Color Gradient should be used
            </summary>
            <value><c>true</c> if enable vertex gradient; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TMPro.TMP_Text.colorGradient">
            <summary>
            Sets the vertex colors for each of the 4 vertices of the character quads.
            </summary>
            <value>The color gradient.</value>
        </member>
        <member name="P:TMPro.TMP_Text.colorGradientPreset">
            <summary>
            Set the vertex colors of the 4 vertices of each character quads.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.spriteAsset">
            <summary>
            Default Sprite Asset used by the text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.tintAllSprites">
            <summary>
            Determines whether or not the sprite color is multiplies by the vertex color of the text.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.overrideColorTags">
            <summary>
            This overrides the color tags forcing the vertex colors to be the default font color.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.faceColor">
            <summary>
            Sets the color of the _FaceColor property of the assigned material. Changing face color will result in an instance of the material.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.outlineColor">
            <summary>
            Sets the color of the _OutlineColor property of the assigned material. Changing outline color will result in an instance of the material.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.outlineWidth">
            <summary>
            Sets the thickness of the outline of the font. Setting this value will result in an instance of the material.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.fontSize">
            <summary>
            The point size of the font.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.fontScale">
            <summary>
            The scale of the current text.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.fontWeight">
            <summary>
            Control the weight of the font if an alternative font asset is assigned for the given weight in the font asset editor.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.pixelsPerUnit">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.enableAutoSizing">
            <summary>
            Enable text auto-sizing
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.fontSizeMin">
            <summary>
            Minimum point size of the font when text auto-sizing is enabled.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.fontSizeMax">
            <summary>
            Maximum point size of the font when text auto-sizing is enabled.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.fontStyle">
            <summary>
            The style of the text
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.isUsingBold">
            <summary>
            Property used in conjunction with padding calculation for the geometry.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.alignment">
            <summary>
            Text alignment options
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.characterSpacing">
            <summary>
            The amount of additional spacing between characters.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.lineSpacing">
            <summary>
            The amount of additional spacing to add between each lines of text.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.paragraphSpacing">
            <summary>
            The amount of additional spacing to add between each lines of text.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.characterWidthAdjustment">
            <summary>
            Percentage the width of characters can be adjusted before text auto-sizing begins to reduce the point size.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.enableWordWrapping">
            <summary>
            Controls whether or not word wrapping is applied. When disabled, the text will be displayed on a single line.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.wordWrappingRatios">
            <summary>
            Controls the blending between using character and word spacing to fill-in the space for justified text.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.enableAdaptiveJustification">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.OverflowMode">
            <summary>
            Controls the Text Overflow Mode
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.enableKerning">
            <summary>
            Determines if kerning is enabled or disabled.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.extraPadding">
            <summary>
            Adds extra padding around each character. This may be necessary when the displayed text is very small to prevent clipping.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.richText">
            <summary>
            Enables or Disables Rich Text Tags
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.parseCtrlCharacters">
            <summary>
            Enables or Disables parsing of CTRL characters in input text.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.isOverlay">
            <summary>
            Sets the RenderQueue along with Ztest to force the text to be drawn last and on top of scene elements.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:TMPro.TMP_Text.isOrthographic" -->
        <member name="P:TMPro.TMP_Text.enableCulling">
            <summary>
            Sets the culling on the shaders. Note changing this value will result in an instance of the material.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.ignoreVisibility">
            <summary>
            Forces objects that are not visible to get refreshed.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.horizontalMapping">
            <summary>
            Controls how the face and outline textures will be applied to the text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.verticalMapping">
            <summary>
            Controls how the face and outline textures will be applied to the text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.renderMode">
            <summary>
            Determines if the Mesh will be rendered.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.maxVisibleCharacters">
            <summary>
            Allows to control how many characters are visible from the input.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.maxVisibleWords">
            <summary>
            Allows to control how many words are visible from the input.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.maxVisibleLines">
            <summary>
            Allows control over how many lines of text are displayed.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.useMaxVisibleDescender">
            <summary>
            Determines if the text's vertical alignment will be adjusted based on visible descender of the text.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.pageToDisplay">
            <summary>
            Controls which page of text is shown
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.margin">
            <summary>
            The margins of the text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.textInfo">
            <summary>
            Returns data about the text object which includes information about each character, word, line, link, etc.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.havePropertiesChanged">
            <summary>
            Property tracking if any of the text properties have changed. Flag is set before the text is regenerated.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.isUsingLegacyAnimationComponent">
            <summary>
            Property to handle legacy animation component.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.transform">
            <summary>
            Returns are reference to the Transform
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.rectTransform">
            <summary>
            Returns are reference to the RectTransform
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.autoSizeTextContainer">
            <summary>
            Enables control over setting the size of the text container to match the text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.mesh">
            <summary>
            The mesh used by the font asset and material assigned to the text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.isVolumetricText">
            <summary>
            Determines if the geometry of the characters will be quads or volumetric (cubes).
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.bounds">
            <summary>
            Returns the bounds of the mesh of the text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.textBounds">
            <summary>
            Returns the bounds of the text of the text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.flexibleHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.flexibleWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.minHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.minWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.preferredWidth">
            <summary>
            Computed preferred width of the text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.preferredHeight">
            <summary>
            Computed preferred height of the text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.renderedWidth">
            <summary>
            Compute the rendered width of the text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.renderedHeight">
            <summary>
            Compute the rendered height of the text object.
            </summary>
        </member>
        <member name="P:TMPro.TMP_Text.layoutPriority">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_Text.LoadFontAsset">
            <summary>
            Method which derived classes need to override to load Font Assets.
            </summary>
        </member>
        <member name="M:TMPro.TMP_Text.SetSharedMaterial(UnityEngine.Material)">
            <summary>
            Function called internally when a new shared material is assigned via the fontSharedMaterial property.
            </summary>
            <param name="mat"></param>
        </member>
        <member name="M:TMPro.TMP_Text.GetMaterial(UnityEngine.Material)">
            <summary>
            Function called internally when a new material is assigned via the fontMaterial property.
            </summary>
        </member>
        <member name="M:TMPro.TMP_Text.SetFontBaseMaterial(UnityEngine.Material)">
            <summary>
            Function called internally when assigning a new base material.
            </summary>
            <param name="mat"></param>
        </member>
        <member name="M:TMPro.TMP_Text.GetSharedMaterials">
            <summary>
            Method which returns an array containing the materials used by the text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.SetSharedMaterials(UnityEngine.Material[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_Text.GetMaterials(UnityEngine.Material[])">
            <summary>
            Method returning instances of the materials used by the text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.CreateMaterialInstance(UnityEngine.Material)">
            <summary>
            Function used to create an instance of the material
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.SetFaceColor(UnityEngine.Color32)">
            <summary>
            Function called internally to set the face color of the material. This will results in an instance of the material.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:TMPro.TMP_Text.SetOutlineColor(UnityEngine.Color32)">
            <summary>
            Function called internally to set the outline color of the material. This will results in an instance of the material.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:TMPro.TMP_Text.SetOutlineThickness(System.Single)">
            <summary>
            Function called internally to set the outline thickness property of the material. This will results in an instance of the material.
            </summary>
            <param name="thickness"></param>
        </member>
        <member name="M:TMPro.TMP_Text.SetShaderDepth">
            <summary>
            Set the Render Queue and ZTest mode on the current material
            </summary>
        </member>
        <member name="M:TMPro.TMP_Text.SetCulling">
            <summary>
            Set the culling mode on the material.
            </summary>
        </member>
        <member name="M:TMPro.TMP_Text.GetPaddingForMaterial">
            <summary>
            Get the padding value for the currently assigned material
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.GetPaddingForMaterial(UnityEngine.Material)">
            <summary>
            Get the padding value for the given material
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.GetTextContainerLocalCorners">
            <summary>
            Method to return the local corners of the Text Container or RectTransform.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.ForceMeshUpdate">
            <summary>
            Function to force the regeneration of the text object.
            </summary>
        </member>
        <member name="M:TMPro.TMP_Text.ForceMeshUpdate(System.Boolean)">
            <summary>
            Function to force the regeneration of the text object.
            </summary>
            <param name="ignoreActiveState">If set to true, the text object will be regenerated regardless of is active state.</param>
        </member>
        <member name="M:TMPro.TMP_Text.SetTextInternal(System.String)">
            <summary>
            Internal function used by the Text Input Field to populate TMP_TextInfo data. 
            </summary>
        </member>
        <member name="M:TMPro.TMP_Text.UpdateGeometry(UnityEngine.Mesh,System.Int32)">
            <summary>
            Function to update the geometry of the main and sub text objects.
            </summary>
            <param name="mesh"></param>
            <param name="index"></param>
        </member>
        <member name="M:TMPro.TMP_Text.UpdateVertexData(TMPro.TMP_VertexDataUpdateFlags)">
            <summary>
            Function to push the updated vertex data into the mesh and renderer.
            </summary>
        </member>
        <member name="M:TMPro.TMP_Text.UpdateVertexData">
            <summary>
            Function to push the updated vertex data into the mesh and renderer.
            </summary>
        </member>
        <member name="M:TMPro.TMP_Text.SetVertices(UnityEngine.Vector3[])">
            <summary>
            Function to push a new set of vertices to the mesh.
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:TMPro.TMP_Text.UpdateMeshPadding">
            <summary>
            Function to be used to force recomputing of character padding when Shader / Material properties have been changed via script.
            </summary>
        </member>
        <member name="M:TMPro.TMP_Text.CrossFadeColor(UnityEngine.Color,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Tweens the CanvasRenderer color associated with this Graphic.
            </summary>
            <param name="targetColor">Target color.</param>
            <param name="duration">Tween duration.</param>
            <param name="ignoreTimeScale">Should ignore Time.scale?</param>
            <param name="useAlpha">Should also Tween the alpha channel?</param>
        </member>
        <member name="M:TMPro.TMP_Text.CrossFadeAlpha(System.Single,System.Single,System.Boolean)">
            <summary>
            Tweens the alpha of the CanvasRenderer color associated with this Graphic.
            </summary>
            <param name="alpha">Target alpha.</param>
            <param name="duration">Duration of the tween in seconds.</param>
            <param name="ignoreTimeScale">Should ignore Time.scale?</param>
        </member>
        <member name="M:TMPro.TMP_Text.InternalCrossFadeColor(UnityEngine.Color,System.Single,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="targetColor"></param>
            <param name="duration"></param>
            <param name="ignoreTimeScale"></param>
            <param name="useAlpha"></param>
            <param name="useRGB"></param>
        </member>
        <member name="M:TMPro.TMP_Text.InternalCrossFadeAlpha(System.Single,System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="alpha"></param>
            <param name="duration"></param>
            <param name="ignoreTimeScale"></param>
        </member>
        <member name="M:TMPro.TMP_Text.ParseInputText">
            <summary>
            Method to parse the input text based on its source
            </summary>
        </member>
        <member name="M:TMPro.TMP_Text.SetText(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:TMPro.TMP_Text.SetText(System.String,System.Single)">
            <summary>
            <para>Formatted string containing a pattern and a value representing the text to be rendered.</para>
            <para>ex. TextMeshPro.SetText ("Number is {0:1}.", 5.56f);</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="text">String containing the pattern."</param>
            <param name="arg0">Value is a float.</param>
        </member>
        <member name="M:TMPro.TMP_Text.SetText(System.String,System.Single,System.Single)">
            <summary>
            <para>Formatted string containing a pattern and a value representing the text to be rendered.</para>
            <para>ex. TextMeshPro.SetText ("First number is {0} and second is {1:2}.", 10, 5.756f);</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="text">String containing the pattern."</param>
            <param name="arg0">Value is a float.</param>
            <param name="arg1">Value is a float.</param>
        </member>
        <member name="M:TMPro.TMP_Text.SetText(System.String,System.Single,System.Single,System.Single)">
            <summary>
            <para>Formatted string containing a pattern and a value representing the text to be rendered.</para>
            <para>ex. TextMeshPro.SetText ("A = {0}, B = {1} and C = {2}.", 2, 5, 7);</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="text">String containing the pattern."</param>
            <param name="arg0">Value is a float.</param>
            <param name="arg1">Value is a float.</param>
            <param name="arg2">Value is a float.</param>
        </member>
        <member name="M:TMPro.TMP_Text.SetText(System.Text.StringBuilder)">
            <summary>
            Set the text using a StringBuilder.
            </summary>
            <description>
            Using a StringBuilder instead of concatenating strings prevents memory pollution with temporary objects.
            </description>
            <param name="text">StringBuilder with text to display.</param>
        </member>
        <member name="M:TMPro.TMP_Text.SetCharArray(System.Char[])">
            <summary>
            Character array containing the text to be displayed.
            </summary>
            <param name="charArray"></param>
        </member>
        <member name="M:TMPro.TMP_Text.SetTextArrayToCharArray(System.Char[],System.Int32[]@)">
            <summary>
            Copies Content of formatted SetText() to charBuffer.
            </summary>
            <param name="charArray"></param>
            <param name="charBuffer"></param>
        </member>
        <member name="M:TMPro.TMP_Text.StringToCharArray(System.String,System.Int32[]@)">
            <summary>
            Method to store the content of a string into an integer array.
            </summary>
            <param name="text"></param>
            <param name="chars"></param>
        </member>
        <member name="M:TMPro.TMP_Text.StringBuilderToIntArray(System.Text.StringBuilder,System.Int32[]@)">
            <summary>
            Copy contents of StringBuilder into int array.
            </summary>
            <param name="text">Text to copy.</param>
            <param name="chars">Array to store contents.</param>
        </member>
        <member name="M:TMPro.TMP_Text.AddFloatToCharArray(System.Single,System.Int32@,System.Int32)">
            <summary>
            Function used in conjunction with SetText()
            </summary>
            <param name="number"></param>
            <param name="index"></param>
            <param name="precision"></param>
        </member>
        <member name="M:TMPro.TMP_Text.AddIntToCharArray(System.Int32,System.Int32@,System.Int32)">
            <summary>
            // Function used in conjunction with SetText()
            </summary>
            <param name="number"></param>
            <param name="index"></param>
            <param name="precision"></param>
        </member>
        <member name="M:TMPro.TMP_Text.SetArraySizes(System.Int32[])">
            <summary>
            Method used to determine the number of visible characters and required buffer allocations.
            </summary>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.GenerateTextMesh">
            <summary>
            Method which parses the text input, does the layout of the text as well as generating the geometry.
            </summary>
        </member>
        <member name="M:TMPro.TMP_Text.GetPreferredValues">
            <summary>
            Function to Calculate the Preferred Width and Height of the text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.GetPreferredValues(System.Single,System.Single)">
            <summary>
            Function to Calculate the Preferred Width and Height of the text object given the provided width and height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.GetPreferredValues(System.String)">
            <summary>
            Function to Calculate the Preferred Width and Height of the text object given a certain string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.GetPreferredValues(System.String,System.Single,System.Single)">
            <summary>
             Function to Calculate the Preferred Width and Height of the text object given a certain string and size of text container.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.GetPreferredWidth">
            <summary>
            Method to calculate the preferred width of a text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.GetPreferredWidth(UnityEngine.Vector2)">
            <summary>
            Method to calculate the preferred width of a text object.
            </summary>
            <param name="margin"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.GetPreferredHeight">
            <summary>
            Method to calculate the preferred height of a text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.GetPreferredHeight(UnityEngine.Vector2)">
            <summary>
            Method to calculate the preferred height of a text object.
            </summary>
            <param name="margin"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.GetRenderedValues">
            <summary>
            Method returning the rendered width and height of the text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.GetRenderedWidth">
            <summary>
            Method returning the rendered width of the text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.GetRenderedHeight">
            <summary>
            Method returning the rendered height of the text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.CalculatePreferredValues(System.Single,UnityEngine.Vector2)">
            <summary>
            Method to calculate the preferred width and height of the text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.GetCompoundBounds">
            <summary>
            Method returning the compound bounds of the text object and child sub objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.GetTextBounds">
            <summary>
            Method which returns the bounds of the text object;
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.AdjustLineOffset(System.Int32,System.Int32,System.Single)">
            <summary>
            Method to adjust line spacing as a result of using different fonts or font point size.
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <param name="offset"></param>
        </member>
        <member name="M:TMPro.TMP_Text.ResizeLineExtents(System.Int32)">
            <summary>
            Function to increase the size of the Line Extents Array.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:TMPro.TMP_Text.GetTextInfo(System.String)">
            <summary>
            Function used to evaluate the length of a text string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.ComputeMarginSize">
            <summary>
            Function to force an update of the margin size.
            </summary>
        </member>
        <member name="M:TMPro.TMP_Text.GetArraySizes(System.Int32[])">
            <summary>
            Function used in conjunction with GetTextInfo to figure out Array allocations.
            </summary>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.SaveWordWrappingState(TMPro.WordWrapState@,System.Int32,System.Int32)">
            <summary>
            Save the State of various variables used in the mesh creation loop in conjunction with Word Wrapping
            </summary>
            <param name="state"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:TMPro.TMP_Text.RestoreWordWrappingState(TMPro.WordWrapState@)">
            <summary>
            Restore the State of various variables used in the mesh creation loop.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.SaveGlyphVertexInfo(System.Single,System.Single,UnityEngine.Color32)">
            <summary>
            Store vertex information for each character.
            </summary>
            <param name="style_padding">Style_padding.</param>
            <param name="vertexColor">Vertex color.</param>
        </member>
        <member name="M:TMPro.TMP_Text.SaveSpriteVertexInfo(UnityEngine.Color32)">
            <summary>
            Store vertex information for each sprite.
            </summary>
            <param name="padding"></param>
            <param name="style_padding"></param>
            <param name="vertexColor"></param>
        </member>
        <member name="M:TMPro.TMP_Text.FillCharacterVertexBuffers(System.Int32,System.Int32)">
            <summary>
            Store vertex attributes into the appropriate TMP_MeshInfo.
            </summary>
            <param name="i"></param>
            <param name="index_X4"></param>
        </member>
        <member name="M:TMPro.TMP_Text.FillSpriteVertexBuffers(System.Int32,System.Int32)">
            <summary>
            Fill Vertex Buffers for Sprites
            </summary>
            <param name="i"></param>
            <param name="spriteIndex_X4"></param>
        </member>
        <member name="M:TMPro.TMP_Text.DrawUnderlineMesh(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32@,System.Single,System.Single,System.Single,System.Single,UnityEngine.Color32)">
            <summary>
            Method to add the underline geometry.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="startScale"></param>
            <param name="endScale"></param>
            <param name="maxScale"></param>
            <param name="underlineColor"></param>
        </member>
        <member name="M:TMPro.TMP_Text.GetSpecialCharacters(TMPro.TMP_FontAsset)">
            <summary>
            Method used to find and cache references to the Underline and Ellipsis characters.
            </summary>
            <param name=""></param>
        </member>
        <member name="M:TMPro.TMP_Text.GetFontAssetForWeight(System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.SetActiveSubMeshes(System.Boolean)">
            <summary>
            Method to Enable or Disable child SubMesh objects.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:TMPro.TMP_Text.PackUV(System.Single,System.Single,System.Single)">
            <summary>
            Function to pack scale information in the UV2 Channel.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.PackUV(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.HexToInt(System.Char)">
            <summary>
            Method to convert Hex to Int
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.GetUTF16(System.Int32)">
            <summary>
            Convert UTF-16 Hex to Char
            </summary>
            <returns>The Unicode hex.</returns>
            <param name="i">The index.</param>
        </member>
        <member name="M:TMPro.TMP_Text.GetUTF32(System.Int32)">
            <summary>
            Convert UTF-32 Hex to Char
            </summary>
            <returns>The Unicode hex.</returns>
            <param name="i">The index.</param>
        </member>
        <member name="M:TMPro.TMP_Text.HexCharsToColor(System.Char[],System.Int32)">
            <summary>
            Method to convert Hex color values to Color32
            </summary>
            <param name="hexChars"></param>
            <param name="tagCount"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.HexCharsToColor(System.Char[],System.Int32,System.Int32)">
            <summary>
            Method to convert Hex Color values to Color32
            </summary>
            <param name="hexChars"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.ConvertToFloat(System.Char[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a float value from char[] assuming we know the position of the start, end and decimal point.
            </summary>
            <param name="chars"></param> The Char[] containing the numerical sequence.
            <param name="startIndex"></param> The index of the start of the numerical sequence.
            <param name="endIndex"></param> The index of the last number in the numerical sequence.
            <param name="decimalPointIndex"></param> The index of the decimal point if any.
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_Text.ValidateHtmlTag(System.Int32[],System.Int32,System.Int32@)">
            <summary>
            Function to identify and validate the rich tag. Returns the position of the > if the tag was valid.
            </summary>
            <param name="chars"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="T:TMPro.TMP_TextElement">
            <summary>
            Base class for all text elements like characters (glyphs) and sprites.
            </summary>
        </member>
        <member name="T:TMPro.TMP_TextInfo">
            <summary>
            Class which contains information about every element contained within the text object.
            </summary>
        </member>
        <member name="M:TMPro.TMP_TextInfo.Clear">
            <summary>
            Function to clear the counters of the text object.
            </summary>
        </member>
        <member name="M:TMPro.TMP_TextInfo.ClearMeshInfo(System.Boolean)">
            <summary>
            Function to clear the content of the MeshInfo array while preserving the Triangles, Normals and Tangents.
            </summary>
        </member>
        <member name="M:TMPro.TMP_TextInfo.ClearAllMeshInfo">
            <summary>
            Function to clear the content of all the MeshInfo arrays while preserving their Triangles, Normals and Tangents.
            </summary>
        </member>
        <member name="M:TMPro.TMP_TextInfo.ResetVertexLayout(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TMP_TextInfo.ClearUnusedVertices(TMPro.MaterialReference[])">
            <summary>
            Function used to mark unused vertices as degenerate.
            </summary>
            <param name="materials"></param>
        </member>
        <member name="M:TMPro.TMP_TextInfo.ClearLineInfo">
            <summary>
            Function to clear and initialize the lineInfo array. 
            </summary>
        </member>
        <member name="M:TMPro.TMP_TextInfo.CopyMeshInfoVertexData">
            <summary>
            Function to copy the MeshInfo Arrays and their primary vertex data content.
            </summary>
            <returns>A copy of the MeshInfo[]</returns>
        </member>
        <member name="M:TMPro.TMP_TextInfo.Resize``1(``0[]@,System.Int32)">
            <summary>
            Function to resize any of the structure contained in the TMP_TextInfo class.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="size"></param>
        </member>
        <member name="M:TMPro.TMP_TextInfo.Resize``1(``0[]@,System.Int32,System.Boolean)">
            <summary>
            Function to resize any of the structure contained in the TMP_TextInfo class.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="size"></param>
            <param name="isFixedSize"></param>
        </member>
        <member name="T:TMPro.CaretInfo">
            <summary>
            Structure which contains the character index and position of caret relative to the character.
            </summary>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.GetCursorInsertionIndex(TMPro.TMP_Text,UnityEngine.Vector3,UnityEngine.Camera)">
            <summary>
            
            </summary>
            <param name="textComponent">A reference to the text object.</param>
            <param name="position">Position to check for intersection.</param>
            <param name="camera">The scene camera which may be assigned to a Canvas using ScreenSpace Camera or WorldSpace render mode. Set to null is using ScreenSpace Overlay.</param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.GetCursorIndexFromPosition(TMPro.TMP_Text,UnityEngine.Vector3,UnityEngine.Camera)">
            <summary>
            Function returning the index of the character whose origin is closest to the cursor.
            </summary>
            <param name="textComponent">A reference to the text object.</param>
            <param name="position">Position to check for intersection.</param>
            <param name="camera">The scene camera which may be assigned to a Canvas using ScreenSpace Camera or WorldSpace render mode. Set to null is using ScreenSpace Overlay.</param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.GetCursorIndexFromPosition(TMPro.TMP_Text,UnityEngine.Vector3,UnityEngine.Camera,TMPro.CaretPosition@)">
            <summary>
            Function returning the index of the character whose origin is closest to the cursor.
            </summary>
            <param name="textComponent">A reference to the text object.</param>
            <param name="position">Position to check for intersection.</param>
            <param name="camera">The scene camera which may be assigned to a Canvas using ScreenSpace Camera or WorldSpace render mode. Set to null is using ScreenSpace Overlay.</param>
            <param name="cursor">The position of the cursor insertion position relative to the position.</param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.IsIntersectingRectTransform(UnityEngine.RectTransform,UnityEngine.Vector3,UnityEngine.Camera)">
            <summary>
            Function used to determine if the position intersects with the RectTransform.
            </summary>
            <param name="rectTransform">A reference to the RectTranform of the text object.</param>
            <param name="position">Position to check for intersection.</param>
            <param name="camera">The scene camera which may be assigned to a Canvas using ScreenSpace Camera or WorldSpace render mode. Set to null is using ScreenSpace Overlay.</param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.FindIntersectingCharacter(TMPro.TMP_Text,UnityEngine.Vector3,UnityEngine.Camera,System.Boolean)">
            <summary>
            Function returning the index of the character at the given position (if any).
            </summary>
            <param name="text">A reference to the TextMeshPro component.</param>
            <param name="position">Position to check for intersection.</param>
            <param name="camera">The scene camera which is rendering the text or whichever one might be assigned to a Canvas using ScreenSpace Camera or WorldSpace render mode. Set to null is using ScreenSpace Overlay.</param>
            <param name="visibleOnly">Only check for visible characters.</param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.FindNearestCharacter(TMPro.TMP_Text,UnityEngine.Vector3,UnityEngine.Camera,System.Boolean)">
            <summary>
            Function to find the nearest character to position.
            </summary>
            <param name="text">A reference to the TMP Text component.</param>
            <param name="position">Position to check for intersection.</param>
            <param name="camera">The scene camera which may be assigned to a Canvas using ScreenSpace Camera or WorldSpace render mode. Set to null is using ScreenSpace Overlay.</param>
            <param name="visibleOnly">Only check for visible characters.</param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.FindIntersectingWord(TMPro.TMP_Text,UnityEngine.Vector3,UnityEngine.Camera)">
            <summary>
            Function returning the index of the word at the given position (if any).
            </summary>
            <param name="text">A reference to the TMP_Text component.</param>
            <param name="position">Position to check for intersection.</param>
            <param name="camera">The scene camera which may be assigned to a Canvas using ScreenSpace Camera or WorldSpace render mode. Set to null is using ScreenSpace Overlay.</param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.FindNearestWord(TMPro.TMP_Text,UnityEngine.Vector3,UnityEngine.Camera)">
            <summary>
            Function returning the index of the word at the given position (if any).
            </summary>
            <param name="text">A reference to the TMP_Text component.</param>
            <param name="position"></param>
            <param name="camera">The scene camera which may be assigned to a Canvas using ScreenSpace Camera or WorldSpace render mode. Set to null is using ScreenSpace Overlay.</param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.FindIntersectingLink(TMPro.TMP_Text,UnityEngine.Vector3,UnityEngine.Camera)">
            <summary>
            Function returning the index of the Link at the given position (if any).
            </summary>
            <param name="text">A reference to the TMP_Text component.</param>
            <param name="position">Position to check for intersection.</param>
            <param name="camera">The scene camera which may be assigned to a Canvas using ScreenSpace Camera or WorldSpace render mode. Set to null is using ScreenSpace Overlay.</param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.FindNearestLink(TMPro.TMP_Text,UnityEngine.Vector3,UnityEngine.Camera)">
            <summary>
            Function returning the index of the word at the given position (if any).
            </summary>
            <param name="text">A reference to the TMP_Text component.</param>
            <param name="position">Position to check for intersection.</param>
            <param name="camera">The scene camera which may be assigned to a Canvas using ScreenSpace Camera or WorldSpace render mode. Set to null is using ScreenSpace Overlay.</param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.PointIntersectRectangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Function to check if a Point is contained within a Rectangle.
            </summary>
            <param name="m"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.ScreenPointToWorldPointInRectangle(UnityEngine.Transform,UnityEngine.Vector2,UnityEngine.Camera,UnityEngine.Vector3@)">
            <summary>
            Method to convert ScreenPoint to WorldPoint aligned with Rectangle
            </summary>
            <param name="transform"></param>
            <param name="screenPoint"></param>
            <param name="cam"></param>
            <param name="worldPoint"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.IntersectLinePlane(TMPro.TMP_TextUtilities.LineSegment,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3@)">
            <summary>
            Function returning the point of intersection between a line and a plane.
            </summary>
            <param name="line"></param>
            <param name="point"></param>
            <param name="normal"></param>
            <param name="intersectingPoint"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.DistanceToLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Function returning the Square Distance from a Point to a Line.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="F:TMPro.TMP_TextUtilities.k_lookupStringL">
            <summary>
            Table used to convert character to lowercase.
            </summary>
        </member>
        <member name="F:TMPro.TMP_TextUtilities.k_lookupStringU">
            <summary>
            Table used to convert character to uppercase.
            </summary>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.ToLowerFast(System.Char)">
            <summary>
            Get lowercase version of this ASCII character.
            </summary>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.ToUpperFast(System.Char)">
            <summary>
            Get uppercase version of this ASCII character.
            </summary>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.GetSimpleHashCode(System.String)">
            <summary>
            Function which returns a simple hashcode from a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.GetSimpleHashCodeLowercase(System.String)">
            <summary>
            Function which returns a simple hashcode from a string converted to lowercase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.HexToInt(System.Char)">
            <summary>
            Function to convert Hex to Int
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_TextUtilities.StringToInt(System.String)">
            <summary>
            Function to convert a properly formatted string which contains an hex value to its decimal value. 
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="P:TMPro.TMP_UpdateManager.instance">
            <summary>
            Get a singleton instance of the registry
            </summary>
        </member>
        <member name="M:TMPro.TMP_UpdateManager.#ctor">
            <summary>
            Register to receive callback from the Canvas System.
            </summary>
        </member>
        <member name="M:TMPro.TMP_UpdateManager.RegisterTextElementForLayoutRebuild(TMPro.TMP_Text)">
            <summary>
            Function to register elements which require a layout rebuild.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:TMPro.TMP_UpdateManager.RegisterTextElementForGraphicRebuild(TMPro.TMP_Text)">
            <summary>
            Function to register elements which require a layout rebuild.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:TMPro.TMP_UpdateManager.OnCameraPreRender(UnityEngine.Camera)">
            <summary>
            Callback which occurs just before the cam is rendered.
            </summary>
            <param name="cam"></param>
        </member>
        <member name="M:TMPro.TMP_UpdateManager.UnRegisterTextElementForRebuild(TMPro.TMP_Text)">
            <summary>
            Function to unregister elements which no longer require a rebuild.
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:TMPro.TMP_UpdateRegistry">
            <summary>
            Class for handling and scheduling text object updates.
            </summary>
        </member>
        <member name="P:TMPro.TMP_UpdateRegistry.instance">
            <summary>
            Get a singleton instance of the registry
            </summary>
        </member>
        <member name="M:TMPro.TMP_UpdateRegistry.#ctor">
            <summary>
            Register to receive callback from the Canvas System.
            </summary>
        </member>
        <member name="M:TMPro.TMP_UpdateRegistry.RegisterCanvasElementForLayoutRebuild(UnityEngine.UI.ICanvasElement)">
            <summary>
            Function to register elements which require a layout rebuild.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:TMPro.TMP_UpdateRegistry.RegisterCanvasElementForGraphicRebuild(UnityEngine.UI.ICanvasElement)">
            <summary>
            Function to register elements which require a graphic rebuild.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:TMPro.TMP_UpdateRegistry.PerformUpdateForCanvasRendererObjects">
            <summary>
            Method to handle objects that need updating.
            </summary>
        </member>
        <member name="M:TMPro.TMP_UpdateRegistry.PerformUpdateForMeshRendererObjects">
            <summary>
            Method to handle objects that need updating.
            </summary>
        </member>
        <member name="M:TMPro.TMP_UpdateRegistry.UnRegisterCanvasElementForRebuild(UnityEngine.UI.ICanvasElement)">
            <summary>
            Function to unregister elements which no longer require a rebuild.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:TMPro.TMP_XmlTagStack`1.#ctor(`0[])">
            <summary>
            Constructor to create a new item stack.
            </summary>
            <param name="tagStack"></param>
        </member>
        <member name="M:TMPro.TMP_XmlTagStack`1.Clear">
            <summary>
            Function to clear and reset stack to first item.
            </summary>
        </member>
        <member name="M:TMPro.TMP_XmlTagStack`1.SetDefault(`0)">
            <summary>
            Function to set the first item on the stack and reset index.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:TMPro.TMP_XmlTagStack`1.Add(`0)">
            <summary>
            Function to add a new item to the stack.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:TMPro.TMP_XmlTagStack`1.Remove">
            <summary>
            Function to retrieve an item from the stack.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TMPro.TMP_XmlTagStack`1.CurrentItem" -->
        <member name="M:TMPro.TMP_XmlTagStack`1.PreviousItem">
            <summary>
            Function to retrieve the previous item without affecting the stack.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TMPro.FaceInfo">
            <summary>
            Class that contains the basic information about the font.
            </summary>
        </member>
        <member name="M:TMPro.TMP_Glyph.Clone(TMPro.TMP_Glyph)">
            <summary>
            Function to create a deep copy of a GlyphInfo.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:TMPro.TMP_VertexDataUpdateFlags">
            <summary>
            Flags to control what vertex data is pushed to the mesh and renderer.
            </summary>
        </member>
        <member name="T:TMPro.TMP_CharacterInfo">
            <summary>
            Structure containing information about individual text elements (character or sprites).
            </summary>
        </member>
        <member name="F:TMPro.TMP_CharacterInfo.index">
            <summary>
            Index of the character in the raw string.
            </summary>
        </member>
        <member name="M:TMPro.VertexGradient.#ctor(UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color)">
            <summary>
            The vertex colors at the corners of the characters.
            </summary>
            <param name="color0">Top left color.</param>
            <param name="color1">Top right color.</param>
            <param name="color2">Bottom left color.</param>
            <param name="color3">Bottom right color.</param>
        </member>
        <member name="T:TMPro.TMP_LinkInfo">
            <summary>
            Structure containing information about individual links contained in the text object.
            </summary>
        </member>
        <member name="M:TMPro.TMP_LinkInfo.GetLinkText">
            <summary>
            Function which returns the text contained in a link.
            </summary>
            <param name="textInfo"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TMP_LinkInfo.GetLinkID">
            <summary>
            Function which returns the link ID as a string.
            </summary>
            <param name="text">The source input text.</param>
            <returns></returns>
        </member>
        <member name="T:TMPro.TMP_WordInfo">
            <summary>
            Structure containing information about the individual words contained in the text object.
            </summary>
        </member>
        <member name="M:TMPro.TMP_WordInfo.GetWord">
            <summary>
            Returns the word as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TMPro.TagAttribute">
            <summary>
            Structure used to store retrieve the name and hashcode of the font and material
            </summary>
        </member>
        <member name="M:TMPro.TextMeshPro.ON_COLOR_GRADIENT_CHANGED(TMPro.TMP_ColorGradient)">
            <summary>
            Event received when a Color Gradient Preset is modified.
            </summary>
            <param name="textObject"></param>
        </member>
        <member name="M:TMPro.TextMeshPro.ON_TMP_SETTINGS_CHANGED">
            <summary>
            Event received when the TMP Settings are changed.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshPro.GetMaterials(UnityEngine.Material[])">
            <summary>
            Method returning instances of the materials used by the text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TextMeshPro.GetSharedMaterials">
            <summary>
            Method returning an array containing the materials used by the text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TextMeshPro.SetSharedMaterials(UnityEngine.Material[])">
            <summary>
            Method used to assign new materials to the text and sub text objects.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshPro.GetPaddingForMaterial(UnityEngine.Material)">
            <summary>
            Get the padding value for the currently assigned material.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TextMeshPro.GetPaddingForMaterial">
            <summary>
            Get the padding value for the currently assigned material.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TextMeshPro.ComputeMarginSize">
            <summary>
            Update the margin width and height
            </summary>
        </member>
        <member name="M:TMPro.TextMeshPro.LateUpdate">
            <summary>
            Unity standard function used to check if the transform or scale of the text object has changed.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshPro.OnPreRenderObject">
            <summary>
            Function called when the text needs to be updated.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshPro.GenerateTextMesh">
            <summary>
            This is the main function that is responsible for creating / displaying the text.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshPro.GetTextContainerLocalCorners">
            <summary>
            Method to return the local corners of the Text Container or RectTransform.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TextMeshPro.ClearMesh(System.Boolean)">
            <summary>
            Method to clear the mesh.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshPro.SetMeshFilters(System.Boolean)">
            <summary>
            Method to disable the renderers.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshPro.SetActiveSubMeshes(System.Boolean)">
            <summary>
            Method to Enable or Disable child SubMesh objects.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:TMPro.TextMeshPro.GetCompoundBounds">
            <summary>
             Method returning the compound bounds of the text object and child sub objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TextMeshPro.UpdateSDFScale(System.Single)">
            <summary>
            Method to Update Scale in UV2
            </summary>
        </member>
        <member name="P:TMPro.TextMeshPro.lineLength">
            <summary>
            Determines where word wrap will occur.
            </summary>
        </member>
        <member name="P:TMPro.TextMeshPro.anchor">
            <summary>
            Determines the anchor position of the text object.  
            </summary>
        </member>
        <member name="P:TMPro.TextMeshPro.margin">
            <summary>
            The margins of the text object.
            </summary>
        </member>
        <member name="P:TMPro.TextMeshPro.sortingLayerID">
            <summary>
            Sets the Renderer's sorting Layer ID
            </summary>
        </member>
        <member name="P:TMPro.TextMeshPro.sortingOrder">
            <summary>
            Sets the Renderer's sorting order within the assigned layer.
            </summary>
        </member>
        <member name="P:TMPro.TextMeshPro.autoSizeTextContainer">
            <summary>
            Determines if the size of the text container will be adjusted to fit the text object when it is first created.
            </summary>
        </member>
        <member name="P:TMPro.TextMeshPro.textContainer">
            <summary>
            Returns a reference to the Text Container
            </summary>
        </member>
        <member name="P:TMPro.TextMeshPro.transform">
            <summary>
            Returns a reference to the Transform
            </summary>
        </member>
        <member name="P:TMPro.TextMeshPro.renderer">
            <summary>
            Returns the rendered assigned to the text object.
            </summary>
        </member>
        <member name="P:TMPro.TextMeshPro.mesh">
            <summary>
            Returns the mesh assigned to the text object.
            </summary>
        </member>
        <member name="P:TMPro.TextMeshPro.meshFilter">
            <summary>
            Returns the Mesh Filter of the text object.
            </summary>
        </member>
        <member name="P:TMPro.TextMeshPro.maskType">
            <summary>
            Sets the mask type 
            </summary>
        </member>
        <member name="M:TMPro.TextMeshPro.SetMask(TMPro.MaskingTypes,UnityEngine.Vector4)">
            <summary>
            Function used to set the mask type and coordinates in World Space
            </summary>
            <param name="type"></param>
            <param name="maskCoords"></param>
        </member>
        <member name="M:TMPro.TextMeshPro.SetMask(TMPro.MaskingTypes,UnityEngine.Vector4,System.Single,System.Single)">
            <summary>
            Function used to set the mask type, coordinates and softness
            </summary>
            <param name="type"></param>
            <param name="maskCoords"></param>
            <param name="softnessX"></param>
            <param name="softnessY"></param>
        </member>
        <member name="M:TMPro.TextMeshPro.SetVerticesDirty">
            <summary>
            Schedule rebuilding of the text geometry.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshPro.SetLayoutDirty">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TextMeshPro.SetMaterialDirty">
            <summary>
            Schedule updating of the material used by the text object.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshPro.SetAllDirty">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TextMeshPro.Rebuild(UnityEngine.UI.CanvasUpdate)">
            <summary>
            
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:TMPro.TextMeshPro.UpdateMaterial">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TextMeshPro.UpdateMeshPadding">
            <summary>
            Function to be used to force recomputing of character padding when Shader / Material properties have been changed via script.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshPro.ForceMeshUpdate">
            <summary>
            Function to force regeneration of the mesh before its normal process time. This is useful when changes to the text object properties need to be applied immediately.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshPro.ForceMeshUpdate(System.Boolean)">
            <summary>
            Function to force regeneration of the mesh before its normal process time. This is useful when changes to the text object properties need to be applied immediately.
            </summary>
            <param name="ignoreInactive">If set to true, the text object will be regenerated regardless of is active state.</param>
        </member>
        <member name="M:TMPro.TextMeshPro.GetTextInfo(System.String)">
            <summary>
            Function used to evaluate the length of a text string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TextMeshPro.UpdateGeometry(UnityEngine.Mesh,System.Int32)">
            <summary>
            Function to update the geometry of the main and sub text objects.
            </summary>
            <param name="mesh"></param>
            <param name="index"></param>
        </member>
        <member name="M:TMPro.TextMeshPro.UpdateVertexData(TMPro.TMP_VertexDataUpdateFlags)">
            <summary>
            Function to upload the updated vertex data and renderer.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshPro.UpdateVertexData">
            <summary>
            Function to upload the updated vertex data and renderer.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.ON_COLOR_GRADIENT_CHANGED(TMPro.TMP_ColorGradient)">
            <summary>
            Event received when a Color Gradient Preset is modified.
            </summary>
            <param name="textObject"></param>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.ON_TMP_SETTINGS_CHANGED">
            <summary>
            Event received when the TMP Settings are changed.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.GetCanvas">
            <summary>
            Method to retrieve the parent Canvas.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.UpdateEnvMapMatrix">
            <summary>
            Method used when animating the Env Map on the material.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.GetMaterials(UnityEngine.Material[])">
            <summary>
            Method returning instances of the materials used by the text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.GetSharedMaterials">
            <summary>
            Method returning an array containing the materials used by the text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.SetSharedMaterials(UnityEngine.Material[])">
            <summary>
            Method used to assign new materials to the text and sub text objects.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.GetPaddingForMaterial(UnityEngine.Material)">
            <summary>
            Get the padding value for the currently assigned material.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.GetPaddingForMaterial">
            <summary>
            Get the padding value for the currently assigned material.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.ComputeMarginSize">
            <summary>
            Update the margin width and height
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.OnDidApplyAnimationProperties">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.LateUpdate">
            <summary>
            Unity standard function used to check if the transform or scale of the text object has changed.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.GenerateTextMesh">
            <summary>
            This is the main function that is responsible for creating / displaying the text.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.GetTextContainerLocalCorners">
            <summary>
            Method to return the local corners of the Text Container or RectTransform.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.ClearMesh">
            <summary>
            Method to clear the mesh.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.SetActiveSubMeshes(System.Boolean)">
            <summary>
            Method to Enable or Disable child SubMesh objects.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.GetCompoundBounds">
            <summary>
             Method returning the compound bounds of the text object and child sub objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.UpdateSDFScale(System.Single)">
            <summary>
            Method to Update Scale in UV2
            </summary>
        </member>
        <member name="P:TMPro.TextMeshProUGUI.materialForRendering">
            <summary>
            Get the material that will be used for rendering.
            </summary>
        </member>
        <member name="P:TMPro.TextMeshProUGUI.mesh">
            <summary>
            Reference to the Mesh used by the text object.
            </summary>
        </member>
        <member name="P:TMPro.TextMeshProUGUI.canvasRenderer">
            <summary>
            Reference to the CanvasRenderer used by the text object.
            </summary>
        </member>
        <member name="P:TMPro.TextMeshProUGUI.inlineGraphicManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:TMPro.TextMeshProUGUI.m_isRebuildingLayout">
            <summary>
            Anchor dampening prevents the anchor position from being adjusted unless the positional change exceeds about 40% of the width of the underline character. This essentially stabilizes the anchor position.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.CalculateLayoutInputHorizontal">
            <summary>
            Function called by Unity when the horizontal layout needs to be recalculated.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.CalculateLayoutInputVertical">
            <summary>
            Function called by Unity when the vertical layout needs to be recalculated.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.SetLayoutDirty">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.SetMaterialDirty">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.SetAllDirty">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.Rebuild(UnityEngine.UI.CanvasUpdate)">
            <summary>
            
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.UpdateSubObjectPivot">
            <summary>
            Method to keep the pivot of the sub text objects in sync with the parent pivot.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.GetModifiedMaterial(UnityEngine.Material)">
            <summary>
            
            </summary>
            <param name="baseMaterial"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.UpdateMaterial">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMPro.TextMeshProUGUI.maskOffset">
            <summary>
            Sets the masking offset from the bounds of the object
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.RecalculateClipping">
            <summary>
            Method called when the state of a parent changes.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.RecalculateMasking">
            <summary>
            Method called when Stencil Mask needs to be updated on this element and parents.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.UpdateMeshPadding">
            <summary>
            Function to be used to force recomputing of character padding when Shader / Material properties have been changed via script.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.InternalCrossFadeColor(UnityEngine.Color,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Tweens the CanvasRenderer color associated with this Graphic.
            </summary>
            <param name="targetColor">Target color.</param>
            <param name="duration">Tween duration.</param>
            <param name="ignoreTimeScale">Should ignore Time.scale?</param>
            <param name="useAlpha">Should also Tween the alpha channel?</param>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.InternalCrossFadeAlpha(System.Single,System.Single,System.Boolean)">
            <summary>
            Tweens the alpha of the CanvasRenderer color associated with this Graphic.
            </summary>
            <param name="alpha">Target alpha.</param>
            <param name="duration">Duration of the tween in seconds.</param>
            <param name="ignoreTimeScale">Should ignore Time.scale?</param>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.ForceMeshUpdate">
            <summary>
            Function to force regeneration of the mesh before its normal process time. This is useful when changes to the text object properties need to be applied immediately.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.ForceMeshUpdate(System.Boolean)">
            <summary>
            Function to force regeneration of the mesh before its normal process time. This is useful when changes to the text object properties need to be applied immediately.
            </summary>
            <param name="ignoreInactive">If set to true, the text object will be regenerated regardless of is active state.</param>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.GetTextInfo(System.String)">
            <summary>
            Function used to evaluate the length of a text string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.UpdateGeometry(UnityEngine.Mesh,System.Int32)">
            <summary>
            Function to update the geometry of the main and sub text objects.
            </summary>
            <param name="mesh"></param>
            <param name="index"></param>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.UpdateVertexData(TMPro.TMP_VertexDataUpdateFlags)">
            <summary>
            Function to upload the updated vertex data and renderer.
            </summary>
        </member>
        <member name="M:TMPro.TextMeshProUGUI.UpdateVertexData">
            <summary>
            Function to upload the updated vertex data and renderer.
            </summary>
        </member>
        <member name="P:TMPro.TextContainer.rectTransform">
            <summary>
            The RectTransform used by the object
            </summary>
        </member>
        <member name="P:TMPro.TextContainer.textMeshPro">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TextContainer.OnEnable">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TextContainer.OnDisable">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TextContainer.OnContainerChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TextContainer.OnValidate">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMPro.TextContainer.OnRectTransformDimensionsChange">
            <summary>
            Callback from Unity to handle RectTransform changes.
            </summary>
        </member>
    </members>
</doc>
